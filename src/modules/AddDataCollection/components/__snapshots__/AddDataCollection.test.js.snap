// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddDataCollection test should get save confirmation locale correctly 1`] = `
<StandardPage
  title="Add data collection"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "Add another missing dataset",
            "confirmButtonLabel": "Go to my research data",
            "confirmationMessage": <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Alert
                  alertId="alert-warning"
                  allowDismiss={false}
                  customIcon={null}
                  customType={null}
                  disableAlertClick={false}
                  dismissTitle="Click to dismiss this alert"
                  message="lorem ipsum"
                  showLoader={false}
                  title="File upload and/or notes post failed"
                  type="warning"
                  wiggle={null}
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>,
            "confirmationTitle": "Your dataset has been submitted",
            "datasetSuccessConfirmationMessage": <p>
              Your dataset has been saved.
              <br />
              <br />
              Your item will be published immediately and an UQ eSpace Research Outputs Officer will review the work.
            </p>,
            "fileFailConfirmationAlert": Object {
              "alertId": "alert-warning",
              "message": "lorem ipsum",
              "title": "File upload and/or notes post failed",
              "type": "warning",
            },
          }
        }
        onAction={[Function]}
        onCancelAction={[Function]}
        onRef={[Function]}
      />
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to cancel adding this data collection?",
            "confirmationTitle": "Cancel data collection",
          }
        }
        when={true}
      />
      <WithStyles(ForwardRef(Grid))
        className="DataCollection"
        container={true}
        spacing={3}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Deposit agreement"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  depositAgreement={
                    <div>
                      <p>
                        1. I am the creator or co-creator of this dataset, or otherwise authorised to deposit or describe it;
                      </p>
                      <p>
                        2. I have permission to include any third-party content contained in the dataset;
                      </p>
                      <p>
                        3. The dataset is original;
                      </p>
                      <p>
                        4. The dataset does not infringe the legal rights of any third-party;
                      </p>
                      <p>
                        5. I acknowledge that in depositing the dataset, I grant to UQeSpace a perpetual non-exclusive licence to reproduce it and make it available in any format or language;
                      </p>
                      <p>
                        6. The dataset's creator(s) moral rights to be associated with the dataset will be respected by UQeSpace.
                      </p>
                    </div>
                  }
                  depositAgreementFieldId="rek-copyright"
                  disabled={false}
                  name="rek_copyright"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset name"
                  multiline={true}
                  name="rek_title"
                  placeholder="Type the descriptive name for the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset description"
                  multiline={true}
                  name="rek_description"
                  placeholder="Describe the dataset's topic(s) and theme(s)"
                  required={true}
                  rows={1}
                  textFieldId="rek-description"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact name"
                  name="contact.contactName"
                  placeholder="Type the name of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contributor"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  authorIdFieldId="rek-contributor-id"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Contact name ID"
                  fullWidth={true}
                  hintText="Type to search ID of primary contact for this dataset"
                  id="contact-name-id-auto-complete"
                  name="contact.contactNameId"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact email"
                  name="contact.contactEmail"
                  placeholder="Type the email address of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contact-details-email"
                  validate={
                    Array [
                      [Function],
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="DOI"
                  name="fez_record_search_key_doi.rek_doi"
                  placeholder=" "
                  textFieldId="rek-doi"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Publisher"
                  name="fez_record_search_key_publisher.rek_publisher"
                  placeholder="This is where the dataset was originally made available e.g. UQ eSpace"
                  textFieldId="rek-publisher"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication year"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="ANZSRC field of research (FoR) codes"
          >
            <WithStyles(ForwardRef(Typography))>
              Select Field of Research (FoR) codes
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="field-of-research"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          className="Creators"
          item={true}
          xs={12}
        >
          <StandardCard
            title="Creators"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-author"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add creator",
                      "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
                      "creatorRoleLabel": "Enter creator's role",
                      "descriptionStep1": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 1 of 2
                        </span>
                         
                        - Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "descriptionStep1NoStep2": <div>
                        Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "creators-name-as-published-field",
                      "nameAsPublishedHint": "Type the name exactly as published",
                      "nameAsPublishedLabel": "Creator's name as published",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 2 of 2
                        </span>
                         
                        - Please 
                        <b>
                          select your name
                        </b>
                         from the list below (if applicable).
                      </div>,
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Creator's name as published",
                      "reorderColumn": "Reorder items",
                      "roleColumn": "Creator's role",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this creator ([name]) to assign it as you",
                      "selectedHint": "This is you",
                      "suffix": " listed creator",
                      "unselectedHint": "Select this to confirm this creator is you",
                    },
                  },
                }
              }
              name="authors"
              required={true}
              showIdentifierLookup={true}
              showRoleInput={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            help={
              Object {
                "text": <div>
                  <h3>
                    Access conditions
                  </h3>
                  <ul>
                    <li>
                      Open Access (upload your data, or link to the data)
                    </li>
                    <li>
                      Meditated Access
                    </li>
                  </ul>
                  <h3>
                    Licence
                  </h3>
                  <h4>
                    UQ General Usage Terms and Conditions for data publishing in eSpace
                  </h4>
                  <p>
                    University of Queensland provides standard licence agreements for researchers publishing their datasets in eSpace. The license agreements ensure that downloads and reuse of your data will be properly acknowledged.
                  </p>
                  <h4>
                    Current types of licences
                  </h4>
                  <h5>
                    Permitted Re-use with Acknowledgement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Commercial Use Restriction
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Share Alike Requirement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <p>
                    View more on
                     
                    <a
                      href="http://guides.library.uq.edu.au/deposit_your_data/terms_and_conditions"
                      target="_blank"
                    >
                      UQ Terms & Conditions
                    </a>
                  </p>
                </div>,
                "title": "Access and licence",
              }
            }
            title="Access and licence"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-access-conditions"
                  id="data-collection-access-selector"
                  itemsList={
                    Array [
                      Object {
                        "text": "Open Access",
                        "value": 453619,
                      },
                      Object {
                        "text": "Mediated Access",
                        "value": 453618,
                      },
                    ]
                  }
                  label="Access conditions"
                  name="fez_record_search_key_access_conditions.rek_access_conditions"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  ariaLabel="Please elect a license"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-license"
                  id="data-collection-licence-selector"
                  itemsList={
                    Array [
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted Re-use with Acknowledgement",
                        "value": 453701,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Commercial Use Restriction",
                        "value": 454104,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Share Alike Requirement",
                        "value": 454105,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient",
                        "value": 456807,
                      },
                    ]
                  }
                  label="License"
                  name="fez_record_search_key_license.rek_license"
                  required={true}
                  selectPrompt="Select a license"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Copyright notice"
                  name="fez_record_search_key_rights.rek_rights"
                  placeholder="e.g. 2012, The University of Queensland"
                  textFieldId="rek-rights"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Project information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project name"
                  multiline={true}
                  name="fez_record_search_key_project_name.rek_project_name"
                  placeholder="Type the name of the project that initiated the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-name"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project description"
                  multiline={true}
                  name="fez_record_search_key_project_description.rek_project_description"
                  placeholder="Briefly describe the project, including purpose"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-description"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-agency"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "funding-body-input",
                          "inputFieldHint": "Type the name of the funding body(s) associated with your research e.g. ARC, NHMRC",
                          "inputFieldLabel": "Funding body",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all funding bodies",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all funding bodies?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Funding body",
                          "reorderColumn": "Reorder funding bodies",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this funding body",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this funding body?",
                            "confirmationTitle": "Delete funding body",
                          },
                          "moveDownHint": "Move funding body down the order",
                          "moveUpHint": "Move funding body up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_agency"
                  searchKey={
                    Object {
                      "order": "rek_grant_agency_order",
                      "value": "rek_grant_agency",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-id"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "grant-id-input",
                          "inputFieldHint": "Type grantID",
                          "inputFieldLabel": "Grant IDs",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all grant IDs",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all grant IDs?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Grant ID",
                          "reorderColumn": "Reorder grant IDs",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this grant ID",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this grant ID?",
                            "confirmationTitle": "Delete grant ID",
                          },
                          "moveDownHint": "Move grant ID down the order",
                          "moveUpHint": "Move grant ID up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_id"
                  searchKey={
                    Object {
                      "order": "rek_grant_id_order",
                      "value": "rek_grant_id",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset details"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-type-of-data"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "type-of-data-input",
                          "inputFieldHint": "Enter type of data",
                          "inputFieldLabel": "Type of data",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all types of data",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all types of data?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Type of data",
                          "reorderColumn": "Reorder types of data",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this type of data",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this type of data?",
                            "confirmationTitle": "Delete type of data",
                          },
                          "editHint": "Edit this type of data",
                          "moveDownHint": "Move type of data down the order",
                          "moveUpHint": "Move type of data up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_type_of_data"
                  searchKey={
                    Object {
                      "order": "rek_type_of_data_order",
                      "value": "rek_type_of_data",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-software-required"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add software",
                          "editButtonLabel": "Update software",
                          "id": "software-required-input",
                          "inputFieldHint": "Type software required",
                          "inputFieldLabel": "Software required",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all software required",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all software required?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Software required",
                          "reorderColumn": "Reorder software required",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this software required",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this software required?",
                            "confirmationTitle": "Delete software required",
                          },
                          "editHint": "Edit this software required",
                          "moveDownHint": "Move software required down the order",
                          "moveUpHint": "Move software required up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_software_required"
                  searchKey={
                    Object {
                      "order": "rek_software_required_order",
                      "value": "rek_software_required",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  ListEditorForm={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-keywords"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "keywords-input",
                          "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                          "inputFieldLabel": "Keywords",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all keywords",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all keywords?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Keyword",
                          "reorderColumn": "Reorder keywords",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this keyword",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this keyword?",
                            "confirmationTitle": "Delete keyword",
                          },
                          "editHint": "Edit this item",
                          "moveDownHint": "Move keyword down the order",
                          "moveUpHint": "Move keyword up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_keywords"
                  searchKey={
                    Object {
                      "order": "rek_keywords_order",
                      "value": "rek_keywords",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection start date"
                  hasError=""
                  id="rek_start_date"
                  name="fez_record_search_key_start_date.rek_start_date"
                  partialDateFieldId="rek-start-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection end date"
                  hasError=""
                  id="rek_end_date"
                  name="fez_record_search_key_end_date.rek_end_date"
                  partialDateFieldId="rek-end-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Geographic coordinates"
          >
            <WithStyles(ForwardRef(Typography))
              gutterBottom={true}
              variant="caption"
            >
              Use this tool to specify the geographic co-ordinates the data relates to
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              name="geographicArea"
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Related datasets/work"
          >
            <Field
              component={[Function]}
              disabled={false}
              height={50}
              listEditorId="related-datasets"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Begin searching by title or PID for related works in eSpace and add it to the list",
                      "inputFieldLabel": "Related datasets/works in eSpace",
                      "title": "Related datasets/work",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all Related datasets/work",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all Related datasets/work?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Related datasets/work",
                      "reorderColumn": "Reorder Related datasets/work",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this Related datasets/work",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this Related datasets/work?",
                        "confirmationTitle": "Delete Related datasets/work",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move Related datasets/work down the order",
                      "moveUpHint": "Move Related datasets/work up the order",
                    },
                  },
                  "title": "Related datasets/work",
                }
              }
              name="fez_record_search_key_isdatasetof"
              searchKey={
                Object {
                  "order": "rek_isdatasetof_order",
                  "value": "rek_isdatasetof",
                }
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={2}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Additional information"
                  multiline={true}
                  name="fez_record_search_key_additional_notes.rek_additional_notes"
                  placeholder="Additional information related to the dataset"
                  textFieldId="rek-additional-notes"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Link to data in external repository"
                  name="rek_link"
                  placeholder="Provide the URL to the dataset where stored in another repository"
                  textFieldId="rek-link"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              disabled={false}
              locale={
                Object {
                  "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the record.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files,
                    <br />
                    or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Please ensure:
                    <ul>
                      <li>
                        files are under 5GB in size
                      </li>
                      <li>
                        file names begin with a letter and are less than 45 characters long
                      </li>
                      <li>
                        file names contain only upper and lowercase alphanumeric characters, and underscores
                      </li>
                      <li>
                        file names must not contain any spaces
                      </li>
                      <li>
                        file names have only a single period which precedes the file extension: e.g. “.pdf”, “.mov”, “.tiff”, “.wav” etc.
                        <br />
                        (two periods are allowed for multipart zip files. Allowed formats for part description are: e.g. “.001 ... .999”, “.r01 ... .r999” and “.part1 ... .part999”)
                      </li>
                      <li>
                        file names have one of the following extensions: 7z, avi, csv, gif, gsheet, gz, jpe, jpeg, jpg, m1v, m2v, m4a, mk3d, mks, mkv, mov, mp3, mp4, mp4v, mpe, mpeg, mpg, mxf, ods, pdf, png, qt, rar, tar, tif, tiff, wav, wma, wmv, xla, xlc, xlm, xls, xlsx, xlt, xlw, zip
                      </li>
                      <li>
                        files are uploaded individually and not inside a folder
                      </li>
                    </ul>
                  </div>,
                  "fileUploadRow": Object {
                    "defaultView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                    },
                    "deleteHint": "Remove this file",
                    "deleteRecordConfirmation": Object {
                      "cancelButtonLabel": "No",
                      "confirmButtonLabel": "Yes",
                      "confirmationMessage": "Are you sure you want to remove this file from the uploaded queue?",
                      "confirmationTitle": "Delete file",
                    },
                    "embargoDateClosedAccess": "No date required",
                    "embargoDateColumn": "Embargo date",
                    "fileAccessColumn": "File access",
                    "fileUploadRowAccessSelector": Object {
                      "options": Array [
                        Object {
                          "text": "Open Access",
                          "value": 5,
                        },
                        Object {
                          "text": "Mediated Access",
                          "value": 1,
                        },
                      ],
                    },
                    "filenameColumn": "File name",
                    "mobileView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                      "embargoDateColumn": "Embargo date",
                      "fileAccessColumn": "File access",
                      "filenameColumn": "File name",
                    },
                    "uploadInProgressText": "Uploading...",
                  },
                  "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
                  "ntroSpecificInstructions": <span>
                    You must upload at least one piece of evidence that demonstrates claims you have made about this work, e.g. Event program, music score, recording, scholarly review, front matter (book, catalogue) or full chapter.
                    <a
                      href="https://guides.library.uq.edu.au/for-researchers/uqespace-publications-datasets/ntro-submission-requirements#s-lg-box-20836613"
                      target="_blank"
                    >
                      More information
                    </a>
                    .
                  </span>,
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "sameFileNameWithDifferentExt": "File(s) ([fileNames]) have same name that match with other files with different extension",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              requireOpenAccessStatus={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        container={true}
        spacing={2}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={true}
          xs={false}
        />
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Cancel"
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Submit for approval"
            color="primary"
            fullWidth={true}
            id="submit-data-collection"
            onClick={[MockFunction]}
            variant="contained"
          >
            Submit for approval
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;

exports[`AddDataCollection test should not generate an error when licence locale is missing 1`] = `undefined`;

exports[`AddDataCollection test should not generate an error when licence locale is missing 2`] = `undefined`;

exports[`AddDataCollection test should render component with a valid collection date range 1`] = `
<StandardPage
  title="Add data collection"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "Add another missing dataset",
            "confirmButtonLabel": "Go to my research data",
            "confirmationMessage": <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              />
            </WithStyles(ForwardRef(Grid))>,
            "confirmationTitle": "Your dataset has been submitted",
            "datasetSuccessConfirmationMessage": <p>
              Your dataset has been saved.
              <br />
              <br />
              Your item will be published immediately and an UQ eSpace Research Outputs Officer will review the work.
            </p>,
            "fileFailConfirmationAlert": Object {
              "alertId": "alert-warning",
              "message": "lorem ipsum",
              "title": "File upload and/or notes post failed",
              "type": "warning",
            },
          }
        }
        onAction={[Function]}
        onCancelAction={[Function]}
        onRef={[Function]}
      />
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to cancel adding this data collection?",
            "confirmationTitle": "Cancel data collection",
          }
        }
        when={true}
      />
      <WithStyles(ForwardRef(Grid))
        className="DataCollection"
        container={true}
        spacing={3}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Deposit agreement"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  depositAgreement={
                    <div>
                      <p>
                        1. I am the creator or co-creator of this dataset, or otherwise authorised to deposit or describe it;
                      </p>
                      <p>
                        2. I have permission to include any third-party content contained in the dataset;
                      </p>
                      <p>
                        3. The dataset is original;
                      </p>
                      <p>
                        4. The dataset does not infringe the legal rights of any third-party;
                      </p>
                      <p>
                        5. I acknowledge that in depositing the dataset, I grant to UQeSpace a perpetual non-exclusive licence to reproduce it and make it available in any format or language;
                      </p>
                      <p>
                        6. The dataset's creator(s) moral rights to be associated with the dataset will be respected by UQeSpace.
                      </p>
                    </div>
                  }
                  depositAgreementFieldId="rek-copyright"
                  disabled={false}
                  name="rek_copyright"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset name"
                  multiline={true}
                  name="rek_title"
                  placeholder="Type the descriptive name for the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset description"
                  multiline={true}
                  name="rek_description"
                  placeholder="Describe the dataset's topic(s) and theme(s)"
                  required={true}
                  rows={1}
                  textFieldId="rek-description"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact name"
                  name="contact.contactName"
                  placeholder="Type the name of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contributor"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  authorIdFieldId="rek-contributor-id"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Contact name ID"
                  fullWidth={true}
                  hintText="Type to search ID of primary contact for this dataset"
                  id="contact-name-id-auto-complete"
                  name="contact.contactNameId"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact email"
                  name="contact.contactEmail"
                  placeholder="Type the email address of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contact-details-email"
                  validate={
                    Array [
                      [Function],
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="DOI"
                  name="fez_record_search_key_doi.rek_doi"
                  placeholder=" "
                  textFieldId="rek-doi"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Publisher"
                  name="fez_record_search_key_publisher.rek_publisher"
                  placeholder="This is where the dataset was originally made available e.g. UQ eSpace"
                  textFieldId="rek-publisher"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication year"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="ANZSRC field of research (FoR) codes"
          >
            <WithStyles(ForwardRef(Typography))>
              Select Field of Research (FoR) codes
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="field-of-research"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          className="Creators"
          item={true}
          xs={12}
        >
          <StandardCard
            title="Creators"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-author"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add creator",
                      "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
                      "creatorRoleLabel": "Enter creator's role",
                      "descriptionStep1": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 1 of 2
                        </span>
                         
                        - Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "descriptionStep1NoStep2": <div>
                        Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "creators-name-as-published-field",
                      "nameAsPublishedHint": "Type the name exactly as published",
                      "nameAsPublishedLabel": "Creator's name as published",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 2 of 2
                        </span>
                         
                        - Please 
                        <b>
                          select your name
                        </b>
                         from the list below (if applicable).
                      </div>,
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Creator's name as published",
                      "reorderColumn": "Reorder items",
                      "roleColumn": "Creator's role",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this creator ([name]) to assign it as you",
                      "selectedHint": "This is you",
                      "suffix": " listed creator",
                      "unselectedHint": "Select this to confirm this creator is you",
                    },
                  },
                }
              }
              name="authors"
              required={true}
              showIdentifierLookup={true}
              showRoleInput={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            help={
              Object {
                "text": <div>
                  <h3>
                    Access conditions
                  </h3>
                  <ul>
                    <li>
                      Open Access (upload your data, or link to the data)
                    </li>
                    <li>
                      Meditated Access
                    </li>
                  </ul>
                  <h3>
                    Licence
                  </h3>
                  <h4>
                    UQ General Usage Terms and Conditions for data publishing in eSpace
                  </h4>
                  <p>
                    University of Queensland provides standard licence agreements for researchers publishing their datasets in eSpace. The license agreements ensure that downloads and reuse of your data will be properly acknowledged.
                  </p>
                  <h4>
                    Current types of licences
                  </h4>
                  <h5>
                    Permitted Re-use with Acknowledgement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Commercial Use Restriction
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Share Alike Requirement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <p>
                    View more on
                     
                    <a
                      href="http://guides.library.uq.edu.au/deposit_your_data/terms_and_conditions"
                      target="_blank"
                    >
                      UQ Terms & Conditions
                    </a>
                  </p>
                </div>,
                "title": "Access and licence",
              }
            }
            title="Access and licence"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-access-conditions"
                  id="data-collection-access-selector"
                  itemsList={
                    Array [
                      Object {
                        "text": "Open Access",
                        "value": 453619,
                      },
                      Object {
                        "text": "Mediated Access",
                        "value": 453618,
                      },
                    ]
                  }
                  label="Access conditions"
                  name="fez_record_search_key_access_conditions.rek_access_conditions"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  ariaLabel="Please elect a license"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-license"
                  id="data-collection-licence-selector"
                  itemsList={
                    Array [
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted Re-use with Acknowledgement",
                        "value": 453701,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Commercial Use Restriction",
                        "value": 454104,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Share Alike Requirement",
                        "value": 454105,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient",
                        "value": 456807,
                      },
                    ]
                  }
                  label="License"
                  name="fez_record_search_key_license.rek_license"
                  required={true}
                  selectPrompt="Select a license"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Copyright notice"
                  name="fez_record_search_key_rights.rek_rights"
                  placeholder="e.g. 2012, The University of Queensland"
                  textFieldId="rek-rights"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Project information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project name"
                  multiline={true}
                  name="fez_record_search_key_project_name.rek_project_name"
                  placeholder="Type the name of the project that initiated the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-name"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project description"
                  multiline={true}
                  name="fez_record_search_key_project_description.rek_project_description"
                  placeholder="Briefly describe the project, including purpose"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-description"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-agency"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "funding-body-input",
                          "inputFieldHint": "Type the name of the funding body(s) associated with your research e.g. ARC, NHMRC",
                          "inputFieldLabel": "Funding body",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all funding bodies",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all funding bodies?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Funding body",
                          "reorderColumn": "Reorder funding bodies",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this funding body",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this funding body?",
                            "confirmationTitle": "Delete funding body",
                          },
                          "moveDownHint": "Move funding body down the order",
                          "moveUpHint": "Move funding body up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_agency"
                  searchKey={
                    Object {
                      "order": "rek_grant_agency_order",
                      "value": "rek_grant_agency",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-id"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "grant-id-input",
                          "inputFieldHint": "Type grantID",
                          "inputFieldLabel": "Grant IDs",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all grant IDs",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all grant IDs?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Grant ID",
                          "reorderColumn": "Reorder grant IDs",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this grant ID",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this grant ID?",
                            "confirmationTitle": "Delete grant ID",
                          },
                          "moveDownHint": "Move grant ID down the order",
                          "moveUpHint": "Move grant ID up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_id"
                  searchKey={
                    Object {
                      "order": "rek_grant_id_order",
                      "value": "rek_grant_id",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset details"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-type-of-data"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "type-of-data-input",
                          "inputFieldHint": "Enter type of data",
                          "inputFieldLabel": "Type of data",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all types of data",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all types of data?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Type of data",
                          "reorderColumn": "Reorder types of data",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this type of data",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this type of data?",
                            "confirmationTitle": "Delete type of data",
                          },
                          "editHint": "Edit this type of data",
                          "moveDownHint": "Move type of data down the order",
                          "moveUpHint": "Move type of data up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_type_of_data"
                  searchKey={
                    Object {
                      "order": "rek_type_of_data_order",
                      "value": "rek_type_of_data",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-software-required"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add software",
                          "editButtonLabel": "Update software",
                          "id": "software-required-input",
                          "inputFieldHint": "Type software required",
                          "inputFieldLabel": "Software required",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all software required",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all software required?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Software required",
                          "reorderColumn": "Reorder software required",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this software required",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this software required?",
                            "confirmationTitle": "Delete software required",
                          },
                          "editHint": "Edit this software required",
                          "moveDownHint": "Move software required down the order",
                          "moveUpHint": "Move software required up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_software_required"
                  searchKey={
                    Object {
                      "order": "rek_software_required_order",
                      "value": "rek_software_required",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  ListEditorForm={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-keywords"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "keywords-input",
                          "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                          "inputFieldLabel": "Keywords",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all keywords",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all keywords?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Keyword",
                          "reorderColumn": "Reorder keywords",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this keyword",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this keyword?",
                            "confirmationTitle": "Delete keyword",
                          },
                          "editHint": "Edit this item",
                          "moveDownHint": "Move keyword down the order",
                          "moveUpHint": "Move keyword up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_keywords"
                  searchKey={
                    Object {
                      "order": "rek_keywords_order",
                      "value": "rek_keywords",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection start date"
                  hasError=""
                  id="rek_start_date"
                  name="fez_record_search_key_start_date.rek_start_date"
                  partialDateFieldId="rek-start-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection end date"
                  hasError=""
                  id="rek_end_date"
                  name="fez_record_search_key_end_date.rek_end_date"
                  partialDateFieldId="rek-end-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Geographic coordinates"
          >
            <WithStyles(ForwardRef(Typography))
              gutterBottom={true}
              variant="caption"
            >
              Use this tool to specify the geographic co-ordinates the data relates to
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              name="geographicArea"
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Related datasets/work"
          >
            <Field
              component={[Function]}
              disabled={false}
              height={50}
              listEditorId="related-datasets"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Begin searching by title or PID for related works in eSpace and add it to the list",
                      "inputFieldLabel": "Related datasets/works in eSpace",
                      "title": "Related datasets/work",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all Related datasets/work",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all Related datasets/work?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Related datasets/work",
                      "reorderColumn": "Reorder Related datasets/work",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this Related datasets/work",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this Related datasets/work?",
                        "confirmationTitle": "Delete Related datasets/work",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move Related datasets/work down the order",
                      "moveUpHint": "Move Related datasets/work up the order",
                    },
                  },
                  "title": "Related datasets/work",
                }
              }
              name="fez_record_search_key_isdatasetof"
              searchKey={
                Object {
                  "order": "rek_isdatasetof_order",
                  "value": "rek_isdatasetof",
                }
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={2}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Additional information"
                  multiline={true}
                  name="fez_record_search_key_additional_notes.rek_additional_notes"
                  placeholder="Additional information related to the dataset"
                  textFieldId="rek-additional-notes"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Link to data in external repository"
                  name="rek_link"
                  placeholder="Provide the URL to the dataset where stored in another repository"
                  textFieldId="rek-link"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              disabled={false}
              locale={
                Object {
                  "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the record.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files,
                    <br />
                    or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Please ensure:
                    <ul>
                      <li>
                        files are under 5GB in size
                      </li>
                      <li>
                        file names begin with a letter and are less than 45 characters long
                      </li>
                      <li>
                        file names contain only upper and lowercase alphanumeric characters, and underscores
                      </li>
                      <li>
                        file names must not contain any spaces
                      </li>
                      <li>
                        file names have only a single period which precedes the file extension: e.g. “.pdf”, “.mov”, “.tiff”, “.wav” etc.
                        <br />
                        (two periods are allowed for multipart zip files. Allowed formats for part description are: e.g. “.001 ... .999”, “.r01 ... .r999” and “.part1 ... .part999”)
                      </li>
                      <li>
                        file names have one of the following extensions: 7z, avi, csv, gif, gsheet, gz, jpe, jpeg, jpg, m1v, m2v, m4a, mk3d, mks, mkv, mov, mp3, mp4, mp4v, mpe, mpeg, mpg, mxf, ods, pdf, png, qt, rar, tar, tif, tiff, wav, wma, wmv, xla, xlc, xlm, xls, xlsx, xlt, xlw, zip
                      </li>
                      <li>
                        files are uploaded individually and not inside a folder
                      </li>
                    </ul>
                  </div>,
                  "fileUploadRow": Object {
                    "defaultView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                    },
                    "deleteHint": "Remove this file",
                    "deleteRecordConfirmation": Object {
                      "cancelButtonLabel": "No",
                      "confirmButtonLabel": "Yes",
                      "confirmationMessage": "Are you sure you want to remove this file from the uploaded queue?",
                      "confirmationTitle": "Delete file",
                    },
                    "embargoDateClosedAccess": "No date required",
                    "embargoDateColumn": "Embargo date",
                    "fileAccessColumn": "File access",
                    "fileUploadRowAccessSelector": Object {
                      "options": Array [
                        Object {
                          "text": "Open Access",
                          "value": 5,
                        },
                        Object {
                          "text": "Mediated Access",
                          "value": 1,
                        },
                      ],
                    },
                    "filenameColumn": "File name",
                    "mobileView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                      "embargoDateColumn": "Embargo date",
                      "fileAccessColumn": "File access",
                      "filenameColumn": "File name",
                    },
                    "uploadInProgressText": "Uploading...",
                  },
                  "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
                  "ntroSpecificInstructions": <span>
                    You must upload at least one piece of evidence that demonstrates claims you have made about this work, e.g. Event program, music score, recording, scholarly review, front matter (book, catalogue) or full chapter.
                    <a
                      href="https://guides.library.uq.edu.au/for-researchers/uqespace-publications-datasets/ntro-submission-requirements#s-lg-box-20836613"
                      target="_blank"
                    >
                      More information
                    </a>
                    .
                  </span>,
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "sameFileNameWithDifferentExt": "File(s) ([fileNames]) have same name that match with other files with different extension",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              requireOpenAccessStatus={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        container={true}
        spacing={2}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={true}
          xs={false}
        />
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Cancel"
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Submit for approval"
            color="primary"
            fullWidth={true}
            id="submit-data-collection"
            onClick={[MockFunction]}
            variant="contained"
          >
            Submit for approval
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;

exports[`AddDataCollection test should render component with an invalid collection date range 1`] = `
<StandardPage
  title="Add data collection"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "Add another missing dataset",
            "confirmButtonLabel": "Go to my research data",
            "confirmationMessage": <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              />
            </WithStyles(ForwardRef(Grid))>,
            "confirmationTitle": "Your dataset has been submitted",
            "datasetSuccessConfirmationMessage": <p>
              Your dataset has been saved.
              <br />
              <br />
              Your item will be published immediately and an UQ eSpace Research Outputs Officer will review the work.
            </p>,
            "fileFailConfirmationAlert": Object {
              "alertId": "alert-warning",
              "message": "lorem ipsum",
              "title": "File upload and/or notes post failed",
              "type": "warning",
            },
          }
        }
        onAction={[Function]}
        onCancelAction={[Function]}
        onRef={[Function]}
      />
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to cancel adding this data collection?",
            "confirmationTitle": "Cancel data collection",
          }
        }
        when={true}
      />
      <WithStyles(ForwardRef(Grid))
        className="DataCollection"
        container={true}
        spacing={3}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Deposit agreement"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  depositAgreement={
                    <div>
                      <p>
                        1. I am the creator or co-creator of this dataset, or otherwise authorised to deposit or describe it;
                      </p>
                      <p>
                        2. I have permission to include any third-party content contained in the dataset;
                      </p>
                      <p>
                        3. The dataset is original;
                      </p>
                      <p>
                        4. The dataset does not infringe the legal rights of any third-party;
                      </p>
                      <p>
                        5. I acknowledge that in depositing the dataset, I grant to UQeSpace a perpetual non-exclusive licence to reproduce it and make it available in any format or language;
                      </p>
                      <p>
                        6. The dataset's creator(s) moral rights to be associated with the dataset will be respected by UQeSpace.
                      </p>
                    </div>
                  }
                  depositAgreementFieldId="rek-copyright"
                  disabled={false}
                  name="rek_copyright"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset name"
                  multiline={true}
                  name="rek_title"
                  placeholder="Type the descriptive name for the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset description"
                  multiline={true}
                  name="rek_description"
                  placeholder="Describe the dataset's topic(s) and theme(s)"
                  required={true}
                  rows={1}
                  textFieldId="rek-description"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact name"
                  name="contact.contactName"
                  placeholder="Type the name of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contributor"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  authorIdFieldId="rek-contributor-id"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Contact name ID"
                  fullWidth={true}
                  hintText="Type to search ID of primary contact for this dataset"
                  id="contact-name-id-auto-complete"
                  name="contact.contactNameId"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact email"
                  name="contact.contactEmail"
                  placeholder="Type the email address of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contact-details-email"
                  validate={
                    Array [
                      [Function],
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="DOI"
                  name="fez_record_search_key_doi.rek_doi"
                  placeholder=" "
                  textFieldId="rek-doi"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Publisher"
                  name="fez_record_search_key_publisher.rek_publisher"
                  placeholder="This is where the dataset was originally made available e.g. UQ eSpace"
                  textFieldId="rek-publisher"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication year"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="ANZSRC field of research (FoR) codes"
          >
            <WithStyles(ForwardRef(Typography))>
              Select Field of Research (FoR) codes
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="field-of-research"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          className="Creators"
          item={true}
          xs={12}
        >
          <StandardCard
            title="Creators"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-author"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add creator",
                      "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
                      "creatorRoleLabel": "Enter creator's role",
                      "descriptionStep1": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 1 of 2
                        </span>
                         
                        - Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "descriptionStep1NoStep2": <div>
                        Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "creators-name-as-published-field",
                      "nameAsPublishedHint": "Type the name exactly as published",
                      "nameAsPublishedLabel": "Creator's name as published",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 2 of 2
                        </span>
                         
                        - Please 
                        <b>
                          select your name
                        </b>
                         from the list below (if applicable).
                      </div>,
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Creator's name as published",
                      "reorderColumn": "Reorder items",
                      "roleColumn": "Creator's role",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this creator ([name]) to assign it as you",
                      "selectedHint": "This is you",
                      "suffix": " listed creator",
                      "unselectedHint": "Select this to confirm this creator is you",
                    },
                  },
                }
              }
              name="authors"
              required={true}
              showIdentifierLookup={true}
              showRoleInput={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            help={
              Object {
                "text": <div>
                  <h3>
                    Access conditions
                  </h3>
                  <ul>
                    <li>
                      Open Access (upload your data, or link to the data)
                    </li>
                    <li>
                      Meditated Access
                    </li>
                  </ul>
                  <h3>
                    Licence
                  </h3>
                  <h4>
                    UQ General Usage Terms and Conditions for data publishing in eSpace
                  </h4>
                  <p>
                    University of Queensland provides standard licence agreements for researchers publishing their datasets in eSpace. The license agreements ensure that downloads and reuse of your data will be properly acknowledged.
                  </p>
                  <h4>
                    Current types of licences
                  </h4>
                  <h5>
                    Permitted Re-use with Acknowledgement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Commercial Use Restriction
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Share Alike Requirement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <p>
                    View more on
                     
                    <a
                      href="http://guides.library.uq.edu.au/deposit_your_data/terms_and_conditions"
                      target="_blank"
                    >
                      UQ Terms & Conditions
                    </a>
                  </p>
                </div>,
                "title": "Access and licence",
              }
            }
            title="Access and licence"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-access-conditions"
                  id="data-collection-access-selector"
                  itemsList={
                    Array [
                      Object {
                        "text": "Open Access",
                        "value": 453619,
                      },
                      Object {
                        "text": "Mediated Access",
                        "value": 453618,
                      },
                    ]
                  }
                  label="Access conditions"
                  name="fez_record_search_key_access_conditions.rek_access_conditions"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  ariaLabel="Please elect a license"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-license"
                  id="data-collection-licence-selector"
                  itemsList={
                    Array [
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted Re-use with Acknowledgement",
                        "value": 453701,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Commercial Use Restriction",
                        "value": 454104,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Share Alike Requirement",
                        "value": 454105,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient",
                        "value": 456807,
                      },
                    ]
                  }
                  label="License"
                  name="fez_record_search_key_license.rek_license"
                  required={true}
                  selectPrompt="Select a license"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Copyright notice"
                  name="fez_record_search_key_rights.rek_rights"
                  placeholder="e.g. 2012, The University of Queensland"
                  textFieldId="rek-rights"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Project information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project name"
                  multiline={true}
                  name="fez_record_search_key_project_name.rek_project_name"
                  placeholder="Type the name of the project that initiated the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-name"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project description"
                  multiline={true}
                  name="fez_record_search_key_project_description.rek_project_description"
                  placeholder="Briefly describe the project, including purpose"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-description"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-agency"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "funding-body-input",
                          "inputFieldHint": "Type the name of the funding body(s) associated with your research e.g. ARC, NHMRC",
                          "inputFieldLabel": "Funding body",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all funding bodies",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all funding bodies?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Funding body",
                          "reorderColumn": "Reorder funding bodies",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this funding body",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this funding body?",
                            "confirmationTitle": "Delete funding body",
                          },
                          "moveDownHint": "Move funding body down the order",
                          "moveUpHint": "Move funding body up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_agency"
                  searchKey={
                    Object {
                      "order": "rek_grant_agency_order",
                      "value": "rek_grant_agency",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-id"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "grant-id-input",
                          "inputFieldHint": "Type grantID",
                          "inputFieldLabel": "Grant IDs",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all grant IDs",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all grant IDs?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Grant ID",
                          "reorderColumn": "Reorder grant IDs",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this grant ID",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this grant ID?",
                            "confirmationTitle": "Delete grant ID",
                          },
                          "moveDownHint": "Move grant ID down the order",
                          "moveUpHint": "Move grant ID up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_id"
                  searchKey={
                    Object {
                      "order": "rek_grant_id_order",
                      "value": "rek_grant_id",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset details"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-type-of-data"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "type-of-data-input",
                          "inputFieldHint": "Enter type of data",
                          "inputFieldLabel": "Type of data",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all types of data",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all types of data?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Type of data",
                          "reorderColumn": "Reorder types of data",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this type of data",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this type of data?",
                            "confirmationTitle": "Delete type of data",
                          },
                          "editHint": "Edit this type of data",
                          "moveDownHint": "Move type of data down the order",
                          "moveUpHint": "Move type of data up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_type_of_data"
                  searchKey={
                    Object {
                      "order": "rek_type_of_data_order",
                      "value": "rek_type_of_data",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-software-required"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add software",
                          "editButtonLabel": "Update software",
                          "id": "software-required-input",
                          "inputFieldHint": "Type software required",
                          "inputFieldLabel": "Software required",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all software required",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all software required?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Software required",
                          "reorderColumn": "Reorder software required",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this software required",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this software required?",
                            "confirmationTitle": "Delete software required",
                          },
                          "editHint": "Edit this software required",
                          "moveDownHint": "Move software required down the order",
                          "moveUpHint": "Move software required up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_software_required"
                  searchKey={
                    Object {
                      "order": "rek_software_required_order",
                      "value": "rek_software_required",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  ListEditorForm={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-keywords"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "keywords-input",
                          "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                          "inputFieldLabel": "Keywords",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all keywords",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all keywords?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Keyword",
                          "reorderColumn": "Reorder keywords",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this keyword",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this keyword?",
                            "confirmationTitle": "Delete keyword",
                          },
                          "editHint": "Edit this item",
                          "moveDownHint": "Move keyword down the order",
                          "moveUpHint": "Move keyword up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_keywords"
                  searchKey={
                    Object {
                      "order": "rek_keywords_order",
                      "value": "rek_keywords",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection start date"
                  hasError="Date range is not valid"
                  id="rek_start_date"
                  name="fez_record_search_key_start_date.rek_start_date"
                  partialDateFieldId="rek-start-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection end date"
                  hasError="Date range is not valid"
                  id="rek_end_date"
                  name="fez_record_search_key_end_date.rek_end_date"
                  partialDateFieldId="rek-end-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Geographic coordinates"
          >
            <WithStyles(ForwardRef(Typography))
              gutterBottom={true}
              variant="caption"
            >
              Use this tool to specify the geographic co-ordinates the data relates to
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              name="geographicArea"
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Related datasets/work"
          >
            <Field
              component={[Function]}
              disabled={false}
              height={50}
              listEditorId="related-datasets"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Begin searching by title or PID for related works in eSpace and add it to the list",
                      "inputFieldLabel": "Related datasets/works in eSpace",
                      "title": "Related datasets/work",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all Related datasets/work",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all Related datasets/work?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Related datasets/work",
                      "reorderColumn": "Reorder Related datasets/work",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this Related datasets/work",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this Related datasets/work?",
                        "confirmationTitle": "Delete Related datasets/work",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move Related datasets/work down the order",
                      "moveUpHint": "Move Related datasets/work up the order",
                    },
                  },
                  "title": "Related datasets/work",
                }
              }
              name="fez_record_search_key_isdatasetof"
              searchKey={
                Object {
                  "order": "rek_isdatasetof_order",
                  "value": "rek_isdatasetof",
                }
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={2}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Additional information"
                  multiline={true}
                  name="fez_record_search_key_additional_notes.rek_additional_notes"
                  placeholder="Additional information related to the dataset"
                  textFieldId="rek-additional-notes"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Link to data in external repository"
                  name="rek_link"
                  placeholder="Provide the URL to the dataset where stored in another repository"
                  textFieldId="rek-link"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              disabled={false}
              locale={
                Object {
                  "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the record.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files,
                    <br />
                    or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Please ensure:
                    <ul>
                      <li>
                        files are under 5GB in size
                      </li>
                      <li>
                        file names begin with a letter and are less than 45 characters long
                      </li>
                      <li>
                        file names contain only upper and lowercase alphanumeric characters, and underscores
                      </li>
                      <li>
                        file names must not contain any spaces
                      </li>
                      <li>
                        file names have only a single period which precedes the file extension: e.g. “.pdf”, “.mov”, “.tiff”, “.wav” etc.
                        <br />
                        (two periods are allowed for multipart zip files. Allowed formats for part description are: e.g. “.001 ... .999”, “.r01 ... .r999” and “.part1 ... .part999”)
                      </li>
                      <li>
                        file names have one of the following extensions: 7z, avi, csv, gif, gsheet, gz, jpe, jpeg, jpg, m1v, m2v, m4a, mk3d, mks, mkv, mov, mp3, mp4, mp4v, mpe, mpeg, mpg, mxf, ods, pdf, png, qt, rar, tar, tif, tiff, wav, wma, wmv, xla, xlc, xlm, xls, xlsx, xlt, xlw, zip
                      </li>
                      <li>
                        files are uploaded individually and not inside a folder
                      </li>
                    </ul>
                  </div>,
                  "fileUploadRow": Object {
                    "defaultView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                    },
                    "deleteHint": "Remove this file",
                    "deleteRecordConfirmation": Object {
                      "cancelButtonLabel": "No",
                      "confirmButtonLabel": "Yes",
                      "confirmationMessage": "Are you sure you want to remove this file from the uploaded queue?",
                      "confirmationTitle": "Delete file",
                    },
                    "embargoDateClosedAccess": "No date required",
                    "embargoDateColumn": "Embargo date",
                    "fileAccessColumn": "File access",
                    "fileUploadRowAccessSelector": Object {
                      "options": Array [
                        Object {
                          "text": "Open Access",
                          "value": 5,
                        },
                        Object {
                          "text": "Mediated Access",
                          "value": 1,
                        },
                      ],
                    },
                    "filenameColumn": "File name",
                    "mobileView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                      "embargoDateColumn": "Embargo date",
                      "fileAccessColumn": "File access",
                      "filenameColumn": "File name",
                    },
                    "uploadInProgressText": "Uploading...",
                  },
                  "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
                  "ntroSpecificInstructions": <span>
                    You must upload at least one piece of evidence that demonstrates claims you have made about this work, e.g. Event program, music score, recording, scholarly review, front matter (book, catalogue) or full chapter.
                    <a
                      href="https://guides.library.uq.edu.au/for-researchers/uqespace-publications-datasets/ntro-submission-requirements#s-lg-box-20836613"
                      target="_blank"
                    >
                      More information
                    </a>
                    .
                  </span>,
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "sameFileNameWithDifferentExt": "File(s) ([fileNames]) have same name that match with other files with different extension",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              requireOpenAccessStatus={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        container={true}
        spacing={2}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={true}
          xs={false}
        />
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Cancel"
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Submit for approval"
            color="primary"
            fullWidth={true}
            id="submit-data-collection"
            onClick={[MockFunction]}
            variant="contained"
          >
            Submit for approval
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;

exports[`AddDataCollection test should render data set form 1`] = `
<StandardPage
  title="Add data collection"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "Add another missing dataset",
            "confirmButtonLabel": "Go to my research data",
            "confirmationMessage": <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              />
            </WithStyles(ForwardRef(Grid))>,
            "confirmationTitle": "Your dataset has been submitted",
            "datasetSuccessConfirmationMessage": <p>
              Your dataset has been saved.
              <br />
              <br />
              Your item will be published immediately and an UQ eSpace Research Outputs Officer will review the work.
            </p>,
            "fileFailConfirmationAlert": Object {
              "alertId": "alert-warning",
              "message": "lorem ipsum",
              "title": "File upload and/or notes post failed",
              "type": "warning",
            },
          }
        }
        onAction={[Function]}
        onCancelAction={[Function]}
        onRef={[Function]}
      />
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to cancel adding this data collection?",
            "confirmationTitle": "Cancel data collection",
          }
        }
        when={true}
      />
      <WithStyles(ForwardRef(Grid))
        className="DataCollection"
        container={true}
        spacing={3}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Deposit agreement"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  depositAgreement={
                    <div>
                      <p>
                        1. I am the creator or co-creator of this dataset, or otherwise authorised to deposit or describe it;
                      </p>
                      <p>
                        2. I have permission to include any third-party content contained in the dataset;
                      </p>
                      <p>
                        3. The dataset is original;
                      </p>
                      <p>
                        4. The dataset does not infringe the legal rights of any third-party;
                      </p>
                      <p>
                        5. I acknowledge that in depositing the dataset, I grant to UQeSpace a perpetual non-exclusive licence to reproduce it and make it available in any format or language;
                      </p>
                      <p>
                        6. The dataset's creator(s) moral rights to be associated with the dataset will be respected by UQeSpace.
                      </p>
                    </div>
                  }
                  depositAgreementFieldId="rek-copyright"
                  disabled={false}
                  name="rek_copyright"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset name"
                  multiline={true}
                  name="rek_title"
                  placeholder="Type the descriptive name for the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Dataset description"
                  multiline={true}
                  name="rek_description"
                  placeholder="Describe the dataset's topic(s) and theme(s)"
                  required={true}
                  rows={1}
                  textFieldId="rek-description"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact name"
                  name="contact.contactName"
                  placeholder="Type the name of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contributor"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  authorIdFieldId="rek-contributor-id"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Contact name ID"
                  fullWidth={true}
                  hintText="Type to search ID of primary contact for this dataset"
                  id="contact-name-id-auto-complete"
                  name="contact.contactNameId"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Contact email"
                  name="contact.contactEmail"
                  placeholder="Type the email address of primary contact for this dataset"
                  required={true}
                  textFieldId="rek-contact-details-email"
                  validate={
                    Array [
                      [Function],
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="DOI"
                  name="fez_record_search_key_doi.rek_doi"
                  placeholder=" "
                  textFieldId="rek-doi"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Publisher"
                  name="fez_record_search_key_publisher.rek_publisher"
                  placeholder="This is where the dataset was originally made available e.g. UQ eSpace"
                  textFieldId="rek-publisher"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication year"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="ANZSRC field of research (FoR) codes"
          >
            <WithStyles(ForwardRef(Typography))>
              Select Field of Research (FoR) codes
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="field-of-research"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          className="Creators"
          item={true}
          xs={12}
        >
          <StandardCard
            title="Creators"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-author"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add creator",
                      "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
                      "creatorRoleLabel": "Enter creator's role",
                      "descriptionStep1": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 1 of 2
                        </span>
                         
                        - Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "descriptionStep1NoStep2": <div>
                        Please 
                        <b>
                          add to a list of creators below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "creators-name-as-published-field",
                      "nameAsPublishedHint": "Type the name exactly as published",
                      "nameAsPublishedLabel": "Creator's name as published",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 2 of 2
                        </span>
                         
                        - Please 
                        <b>
                          select your name
                        </b>
                         from the list below (if applicable).
                      </div>,
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Creator's name as published",
                      "reorderColumn": "Reorder items",
                      "roleColumn": "Creator's role",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this creator ([name]) to assign it as you",
                      "selectedHint": "This is you",
                      "suffix": " listed creator",
                      "unselectedHint": "Select this to confirm this creator is you",
                    },
                  },
                }
              }
              name="authors"
              required={true}
              showIdentifierLookup={true}
              showRoleInput={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            help={
              Object {
                "text": <div>
                  <h3>
                    Access conditions
                  </h3>
                  <ul>
                    <li>
                      Open Access (upload your data, or link to the data)
                    </li>
                    <li>
                      Meditated Access
                    </li>
                  </ul>
                  <h3>
                    Licence
                  </h3>
                  <h4>
                    UQ General Usage Terms and Conditions for data publishing in eSpace
                  </h4>
                  <p>
                    University of Queensland provides standard licence agreements for researchers publishing their datasets in eSpace. The license agreements ensure that downloads and reuse of your data will be properly acknowledged.
                  </p>
                  <h4>
                    Current types of licences
                  </h4>
                  <h5>
                    Permitted Re-use with Acknowledgement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Commercial Use Restriction
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted Re-Use with Share Alike Requirement
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.
                  </p>
                  <h5>
                    Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient
                  </h5>
                  <p>
                    I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.
                  </p>
                  <p>
                    I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.
                  </p>
                  <p>
                    The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.
                  </p>
                  <p>
                    View more on
                     
                    <a
                      href="http://guides.library.uq.edu.au/deposit_your_data/terms_and_conditions"
                      target="_blank"
                    >
                      UQ Terms & Conditions
                    </a>
                  </p>
                </div>,
                "title": "Access and licence",
              }
            }
            title="Access and licence"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-access-conditions"
                  id="data-collection-access-selector"
                  itemsList={
                    Array [
                      Object {
                        "text": "Open Access",
                        "value": 453619,
                      },
                      Object {
                        "text": "Mediated Access",
                        "value": 453618,
                      },
                    ]
                  }
                  label="Access conditions"
                  name="fez_record_search_key_access_conditions.rek_access_conditions"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  ariaLabel="Please elect a license"
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  genericSelectFieldId="rek-license"
                  id="data-collection-licence-selector"
                  itemsList={
                    Array [
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "The agreed form of acknowledgement is as a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted Re-use with Acknowledgement",
                        "value": 453701,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A COMMERCIAL USE RESTRICTION on this dataset, or data included in it and to only and to only use this data in non-commercial endeavours.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Commercial Use Restriction",
                        "value": 454104,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE TO A SHARE ALIKE RESTRICTION on this dataset, or any data included in it, which means that I Agree that I remix, transform or build upon the data, I will contributions on the same Share Alike basis as the original.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this record for this dataset.",
                        ],
                        "text": "Permitted Re-Use with Share Alike Requirement",
                        "value": 454105,
                      },
                      Object {
                        "description": Array [
                          "I AGREE TO ACKNOWLEDGE any re-use of this dataset in any research outputs where reliance is made upon it, including conference papers and published research papers.",
                          "I FURTHER AGREE that my re-use of this dataset will fully comply with all terms and conditions of the Data Sharing Agreement established between myself and UQ for this purpose.",
                          "The agreed form of acknowledgement is a full citation as presented on the UQ eSpace record for this dataset.",
                        ],
                        "text": "Permitted reuse only with a Data Sharing Agreement in place between UQ and recipient",
                        "value": 456807,
                      },
                    ]
                  }
                  label="License"
                  name="fez_record_search_key_license.rek_license"
                  required={true}
                  selectPrompt="Select a license"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                md={4}
                sm={12}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Copyright notice"
                  name="fez_record_search_key_rights.rek_rights"
                  placeholder="e.g. 2012, The University of Queensland"
                  textFieldId="rek-rights"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Project information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project name"
                  multiline={true}
                  name="fez_record_search_key_project_name.rek_project_name"
                  placeholder="Type the name of the project that initiated the dataset"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-name"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Project description"
                  multiline={true}
                  name="fez_record_search_key_project_description.rek_project_description"
                  placeholder="Briefly describe the project, including purpose"
                  required={true}
                  rows={1}
                  textFieldId="rek-project-description"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-agency"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "funding-body-input",
                          "inputFieldHint": "Type the name of the funding body(s) associated with your research e.g. ARC, NHMRC",
                          "inputFieldLabel": "Funding body",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all funding bodies",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all funding bodies?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Funding body",
                          "reorderColumn": "Reorder funding bodies",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this funding body",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this funding body?",
                            "confirmationTitle": "Delete funding body",
                          },
                          "moveDownHint": "Move funding body down the order",
                          "moveUpHint": "Move funding body up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_agency"
                  searchKey={
                    Object {
                      "order": "rek_grant_agency_order",
                      "value": "rek_grant_agency",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-grant-id"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "id": "grant-id-input",
                          "inputFieldHint": "Type grantID",
                          "inputFieldLabel": "Grant IDs",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all grant IDs",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all grant IDs?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Grant ID",
                          "reorderColumn": "Reorder grant IDs",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this grant ID",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this grant ID?",
                            "confirmationTitle": "Delete grant ID",
                          },
                          "moveDownHint": "Move grant ID down the order",
                          "moveUpHint": "Move grant ID up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_grant_id"
                  searchKey={
                    Object {
                      "order": "rek_grant_id_order",
                      "value": "rek_grant_id",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Dataset details"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={3}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-type-of-data"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "type-of-data-input",
                          "inputFieldHint": "Enter type of data",
                          "inputFieldLabel": "Type of data",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all types of data",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all types of data?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Type of data",
                          "reorderColumn": "Reorder types of data",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this type of data",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this type of data?",
                            "confirmationTitle": "Delete type of data",
                          },
                          "editHint": "Edit this type of data",
                          "moveDownHint": "Move type of data down the order",
                          "moveUpHint": "Move type of data up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_type_of_data"
                  searchKey={
                    Object {
                      "order": "rek_type_of_data_order",
                      "value": "rek_type_of_data",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-software-required"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add software",
                          "editButtonLabel": "Update software",
                          "id": "software-required-input",
                          "inputFieldHint": "Type software required",
                          "inputFieldLabel": "Software required",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all software required",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all software required?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Software required",
                          "reorderColumn": "Reorder software required",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this software required",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this software required?",
                            "confirmationTitle": "Delete software required",
                          },
                          "editHint": "Edit this software required",
                          "moveDownHint": "Move software required down the order",
                          "moveUpHint": "Move software required up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_software_required"
                  searchKey={
                    Object {
                      "order": "rek_software_required_order",
                      "value": "rek_software_required",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  ListEditorForm={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  listEditorId="rek-keywords"
                  locale={
                    Object {
                      "form": Object {
                        "locale": Object {
                          "addButtonLabel": "Add",
                          "editButtonLabel": "Update",
                          "id": "keywords-input",
                          "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                          "inputFieldLabel": "Keywords",
                        },
                      },
                      "header": Object {
                        "locale": Object {
                          "deleteAll": "Remove all keywords",
                          "deleteAllConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete all keywords?",
                            "confirmationTitle": "Delete all",
                          },
                          "nameColumn": "Keyword",
                          "reorderColumn": "Reorder keywords",
                        },
                      },
                      "row": Object {
                        "locale": Object {
                          "deleteHint": "Remove this keyword",
                          "deleteRecordConfirmation": Object {
                            "cancelButtonLabel": "No",
                            "confirmButtonLabel": "Yes",
                            "confirmationMessage": "Are you sure you want to delete this keyword?",
                            "confirmationTitle": "Delete keyword",
                          },
                          "editHint": "Edit this item",
                          "moveDownHint": "Move keyword down the order",
                          "moveUpHint": "Move keyword up the order",
                        },
                      },
                    }
                  }
                  maxCount={10}
                  name="fez_record_search_key_keywords"
                  searchKey={
                    Object {
                      "order": "rek_keywords_order",
                      "value": "rek_keywords",
                    }
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                style={
                  Object {
                    "marginLeft": 8,
                    "marginRight": 8,
                  }
                }
                xs={12}
              >
                <Divider />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection start date"
                  hasError=""
                  id="rek_start_date"
                  name="fez_record_search_key_start_date.rek_start_date"
                  partialDateFieldId="rek-start-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                sm={6}
                style={
                  Object {
                    "padding": "0px 20px",
                  }
                }
                xs={12}
              >
                <Field
                  autoOk={true}
                  component={[Function]}
                  disableFuture={true}
                  disabled={false}
                  floatingTitle="Collection end date"
                  hasError=""
                  id="rek_end_date"
                  name="fez_record_search_key_end_date.rek_end_date"
                  partialDateFieldId="rek-end-date"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Geographic coordinates"
          >
            <WithStyles(ForwardRef(Typography))
              gutterBottom={true}
              variant="caption"
            >
              Use this tool to specify the geographic co-ordinates the data relates to
            </WithStyles(ForwardRef(Typography))>
            <Field
              component={[Function]}
              disabled={false}
              name="geographicArea"
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Related datasets/work"
          >
            <Field
              component={[Function]}
              disabled={false}
              height={50}
              listEditorId="related-datasets"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Begin searching by title or PID for related works in eSpace and add it to the list",
                      "inputFieldLabel": "Related datasets/works in eSpace",
                      "title": "Related datasets/work",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all Related datasets/work",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all Related datasets/work?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Related datasets/work",
                      "reorderColumn": "Reorder Related datasets/work",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this Related datasets/work",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this Related datasets/work?",
                        "confirmationTitle": "Delete Related datasets/work",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move Related datasets/work down the order",
                      "moveUpHint": "Move Related datasets/work up the order",
                    },
                  },
                  "title": "Related datasets/work",
                }
              }
              name="fez_record_search_key_isdatasetof"
              searchKey={
                Object {
                  "order": "rek_isdatasetof_order",
                  "value": "rek_isdatasetof",
                }
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional information"
          >
            <WithStyles(ForwardRef(Grid))
              container={true}
              spacing={2}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Additional information"
                  multiline={true}
                  name="fez_record_search_key_additional_notes.rek_additional_notes"
                  placeholder="Additional information related to the dataset"
                  textFieldId="rek-additional-notes"
                  type="text"
                />
              </WithStyles(ForwardRef(Grid))>
              <WithStyles(ForwardRef(Grid))
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "classes": [Function],
                        "help": [Function],
                        "innerRef": [Function],
                        "textFieldId": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Link to data in external repository"
                  name="rek_link"
                  placeholder="Provide the URL to the dataset where stored in another repository"
                  textFieldId="rek-link"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </WithStyles(ForwardRef(Grid))>
            </WithStyles(ForwardRef(Grid))>
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              disabled={false}
              locale={
                Object {
                  "accessTermsAndConditions": "I understand that the files indicated above as open access will be submitted as open access and will be made publicly available immediately or will be made available on the indicated embargo date.  All other files submitted will be accessible by UQ eSpace administrators.",
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the record.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files,
                    <br />
                    or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Please ensure:
                    <ul>
                      <li>
                        files are under 5GB in size
                      </li>
                      <li>
                        file names begin with a letter and are less than 45 characters long
                      </li>
                      <li>
                        file names contain only upper and lowercase alphanumeric characters, and underscores
                      </li>
                      <li>
                        file names must not contain any spaces
                      </li>
                      <li>
                        file names have only a single period which precedes the file extension: e.g. “.pdf”, “.mov”, “.tiff”, “.wav” etc.
                        <br />
                        (two periods are allowed for multipart zip files. Allowed formats for part description are: e.g. “.001 ... .999”, “.r01 ... .r999” and “.part1 ... .part999”)
                      </li>
                      <li>
                        file names have one of the following extensions: 7z, avi, csv, gif, gsheet, gz, jpe, jpeg, jpg, m1v, m2v, m4a, mk3d, mks, mkv, mov, mp3, mp4, mp4v, mpe, mpeg, mpg, mxf, ods, pdf, png, qt, rar, tar, tif, tiff, wav, wma, wmv, xla, xlc, xlm, xls, xlsx, xlt, xlw, zip
                      </li>
                      <li>
                        files are uploaded individually and not inside a folder
                      </li>
                    </ul>
                  </div>,
                  "fileUploadRow": Object {
                    "defaultView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                    },
                    "deleteHint": "Remove this file",
                    "deleteRecordConfirmation": Object {
                      "cancelButtonLabel": "No",
                      "confirmButtonLabel": "Yes",
                      "confirmationMessage": "Are you sure you want to remove this file from the uploaded queue?",
                      "confirmationTitle": "Delete file",
                    },
                    "embargoDateClosedAccess": "No date required",
                    "embargoDateColumn": "Embargo date",
                    "fileAccessColumn": "File access",
                    "fileUploadRowAccessSelector": Object {
                      "options": Array [
                        Object {
                          "text": "Open Access",
                          "value": 5,
                        },
                        Object {
                          "text": "Mediated Access",
                          "value": 1,
                        },
                      ],
                    },
                    "filenameColumn": "File name",
                    "mobileView": Object {
                      "accessCondition": Object {
                        "errorMessage": "This field is required",
                        "label": "Access conditions",
                        "selectPrompt": "Select access conditions",
                      },
                      "embargoDateClosedAccess": "No date required",
                      "embargoDateColumn": "Embargo date",
                      "fileAccessColumn": "File access",
                      "filenameColumn": "File name",
                    },
                    "uploadInProgressText": "Uploading...",
                  },
                  "instructions": "You may add up to [fileUploadLimit] files (max [maxFileSize][fileSizeUnit] each)",
                  "ntroSpecificInstructions": <span>
                    You must upload at least one piece of evidence that demonstrates claims you have made about this work, e.g. Event program, music score, recording, scholarly review, front matter (book, catalogue) or full chapter.
                    <a
                      href="https://guides.library.uq.edu.au/for-researchers/uqespace-publications-datasets/ntro-submission-requirements#s-lg-box-20836613"
                      target="_blank"
                    >
                      More information
                    </a>
                    .
                  </span>,
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "sameFileNameWithDifferentExt": "File(s) ([fileNames]) have same name that match with other files with different extension",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              requireOpenAccessStatus={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        container={true}
        spacing={2}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={true}
          xs={false}
        />
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Cancel"
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm="auto"
          xs={12}
        >
          <WithStyles(ForwardRef(Button))
            aria-label="Submit for approval"
            color="primary"
            fullWidth={true}
            id="submit-data-collection"
            onClick={[MockFunction]}
            variant="contained"
          >
            Submit for approval
          </WithStyles(ForwardRef(Button))>
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;
