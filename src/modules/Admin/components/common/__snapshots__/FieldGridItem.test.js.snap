// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FieldGridItem should render default view 1`] = `
<ForwardRef(Grid)
  item={true}
  md={12}
  xs={12}
>
  <Field
    component={[Function]}
    format={[Function]}
    height={100}
    name="bibliographicSection.rek_title"
    required={true}
    richEditorId="rek-title"
    title="Formatted title"
    titleProps={
      Object {
        "style": Object {
          "opacity": 0.666,
        },
        "variant": "caption",
      }
    }
    validate={
      Array [
        [Function],
      ]
    }
  />
</ForwardRef(Grid)>
`;

exports[`FieldGridItem should render default view for a composed field 1`] = `
<ForwardRef(Grid)
  item={true}
  md={12}
  xs={12}
>
  <SensitiveHandlingNoteField
    name="filesSection.sensitiveHandlingNote"
  />
</ForwardRef(Grid)>
`;

exports[`FieldGridItem should render with correct props 1`] = `
<ForwardRef(Grid)
  item={true}
  md={12}
  xs={12}
>
  <Field
    component={[Function]}
    contributorEditorId="rek-contributor"
    isAdmin={true}
    locale={
      Object {
        "form": Object {
          "locale": Object {
            "addButton": "Add editor",
            "affiliations": Object {
              "affiliationPctTitle": "Affiliation %",
              "alert": Object {
                "authorOrphan": Object {
                  "message": "Author requires at least one affiliation to be added",
                },
                "percentile": Object {
                  "actionButtonLabel": "Recalculate Percentages",
                  "message": "Percentage sum total of all affiliations must equal 100%",
                },
                "title": "Author affiliation information is incomplete",
              },
              "cancelButton": "Cancel",
              "editButton": Object {
                "tooltip": "Edit affiliations for this author",
              },
              "getChipLabel": [Function],
              "getSuggestedTitle": [Function],
              "loadingOrganisationalUnits": "Loading Organisational Units",
              "noAffiliationsAdded": "No affiliations have been added",
              "organisationMissing": "Organisation missing",
              "organisationPlaceholder": "Start typing or select from list",
              "organisationalUnitMissing": "Organisational Unit data missing",
              "organisationalUnits": "Organisational Unit",
              "saveButton": "Save",
              "title": "Affiliations",
            },
            "creatorRoleHint": "Select role from list or type the role of the creator in relation to the dataset",
            "creatorRoleLabel": "Enter creator's role",
            "identifierLabel": "UQ identifier (if available)",
            "nameAsPublishedHint": "Type the name exactly as published (eg. Smith, John)",
            "nameAsPublishedLabel": "Editor's name as published",
          },
        },
        "header": Object {
          "locale": Object {
            "contributorAssignmentColumn": "Select your name",
            "identifierColumn": "UQ identifiers",
            "nameColumn": "Editor's name as published",
            "organisationColumn": "Organisation/Organisation type",
            "roleColumn": "Creator role",
          },
        },
        "row": Object {
          "locale": Object {
            "deleteHint": "Remove this item",
            "editHint": "Edit this item",
            "moveDownHint": "Move item down the order",
            "moveUpHint": "Move item up the order",
            "suffix": " listed editor",
          },
        },
      }
    }
    name="authorsSection.editors"
    showIdentifierLookup={true}
  />
</ForwardRef(Grid)>
`;

exports[`FieldGridItem without record should render default view 1`] = `
<ForwardRef(Grid)
  item={true}
  md={12}
  xs={12}
>
  <Field
    component={[Function]}
    format={[Function]}
    height={100}
    name="bibliographicSection.rek_title"
    required={true}
    richEditorId="rek-title"
    title="Formatted title"
    titleProps={
      Object {
        "style": Object {
          "opacity": 0.666,
        },
        "variant": "caption",
      }
    }
    validate={
      Array [
        [Function],
      ]
    }
  />
</ForwardRef(Grid)>
`;
