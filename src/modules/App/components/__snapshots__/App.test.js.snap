// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Application component Should display mobile correctly 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/dashboard",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log in to eSpace"
            isAuthorizedUser={false}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText=""
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={true}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <WithStyles(ForwardRef(Grid))
      alignContent="center"
      alignItems="center"
      container={true}
      justifyContent="center"
      style={
        Object {
          "marginBottom": 12,
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        item={true}
        style={
          Object {
            "marginBottom": 0,
            "marginTop": 0,
          }
        }
      >
        <Alert
          action={[Function]}
          actionButtonLabel="Click to login"
          alertId="login"
          allowDismiss={false}
          customIcon={null}
          customType={null}
          disableAlertClick={false}
          dismissTitle="Click to dismiss this alert"
          message="Login to UQ eSpace for full search results and more services."
          showLoader={false}
          title="You are not logged in"
          type="info_outline"
          wiggle={null}
        />
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {},
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            key="route_0"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_1"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_2"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_3"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_4"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_5"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_6"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_7"
            pageTitle="eSpace"
            path="/dashboard"
          />
          <Route
            component={[Function]}
            key="route_8"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component redirects user to login if going to a secure file url and not user logged in yet 1`] = `<div />`;

exports[`Application component redirects user to login if not Authorized 1`] = `<div />`;

exports[`Application component should determine if it has incomplete works from props and hide menu item 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - test1"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={true}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onRef={[Function]}
    />
    <WithStyles(ForwardRef(Grid))
      alignContent="center"
      alignItems="center"
      container={true}
      justifyContent="center"
      style={
        Object {
          "marginBottom": 12,
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        item={true}
        style={
          Object {
            "marginBottom": 0,
            "marginTop": 0,
          }
        }
      >
        <Alert
          alertId="not-registered-author"
          allowDismiss={false}
          customIcon={null}
          customType={null}
          disableAlertClick={false}
          dismissTitle="Click to dismiss this alert"
          message="Please contact the UQ eSpace administrator to resolve this."
          showLoader={false}
          title="You are not registered in UQ eSpace as an author"
          type="info_outline"
          wiggle={null}
        />
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "name": "test1",
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            key="route_0"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_1"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_2"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_3"
            path="/dashboard"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_4"
            pageTitle="My works"
            path="/records/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_5"
            pageTitle="My research data"
            path="/data-collections/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_6"
            pageTitle="Add data collection"
            path="/data-collections/add"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_7"
            pageTitle="Claim possible works"
            path="/records/possible"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_8"
            path="/records/incomplete"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_9"
            pageTitle="Complete my work"
            path="/records/:pid(UQ:[a-z0-9]+)/incomplete"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_10"
            pageTitle="Claim a work"
            path="/records/claim"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_11"
            pageTitle="Request a correction, add more information or upload files"
            path="/records/:pid(UQ:[a-z0-9]+)/fix"
            regExPath="/records/(UQ:[a-z0-9]+)/fix"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_12"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/find"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_13"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/results"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_14"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/new"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_15"
            pageTitle="Google Scholar identifier"
            path="/author-identifiers/google-scholar/link"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_16"
            pageTitle="My editorial appointments"
            path="/editorial-appointments"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_17"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_18"
            pageTitle="Journal search"
            path="/journals/search/"
          />
          <Route
            key="route_19"
            pageTitle="Strategic publishing results"
            path="/journals/results/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_20"
            pageTitle="Strategic publishing compare"
            path="/journals/compare/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_21"
            pageTitle="Strategic publishing favourites"
            path="/journals/favourites/"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_22"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_23"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_24"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_25"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_26"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_27"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_28"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            key="route_29"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should determine if it has incomplete works from props and show menu item 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - test1"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={true}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onRef={[Function]}
    />
    <WithStyles(ForwardRef(Grid))
      alignContent="center"
      alignItems="center"
      container={true}
      justifyContent="center"
      style={
        Object {
          "marginBottom": 12,
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        item={true}
        style={
          Object {
            "marginBottom": 0,
            "marginTop": 0,
          }
        }
      >
        <Alert
          alertId="not-registered-author"
          allowDismiss={false}
          customIcon={null}
          customType={null}
          disableAlertClick={false}
          dismissTitle="Click to dismiss this alert"
          message="Please contact the UQ eSpace administrator to resolve this."
          showLoader={false}
          title="You are not registered in UQ eSpace as an author"
          type="info_outline"
          wiggle={null}
        />
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "name": "test1",
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            key="route_0"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_1"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_2"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_3"
            path="/dashboard"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_4"
            pageTitle="My works"
            path="/records/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_5"
            pageTitle="My research data"
            path="/data-collections/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_6"
            pageTitle="Add data collection"
            path="/data-collections/add"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_7"
            pageTitle="Claim possible works"
            path="/records/possible"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_8"
            path="/records/incomplete"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_9"
            pageTitle="Complete my work"
            path="/records/:pid(UQ:[a-z0-9]+)/incomplete"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_10"
            pageTitle="Claim a work"
            path="/records/claim"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_11"
            pageTitle="Request a correction, add more information or upload files"
            path="/records/:pid(UQ:[a-z0-9]+)/fix"
            regExPath="/records/(UQ:[a-z0-9]+)/fix"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_12"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/find"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_13"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/results"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_14"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/new"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_15"
            pageTitle="Google Scholar identifier"
            path="/author-identifiers/google-scholar/link"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_16"
            pageTitle="My editorial appointments"
            path="/editorial-appointments"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_17"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_18"
            pageTitle="Journal search"
            path="/journals/search/"
          />
          <Route
            key="route_19"
            pageTitle="Strategic publishing results"
            path="/journals/results/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_20"
            pageTitle="Strategic publishing compare"
            path="/journals/compare/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_21"
            pageTitle="Strategic publishing favourites"
            path="/journals/favourites/"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_22"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_23"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_24"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_25"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_26"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_27"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_28"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            key="route_29"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should redirect to login page with correct return url if rhd submission route accessed 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/dashboard",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log in to eSpace"
            isAuthorizedUser={false}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText=""
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <WithStyles(ForwardRef(Grid))
      alignContent="center"
      alignItems="center"
      container={true}
      justifyContent="center"
      style={
        Object {
          "marginBottom": 12,
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        item={true}
        style={
          Object {
            "marginBottom": 0,
            "marginTop": 0,
          }
        }
      >
        <Alert
          action={[Function]}
          actionButtonLabel="Click to login"
          alertId="login"
          allowDismiss={false}
          customIcon={null}
          customType={null}
          disableAlertClick={false}
          dismissTitle="Click to dismiss this alert"
          message="Login to UQ eSpace for full search results and more services."
          showLoader={false}
          title="You are not logged in"
          type="info_outline"
          wiggle={null}
        />
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {},
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            key="route_0"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_1"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_2"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_3"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_4"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_5"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_6"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_7"
            pageTitle="eSpace"
            path="/dashboard"
          />
          <Route
            component={[Function]}
            key="route_8"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render alert if user is not fez author 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - undefined"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <WithStyles(ForwardRef(Grid))
      alignContent="center"
      alignItems="center"
      container={true}
      justifyContent="center"
      style={
        Object {
          "marginBottom": 12,
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        item={true}
        style={
          Object {
            "marginBottom": 0,
            "marginTop": 0,
          }
        }
      >
        <Alert
          alertId="not-registered-author"
          allowDismiss={false}
          customIcon={null}
          customType={null}
          disableAlertClick={false}
          dismissTitle="Click to dismiss this alert"
          message="Please contact the UQ eSpace administrator to resolve this."
          showLoader={false}
          title="You are not registered in UQ eSpace as an author"
          type="info_outline"
          wiggle={null}
        />
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "class": Array [
              "libstaff",
              "IS_CURRENT",
            ],
            "id": "uqauthor1",
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            key="route_0"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_1"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_2"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_3"
            path="/dashboard"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_4"
            pageTitle="My works"
            path="/records/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_5"
            pageTitle="My research data"
            path="/data-collections/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_6"
            pageTitle="Add data collection"
            path="/data-collections/add"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_7"
            pageTitle="Claim possible works"
            path="/records/possible"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_8"
            path="/records/incomplete"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_9"
            pageTitle="Complete my work"
            path="/records/:pid(UQ:[a-z0-9]+)/incomplete"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_10"
            pageTitle="Claim a work"
            path="/records/claim"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_11"
            pageTitle="Request a correction, add more information or upload files"
            path="/records/:pid(UQ:[a-z0-9]+)/fix"
            regExPath="/records/(UQ:[a-z0-9]+)/fix"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_12"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/find"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_13"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/results"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_14"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/new"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_15"
            pageTitle="Google Scholar identifier"
            path="/author-identifiers/google-scholar/link"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_16"
            pageTitle="My editorial appointments"
            path="/editorial-appointments"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_17"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_18"
            pageTitle="Journal search"
            path="/journals/search/"
          />
          <Route
            key="route_19"
            pageTitle="Strategic publishing results"
            path="/journals/results/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_20"
            pageTitle="Strategic publishing compare"
            path="/journals/compare/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_21"
            pageTitle="Strategic publishing favourites"
            path="/journals/favourites/"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_22"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_23"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_24"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_25"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_26"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_27"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_28"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            key="route_29"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render app for HDR with ORCID ID 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - J RHD Student"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/dashboard",
          "primaryText": "My dashboard",
          "secondaryText": "rhd@student.uq.edu.au",
        },
        Object {
          "linkTo": "/records/mine",
          "primaryText": "My works",
        },
        Object {
          "linkTo": "/records/possible",
          "primaryText": "Claim possible work",
        },
        Object {
          "linkTo": "/records/add/find",
          "primaryText": "Add a missing work",
        },
        Object {
          "linkTo": "/data-collections/mine",
          "primaryText": "My research data",
        },
        Object {
          "linkTo": "/data-collections/add",
          "primaryText": "Add a missing dataset",
        },
        Object {
          "linkTo": "/editorial-appointments",
          "primaryText": "My editorial appointments",
        },
        Object {
          "linkTo": "https://app.library.uq.edu.au/#/authors/s2222222",
          "primaryText": "Author statistics",
        },
        Object {
          "divider": true,
          "path": "/234234234242",
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "aut_id": 1,
            "aut_orcid_id": "1234-1234-1234",
            "aut_org_username": null,
            "aut_student_username": "s2222222",
            "barcode": "111111111111111",
            "blocked": false,
            "canMasquerade": false,
            "class": Array [
              "IS_UQ_STUDENT_PLACEMENT",
              "IS_CURRENT",
            ],
            "classes": Array [],
            "expiryDate": "14-12-19",
            "firstName": "J",
            "groups": null,
            "hasSession": true,
            "homeLib": "St Lucia",
            "id": "s2222222",
            "lastName": "RHD Student",
            "mail": "rhd@student.uq.edu.au",
            "name": "J RHD Student",
            "tokenBased": false,
            "type": 22,
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            key="route_0"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_1"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_2"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_3"
            path="/dashboard"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_4"
            pageTitle="My works"
            path="/records/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_5"
            pageTitle="My research data"
            path="/data-collections/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_6"
            pageTitle="Add data collection"
            path="/data-collections/add"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_7"
            pageTitle="Claim possible works"
            path="/records/possible"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_8"
            path="/records/incomplete"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_9"
            pageTitle="Complete my work"
            path="/records/:pid(UQ:[a-z0-9]+)/incomplete"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_10"
            pageTitle="Claim a work"
            path="/records/claim"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_11"
            pageTitle="Request a correction, add more information or upload files"
            path="/records/:pid(UQ:[a-z0-9]+)/fix"
            regExPath="/records/(UQ:[a-z0-9]+)/fix"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_12"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/find"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_13"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/results"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_14"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/new"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_15"
            pageTitle="Google Scholar identifier"
            path="/author-identifiers/google-scholar/link"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_16"
            pageTitle="My editorial appointments"
            path="/editorial-appointments"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_17"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_18"
            pageTitle="Journal search"
            path="/journals/search/"
          />
          <Route
            key="route_19"
            pageTitle="Strategic publishing results"
            path="/journals/results/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_20"
            pageTitle="Strategic publishing compare"
            path="/journals/compare/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_21"
            pageTitle="Strategic publishing favourites"
            path="/journals/favourites/"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_22"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_23"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_24"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_25"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_26"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_27"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_28"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            key="route_29"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render app for account with fez author with ORCID ID 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - undefined"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/dashboard",
          "primaryText": "My dashboard",
          "secondaryText": undefined,
        },
        Object {
          "linkTo": "/records/mine",
          "primaryText": "My works",
        },
        Object {
          "linkTo": "/records/possible",
          "primaryText": "Claim possible work",
        },
        Object {
          "linkTo": "/records/add/find",
          "primaryText": "Add a missing work",
        },
        Object {
          "linkTo": "/data-collections/mine",
          "primaryText": "My research data",
        },
        Object {
          "linkTo": "/data-collections/add",
          "primaryText": "Add a missing dataset",
        },
        Object {
          "linkTo": "/editorial-appointments",
          "primaryText": "My editorial appointments",
        },
        Object {
          "linkTo": "https://app.library.uq.edu.au/#/authors/uqauthor1",
          "primaryText": "Author statistics",
        },
        Object {
          "divider": true,
          "path": "/234234234242",
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "aut_id": 1,
            "aut_orcid_id": "abc-abc-abc",
            "aut_org_username": "uqauthor1",
            "class": Array [
              "libstaff",
              "IS_CURRENT",
            ],
            "id": "uqauthor1",
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            key="route_0"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_1"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_2"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_3"
            path="/dashboard"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_4"
            pageTitle="My works"
            path="/records/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_5"
            pageTitle="My research data"
            path="/data-collections/mine"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_6"
            pageTitle="Add data collection"
            path="/data-collections/add"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_7"
            pageTitle="Claim possible works"
            path="/records/possible"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={[Function]}
            exact={true}
            key="route_8"
            path="/records/incomplete"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_9"
            pageTitle="Complete my work"
            path="/records/:pid(UQ:[a-z0-9]+)/incomplete"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_10"
            pageTitle="Claim a work"
            path="/records/claim"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_11"
            pageTitle="Request a correction, add more information or upload files"
            path="/records/:pid(UQ:[a-z0-9]+)/fix"
            regExPath="/records/(UQ:[a-z0-9]+)/fix"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_12"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/find"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_13"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/results"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            exact={true}
            key="route_14"
            pageTitle="Add a missing work to eSpace"
            path="/records/add/new"
            render={[Function]}
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_15"
            pageTitle="Google Scholar identifier"
            path="/author-identifiers/google-scholar/link"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_16"
            pageTitle="My editorial appointments"
            path="/editorial-appointments"
          />
          <Route
            access={
              Array [
                "researcher",
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_17"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_18"
            pageTitle="Journal search"
            path="/journals/search/"
          />
          <Route
            key="route_19"
            pageTitle="Strategic publishing results"
            path="/journals/results/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_20"
            pageTitle="Strategic publishing compare"
            path="/journals/compare/"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "type": [Function],
              }
            }
            key="route_21"
            pageTitle="Strategic publishing favourites"
            path="/journals/favourites/"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_22"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_23"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_24"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_25"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_26"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_27"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_28"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            key="route_29"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render application with routing for the user and display loading screen while loading author 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/dashboard",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My works",
          "path": "/records/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": "My research data",
          "path": "/data-collections/mine",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Add data collection",
          "path": "/data-collections/add",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim possible works",
          "path": "/records/possible",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": [Function],
          "exact": true,
          "pageTitle": undefined,
          "path": "/records/incomplete",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Complete my work",
          "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Claim a work",
          "path": "/records/claim",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Request a correction, add more information or upload files",
          "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
          "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/find",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/results",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "exact": true,
          "pageTitle": "Add a missing work to eSpace",
          "path": "/records/add/new",
          "render": [Function],
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Google Scholar identifier",
          "path": "/author-identifiers/google-scholar/link",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "My editorial appointments",
          "path": "/editorial-appointments",
        },
        Object {
          "access": Array [
            "researcher",
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": "Journal search",
          "path": "/journals/search/",
        },
        Object {
          "component": undefined,
          "pageTitle": "Strategic publishing results",
          "path": "/journals/results/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing compare",
          "path": "/journals/compare/",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "compare": null,
            "type": [Function],
          },
          "pageTitle": "Strategic publishing favourites",
          "path": "/journals/favourites/",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - undefined"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/journals/search/",
          "primaryText": "Journal search",
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <AppAlert />
    <WithStyles(InlineLoader)
      message="Loading account"
    />
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render for anon user 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/dashboard",
        },
        Object {
          "component": [Function],
          "pageTitle": "Page not found",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Tooltip))
            TransitionComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "propTypes": Object {
                  "children": [Function],
                  "disableStrictModeCompat": [Function],
                  "in": [Function],
                  "onEnter": [Function],
                  "onEntered": [Function],
                  "onEntering": [Function],
                  "onExit": [Function],
                  "onExited": [Function],
                  "onExiting": [Function],
                  "style": [Function],
                  "timeout": [Function],
                },
                "render": [Function],
              }
            }
            placement="bottom-end"
            title="Main navigation"
          >
            <WithStyles(ForwardRef(IconButton))
              aria-label="Click to open the main navigation"
              id="main-menu-button"
              onClick={[Function]}
              style={
                Object {
                  "marginLeft": "-12px",
                  "marginRight": "12px",
                }
              }
            >
              <Memo(ForwardRef(MenuIcon))
                style={
                  Object {
                    "color": "white",
                  }
                }
              />
            </WithStyles(ForwardRef(IconButton))>
          </WithStyles(ForwardRef(Tooltip))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          sm={4}
          xs={2}
        >
          <withRouter(Connect(SearchComponent))
            autoFocus={false}
            isInHeader={true}
            showMobileSearchButton={true}
            showPrefixIcon={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log in to eSpace"
            isAuthorizedUser={false}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText=""
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <WithStyles(MenuDrawer)
    docked={false}
    drawerOpen={false}
    hasIncompleteWorks={false}
    history={
      Object {
        "location": Object {},
      }
    }
    isMobile={false}
    locale={
      Object {
        "closeMenuLabel": "Close menu",
        "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
        "skipNavTitle": "Skip Navigation",
      }
    }
    logoImage="largeLogo"
    logoLink="http://www.uq.edu.au"
    logoText="The University of Queensland"
    menuItems={
      Array [
        Object {
          "linkTo": "/",
          "primaryText": "Home",
          "public": true,
        },
        Object {
          "linkTo": "/records/search",
          "primaryText": "Search eSpace",
          "public": true,
          "secondaryText": "",
        },
        Object {
          "linkTo": "/communities",
          "primaryText": "Browse",
          "public": true,
        },
        Object {
          "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
          "primaryText": "Help",
          "public": true,
        },
        Object {
          "linkTo": "/contact",
          "primaryText": "Contact",
          "public": true,
          "secondaryText": "",
        },
      ]
    }
    onToggleDrawer={[Function]}
  />
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {},
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            key="route_0"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_1"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_2"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_3"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_4"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_5"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_6"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_7"
            pageTitle="eSpace"
            path="/dashboard"
          />
          <Route
            component={[Function]}
            key="route_8"
            pageTitle="Page not found"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render loading screen while account is loading 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <WithStyles(ForwardRef(Grid))
    item={true}
    xs={12}
    zeroMinWidth={true}
  >
    <WithStyles(AppLoader)
      logoImage="largeLogo"
      logoText="The University of Queensland"
      title="UQ eSpace "
    />
  </WithStyles(ForwardRef(Grid))>
</WithStyles(ForwardRef(Grid))>
`;

exports[`Application component should render thesis submission for HDR without menu 1`] = `
<WithStyles(ForwardRef(Grid))
  container={true}
>
  <withRouter(Connect(Meta))
    routesConfig={
      Array [
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace",
          "path": "/",
        },
        Object {
          "pageTitle": "Contact UQ eSpace",
          "path": "/contact",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.memo),
            "WrappedComponent": Object {
              "$$typeof": Symbol(react.memo),
              "compare": [Function],
              "type": [Function],
            },
            "compare": null,
            "type": [Function],
          },
          "exact": true,
          "pageTitle": undefined,
          "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
          "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
        },
        Object {
          "component": [Function],
          "exact": true,
          "pageTitle": "eSpace search",
          "path": "/records/search",
        },
        Object {
          "access": Array [
            "admin",
          ],
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Journal details",
          "path": "/journal/view/:id([0-9]+)",
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "exact": true,
          "pageTitle": "List of Communities",
          "path": "/communities",
        },
        Object {
          "component": undefined,
          "exact": true,
          "pageTitle": "List of Collections",
          "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
        },
        Object {
          "pageTitle": "Higher degree by research thesis deposit",
          "path": "/rhdsubmission",
          "render": [Function],
        },
        Object {
          "pageTitle": "Professional doctorate deposit",
          "path": "/habslodge",
          "render": [Function],
        },
        Object {
          "component": Object {
            "$$typeof": Symbol(react.lazy),
            "_init": [Function],
            "_payload": Object {
              "_result": [Function],
              "_status": -1,
            },
          },
          "pageTitle": "Link ORCID ID to UQ eSpace",
        },
      ]
    }
  />
  <WithStyles(ForwardRef(AppBar))
    className="AppBar"
    color="primary"
    position="fixed"
  >
    <WithStyles(ForwardRef(Toolbar))
      style={
        Object {
          "height": "70px",
        }
      }
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="row"
        justifyContent="flex-start"
        spacing={1}
        wrap="nowrap"
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "paddingLeft": 0,
            }
          }
          xs={true}
        >
          <WithStyles(ForwardRef(Grid))
            alignItems="center"
            container={true}
            justifyContent="flex-start"
            spacing={2}
            wrap="nowrap"
          >
            <Hidden
              xsDown={true}
            >
              <WithStyles(ForwardRef(Grid))
                item={true}
              >
                <div
                  className="smallLogo"
                  id="logo"
                  style={
                    Object {
                      "height": 66,
                      "width": 60,
                    }
                  }
                >
                  The University of Queensland
                </div>
              </WithStyles(ForwardRef(Grid))>
            </Hidden>
            <WithStyles(ForwardRef(Grid))
              item={true}
              style={
                Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                }
              }
              xs="auto"
            >
              <WithStyles(ForwardRef(Typography))
                component="h1"
                noWrap={true}
                variant="h5"
              >
                <a
                  className="appTitle"
                  href="/"
                  style={
                    Object {
                      "color": "#FFFFFF",
                    }
                  }
                  title="Click to return to the eSpace home page"
                >
                  UQ eSpace 
                </a>
              </WithStyles(ForwardRef(Typography))>
            </WithStyles(ForwardRef(Grid))>
          </WithStyles(ForwardRef(Grid))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <AuthButton
            ariaLabel="Click to log out of eSpace"
            isAuthorizedUser={true}
            onClick={[Function]}
            signInTooltipText="Log in"
            signOutTooltipText="Log out - J RHD Student"
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Toolbar))>
  </WithStyles(ForwardRef(AppBar))>
  <div
    className="content-container"
    id="content-container"
    style={Object {}}
  >
    <Hidden
      smDown={true}
    >
      <WithStyles(ScrollTop)
        containerId="content-container"
        show={true}
      />
    </Hidden>
    <div
      aria-label="eSpace alerts"
      role="region"
      style={
        Object {
          "paddingBottom": 24,
        }
      }
    >
      <alert-list
        system="espace"
      />
    </div>
    <WithStyles(ConfirmDialogBox)
      hideCancelButton={true}
      locale={
        Object {
          "cancelButtonLabel": "Cancel",
          "confirmButtonLabel": "Redirect to login",
          "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
          "confirmationTitle": "Session Expired",
        }
      }
      onAction={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      onRef={[Function]}
    />
    <AppAlert />
    <ContextProvider
      value={
        Object {
          "account": Object {
            "aut_id": 1,
            "aut_orcid_id": null,
            "aut_org_username": null,
            "aut_student_username": "s2222222",
            "barcode": "111111111111111",
            "blocked": false,
            "canMasquerade": false,
            "class": Array [
              "IS_UQ_STUDENT_PLACEMENT",
              "IS_CURRENT",
            ],
            "classes": Array [],
            "expiryDate": "14-12-19",
            "firstName": "J",
            "groups": null,
            "hasSession": true,
            "homeLib": "St Lucia",
            "id": "s2222222",
            "lastName": "RHD Student",
            "mail": "rhd@student.uq.edu.au",
            "name": "J RHD Student",
            "tokenBased": false,
            "type": 22,
          },
        }
      }
    >
      <Suspense
        fallback={
          <ContentLoader
            message="Loading content"
          />
        }
      >
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            key="route_0"
            pageTitle="eSpace"
            path="/"
          />
          <Route
            key="route_1"
            pageTitle="Contact UQ eSpace"
            path="/contact"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.memo),
                "WrappedComponent": Object {
                  "$$typeof": Symbol(react.memo),
                  "compare": [Function],
                  "type": [Function],
                },
                "compare": null,
                "type": [Function],
              }
            }
            exact={true}
            key="route_2"
            path="/view/:pid(UQ:[a-z0-9]+|not-found)"
            regExPath="/view/(UQ:[a-z0-9]+|not-found)"
          />
          <Route
            component={[Function]}
            exact={true}
            key="route_3"
            pageTitle="eSpace search"
            path="/records/search"
          />
          <Route
            access={
              Array [
                "admin",
              ]
            }
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_4"
            pageTitle="Journal details"
            path="/journal/view/:id([0-9]+)"
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            exact={true}
            key="route_5"
            pageTitle="List of Communities"
            path="/communities"
          />
          <Route
            exact={true}
            key="route_6"
            pageTitle="List of Collections"
            path="/communities/:pid(UQ:[a-z0-9]+)/collections"
          />
          <Route
            key="route_7"
            pageTitle="Higher degree by research thesis deposit"
            path="/rhdsubmission"
            render={[Function]}
          />
          <Route
            key="route_8"
            pageTitle="Professional doctorate deposit"
            path="/habslodge"
            render={[Function]}
          />
          <Route
            component={
              Object {
                "$$typeof": Symbol(react.lazy),
                "_init": [Function],
                "_payload": Object {
                  "_result": [Function],
                  "_status": -1,
                },
              }
            }
            key="route_9"
            pageTitle="Link ORCID ID to UQ eSpace"
          />
        </Switch>
      </Suspense>
    </ContextProvider>
  </div>
  <Connect(WithStyles(HelpDrawer)) />
  <WithStyles(OfflineSnackbar) />
</WithStyles(ForwardRef(Grid))>
`;

exports[`Testing wrapped App component Mounts 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MUIDataTable": Object {
                "paper": Object {
                  "boxShadow": "none",
                  "margin": 0,
                  "padding": 0,
                },
              },
              "MuiFormLabel": Object {
                "root": Object {
                  "lineHeight": "normal",
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
              "MuiIconButton": Object {
                "colorInherit": Object {
                  "color": "none",
                },
              },
              "MuiInput": Object {
                "formControl": Object {
                  "label + &": Object {
                    "marginTop": 17,
                  },
                },
              },
              "MuiMenuItem": Object {
                "root": Object {
                  "&$selected": Object {
                    "backgroundColor": "#4085C6 !important",
                    "color": "#FFFFFF",
                  },
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#316799",
              },
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#fff",
                "dark": "#1976d2",
                "light": "#64b5f6",
                "main": "#2196f3",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "contrastText": "#fff",
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "#fff",
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1.167,
              },
              "h2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1.2,
              },
              "h3": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.167,
              },
              "h4": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.235,
              },
              "h5": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
            Symbol(mui.nested): false,
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={[Function]}
        >
          <WithStyles(AppClass)
            account={
              Object {
                "name": "Ky",
              }
            }
            actions={
              Object {
                "loadCurrentAccount": [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                },
                "logout": [MockFunction],
              }
            }
            classes={Object {}}
            history={
              Object {
                "go": [MockFunction],
                "location": Object {
                  "pathname": "/",
                },
                "push": [MockFunction],
              }
            }
            location={
              Object {
                "pathname": "/",
              }
            }
            theme={
              Object {
                "palette": Object {
                  "primary": Object {
                    "main": "red",
                  },
                },
              }
            }
          >
            <AppClass
              account={
                Object {
                  "name": "Ky",
                }
              }
              actions={
                Object {
                  "loadCurrentAccount": [MockFunction] {
                    "calls": Array [
                      Array [],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "logout": [MockFunction],
                }
              }
              classes={
                Object {
                  "appBG": "AppClass-appBG-1",
                  "layoutCard": "AppClass-layoutCard-2",
                  "layoutFill": "AppClass-layoutFill-3",
                  "nowrap": "AppClass-nowrap-5",
                  "titleLink": "AppClass-titleLink-4",
                }
              }
              history={
                Object {
                  "go": [MockFunction],
                  "location": Object {
                    "pathname": "/",
                  },
                  "push": [MockFunction],
                }
              }
              location={
                Object {
                  "pathname": "/",
                }
              }
              theme={
                Object {
                  "palette": Object {
                    "primary": Object {
                      "main": "red",
                    },
                  },
                }
              }
            >
              <WithStyles(ForwardRef(Grid))
                className="AppClass-layoutFill-3"
                container={true}
              >
                <ForwardRef(Grid)
                  className="AppClass-layoutFill-3"
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                      "container": "MuiGrid-container",
                      "direction-xs-column": "MuiGrid-direction-xs-column",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                      "grid-lg-1": "MuiGrid-grid-lg-1",
                      "grid-lg-10": "MuiGrid-grid-lg-10",
                      "grid-lg-11": "MuiGrid-grid-lg-11",
                      "grid-lg-12": "MuiGrid-grid-lg-12",
                      "grid-lg-2": "MuiGrid-grid-lg-2",
                      "grid-lg-3": "MuiGrid-grid-lg-3",
                      "grid-lg-4": "MuiGrid-grid-lg-4",
                      "grid-lg-5": "MuiGrid-grid-lg-5",
                      "grid-lg-6": "MuiGrid-grid-lg-6",
                      "grid-lg-7": "MuiGrid-grid-lg-7",
                      "grid-lg-8": "MuiGrid-grid-lg-8",
                      "grid-lg-9": "MuiGrid-grid-lg-9",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                      "grid-lg-true": "MuiGrid-grid-lg-true",
                      "grid-md-1": "MuiGrid-grid-md-1",
                      "grid-md-10": "MuiGrid-grid-md-10",
                      "grid-md-11": "MuiGrid-grid-md-11",
                      "grid-md-12": "MuiGrid-grid-md-12",
                      "grid-md-2": "MuiGrid-grid-md-2",
                      "grid-md-3": "MuiGrid-grid-md-3",
                      "grid-md-4": "MuiGrid-grid-md-4",
                      "grid-md-5": "MuiGrid-grid-md-5",
                      "grid-md-6": "MuiGrid-grid-md-6",
                      "grid-md-7": "MuiGrid-grid-md-7",
                      "grid-md-8": "MuiGrid-grid-md-8",
                      "grid-md-9": "MuiGrid-grid-md-9",
                      "grid-md-auto": "MuiGrid-grid-md-auto",
                      "grid-md-true": "MuiGrid-grid-md-true",
                      "grid-sm-1": "MuiGrid-grid-sm-1",
                      "grid-sm-10": "MuiGrid-grid-sm-10",
                      "grid-sm-11": "MuiGrid-grid-sm-11",
                      "grid-sm-12": "MuiGrid-grid-sm-12",
                      "grid-sm-2": "MuiGrid-grid-sm-2",
                      "grid-sm-3": "MuiGrid-grid-sm-3",
                      "grid-sm-4": "MuiGrid-grid-sm-4",
                      "grid-sm-5": "MuiGrid-grid-sm-5",
                      "grid-sm-6": "MuiGrid-grid-sm-6",
                      "grid-sm-7": "MuiGrid-grid-sm-7",
                      "grid-sm-8": "MuiGrid-grid-sm-8",
                      "grid-sm-9": "MuiGrid-grid-sm-9",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                      "grid-sm-true": "MuiGrid-grid-sm-true",
                      "grid-xl-1": "MuiGrid-grid-xl-1",
                      "grid-xl-10": "MuiGrid-grid-xl-10",
                      "grid-xl-11": "MuiGrid-grid-xl-11",
                      "grid-xl-12": "MuiGrid-grid-xl-12",
                      "grid-xl-2": "MuiGrid-grid-xl-2",
                      "grid-xl-3": "MuiGrid-grid-xl-3",
                      "grid-xl-4": "MuiGrid-grid-xl-4",
                      "grid-xl-5": "MuiGrid-grid-xl-5",
                      "grid-xl-6": "MuiGrid-grid-xl-6",
                      "grid-xl-7": "MuiGrid-grid-xl-7",
                      "grid-xl-8": "MuiGrid-grid-xl-8",
                      "grid-xl-9": "MuiGrid-grid-xl-9",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                      "grid-xl-true": "MuiGrid-grid-xl-true",
                      "grid-xs-1": "MuiGrid-grid-xs-1",
                      "grid-xs-10": "MuiGrid-grid-xs-10",
                      "grid-xs-11": "MuiGrid-grid-xs-11",
                      "grid-xs-12": "MuiGrid-grid-xs-12",
                      "grid-xs-2": "MuiGrid-grid-xs-2",
                      "grid-xs-3": "MuiGrid-grid-xs-3",
                      "grid-xs-4": "MuiGrid-grid-xs-4",
                      "grid-xs-5": "MuiGrid-grid-xs-5",
                      "grid-xs-6": "MuiGrid-grid-xs-6",
                      "grid-xs-7": "MuiGrid-grid-xs-7",
                      "grid-xs-8": "MuiGrid-grid-xs-8",
                      "grid-xs-9": "MuiGrid-grid-xs-9",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                      "grid-xs-true": "MuiGrid-grid-xs-true",
                      "item": "MuiGrid-item",
                      "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                      "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                      "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                      "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                      "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                      "root": "MuiGrid-root",
                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                    }
                  }
                  container={true}
                >
                  <div
                    className="MuiGrid-root AppClass-layoutFill-3 MuiGrid-container"
                  >
                    <withRouter(Connect(Meta))
                      routesConfig={
                        Array [
                          Object {
                            "pageTitle": "Higher degree by research thesis deposit",
                            "path": "/rhdsubmission",
                            "render": [Function],
                          },
                          Object {
                            "pageTitle": "Professional doctorate deposit",
                            "path": "/habslodge",
                            "render": [Function],
                          },
                          Object {
                            "component": [Function],
                            "exact": true,
                            "pageTitle": "eSpace",
                            "path": "/",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": undefined,
                            "path": "/dashboard",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": [Function],
                            "exact": true,
                            "pageTitle": "My works",
                            "path": "/records/mine",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": [Function],
                            "exact": true,
                            "pageTitle": "My research data",
                            "path": "/data-collections/mine",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Add data collection",
                            "path": "/data-collections/add",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Claim possible works",
                            "path": "/records/possible",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": [Function],
                            "exact": true,
                            "pageTitle": undefined,
                            "path": "/records/incomplete",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "exact": true,
                            "pageTitle": "Complete my work",
                            "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
                            "render": [Function],
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Claim a work",
                            "path": "/records/claim",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Request a correction, add more information or upload files",
                            "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
                            "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "exact": true,
                            "pageTitle": "Add a missing work to eSpace",
                            "path": "/records/add/find",
                            "render": [Function],
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "exact": true,
                            "pageTitle": "Add a missing work to eSpace",
                            "path": "/records/add/results",
                            "render": [Function],
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "exact": true,
                            "pageTitle": "Add a missing work to eSpace",
                            "path": "/records/add/new",
                            "render": [Function],
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Google Scholar identifier",
                            "path": "/author-identifiers/google-scholar/link",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "My editorial appointments",
                            "path": "/editorial-appointments",
                          },
                          Object {
                            "access": Array [
                              "researcher",
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "Journal details",
                            "path": "/journal/view/:id([0-9]+)",
                          },
                          Object {
                            "component": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": [Function],
                            },
                            "exact": true,
                            "pageTitle": "Journal search",
                            "path": "/journals/search/",
                          },
                          Object {
                            "component": undefined,
                            "pageTitle": "Strategic publishing results",
                            "path": "/journals/results/",
                          },
                          Object {
                            "component": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": [Function],
                            },
                            "pageTitle": "Strategic publishing compare",
                            "path": "/journals/compare/",
                          },
                          Object {
                            "component": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": [Function],
                            },
                            "pageTitle": "Strategic publishing favourites",
                            "path": "/journals/favourites/",
                          },
                          Object {
                            "component": [Function],
                            "exact": true,
                            "pageTitle": "eSpace",
                            "path": "/",
                          },
                          Object {
                            "pageTitle": "Contact UQ eSpace",
                            "path": "/contact",
                            "render": [Function],
                          },
                          Object {
                            "component": Object {
                              "$$typeof": Symbol(react.memo),
                              "WrappedComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": [Function],
                                "type": [Function],
                              },
                              "compare": null,
                              "type": [Function],
                            },
                            "exact": true,
                            "pageTitle": undefined,
                            "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
                            "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
                          },
                          Object {
                            "component": [Function],
                            "exact": true,
                            "pageTitle": "eSpace search",
                            "path": "/records/search",
                          },
                          Object {
                            "access": Array [
                              "admin",
                            ],
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "pageTitle": "Journal details",
                            "path": "/journal/view/:id([0-9]+)",
                          },
                          Object {
                            "component": Object {
                              "$$typeof": Symbol(react.lazy),
                              "_init": [Function],
                              "_payload": Object {
                                "_result": [Function],
                                "_status": -1,
                              },
                            },
                            "exact": true,
                            "pageTitle": "List of Communities",
                            "path": "/communities",
                          },
                          Object {
                            "component": undefined,
                            "exact": true,
                            "pageTitle": "List of Collections",
                            "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
                          },
                          Object {
                            "component": [Function],
                            "pageTitle": "Page not found",
                          },
                        ]
                      }
                    >
                      <Connect(Meta)
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "canGo": [Function],
                            "createHref": [Function],
                            "entries": Array [
                              Object {
                                "hash": "",
                                "key": "testKey",
                                "pathname": "/",
                                "search": "",
                              },
                            ],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "index": 0,
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "key": "testKey",
                              "pathname": "/",
                              "search": "",
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "key": "testKey",
                            "pathname": "/",
                            "search": "",
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                        routesConfig={
                          Array [
                            Object {
                              "pageTitle": "Higher degree by research thesis deposit",
                              "path": "/rhdsubmission",
                              "render": [Function],
                            },
                            Object {
                              "pageTitle": "Professional doctorate deposit",
                              "path": "/habslodge",
                              "render": [Function],
                            },
                            Object {
                              "component": [Function],
                              "exact": true,
                              "pageTitle": "eSpace",
                              "path": "/",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": undefined,
                              "path": "/dashboard",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": [Function],
                              "exact": true,
                              "pageTitle": "My works",
                              "path": "/records/mine",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": [Function],
                              "exact": true,
                              "pageTitle": "My research data",
                              "path": "/data-collections/mine",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Add data collection",
                              "path": "/data-collections/add",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Claim possible works",
                              "path": "/records/possible",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": [Function],
                              "exact": true,
                              "pageTitle": undefined,
                              "path": "/records/incomplete",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "exact": true,
                              "pageTitle": "Complete my work",
                              "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
                              "render": [Function],
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Claim a work",
                              "path": "/records/claim",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Request a correction, add more information or upload files",
                              "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
                              "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "exact": true,
                              "pageTitle": "Add a missing work to eSpace",
                              "path": "/records/add/find",
                              "render": [Function],
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "exact": true,
                              "pageTitle": "Add a missing work to eSpace",
                              "path": "/records/add/results",
                              "render": [Function],
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "exact": true,
                              "pageTitle": "Add a missing work to eSpace",
                              "path": "/records/add/new",
                              "render": [Function],
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Google Scholar identifier",
                              "path": "/author-identifiers/google-scholar/link",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "My editorial appointments",
                              "path": "/editorial-appointments",
                            },
                            Object {
                              "access": Array [
                                "researcher",
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "Journal details",
                              "path": "/journal/view/:id([0-9]+)",
                            },
                            Object {
                              "component": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": [Function],
                              },
                              "exact": true,
                              "pageTitle": "Journal search",
                              "path": "/journals/search/",
                            },
                            Object {
                              "component": undefined,
                              "pageTitle": "Strategic publishing results",
                              "path": "/journals/results/",
                            },
                            Object {
                              "component": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": [Function],
                              },
                              "pageTitle": "Strategic publishing compare",
                              "path": "/journals/compare/",
                            },
                            Object {
                              "component": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": [Function],
                              },
                              "pageTitle": "Strategic publishing favourites",
                              "path": "/journals/favourites/",
                            },
                            Object {
                              "component": [Function],
                              "exact": true,
                              "pageTitle": "eSpace",
                              "path": "/",
                            },
                            Object {
                              "pageTitle": "Contact UQ eSpace",
                              "path": "/contact",
                              "render": [Function],
                            },
                            Object {
                              "component": Object {
                                "$$typeof": Symbol(react.memo),
                                "WrappedComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": [Function],
                                  "type": [Function],
                                },
                                "compare": null,
                                "type": [Function],
                              },
                              "exact": true,
                              "pageTitle": undefined,
                              "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
                              "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
                            },
                            Object {
                              "component": [Function],
                              "exact": true,
                              "pageTitle": "eSpace search",
                              "path": "/records/search",
                            },
                            Object {
                              "access": Array [
                                "admin",
                              ],
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "pageTitle": "Journal details",
                              "path": "/journal/view/:id([0-9]+)",
                            },
                            Object {
                              "component": Object {
                                "$$typeof": Symbol(react.lazy),
                                "_init": [Function],
                                "_payload": Object {
                                  "_result": [Function],
                                  "_status": -1,
                                },
                              },
                              "exact": true,
                              "pageTitle": "List of Communities",
                              "path": "/communities",
                            },
                            Object {
                              "component": undefined,
                              "exact": true,
                              "pageTitle": "List of Collections",
                              "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
                            },
                            Object {
                              "component": [Function],
                              "pageTitle": "Page not found",
                            },
                          ]
                        }
                      >
                        <Meta
                          history={
                            Object {
                              "action": "POP",
                              "block": [Function],
                              "canGo": [Function],
                              "createHref": [Function],
                              "entries": Array [
                                Object {
                                  "hash": "",
                                  "key": "testKey",
                                  "pathname": "/",
                                  "search": "",
                                },
                              ],
                              "go": [Function],
                              "goBack": [Function],
                              "goForward": [Function],
                              "index": 0,
                              "length": 1,
                              "listen": [Function],
                              "location": Object {
                                "hash": "",
                                "key": "testKey",
                                "pathname": "/",
                                "search": "",
                              },
                              "push": [Function],
                              "replace": [Function],
                            }
                          }
                          location={
                            Object {
                              "hash": "",
                              "key": "testKey",
                              "pathname": "/",
                              "search": "",
                            }
                          }
                          match={
                            Object {
                              "isExact": true,
                              "params": Object {},
                              "path": "/",
                              "url": "/",
                            }
                          }
                          publication={Object {}}
                          routesConfig={
                            Array [
                              Object {
                                "pageTitle": "Higher degree by research thesis deposit",
                                "path": "/rhdsubmission",
                                "render": [Function],
                              },
                              Object {
                                "pageTitle": "Professional doctorate deposit",
                                "path": "/habslodge",
                                "render": [Function],
                              },
                              Object {
                                "component": [Function],
                                "exact": true,
                                "pageTitle": "eSpace",
                                "path": "/",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": undefined,
                                "path": "/dashboard",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": [Function],
                                "exact": true,
                                "pageTitle": "My works",
                                "path": "/records/mine",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": [Function],
                                "exact": true,
                                "pageTitle": "My research data",
                                "path": "/data-collections/mine",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Add data collection",
                                "path": "/data-collections/add",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Claim possible works",
                                "path": "/records/possible",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": [Function],
                                "exact": true,
                                "pageTitle": undefined,
                                "path": "/records/incomplete",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "exact": true,
                                "pageTitle": "Complete my work",
                                "path": "/records/:pid(UQ:[a-z0-9]+)/incomplete",
                                "render": [Function],
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Claim a work",
                                "path": "/records/claim",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Request a correction, add more information or upload files",
                                "path": "/records/:pid(UQ:[a-z0-9]+)/fix",
                                "regExPath": "/records/(UQ:[a-z0-9]+)/fix",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "exact": true,
                                "pageTitle": "Add a missing work to eSpace",
                                "path": "/records/add/find",
                                "render": [Function],
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "exact": true,
                                "pageTitle": "Add a missing work to eSpace",
                                "path": "/records/add/results",
                                "render": [Function],
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "exact": true,
                                "pageTitle": "Add a missing work to eSpace",
                                "path": "/records/add/new",
                                "render": [Function],
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Google Scholar identifier",
                                "path": "/author-identifiers/google-scholar/link",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "My editorial appointments",
                                "path": "/editorial-appointments",
                              },
                              Object {
                                "access": Array [
                                  "researcher",
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "Journal details",
                                "path": "/journal/view/:id([0-9]+)",
                              },
                              Object {
                                "component": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": [Function],
                                },
                                "exact": true,
                                "pageTitle": "Journal search",
                                "path": "/journals/search/",
                              },
                              Object {
                                "component": undefined,
                                "pageTitle": "Strategic publishing results",
                                "path": "/journals/results/",
                              },
                              Object {
                                "component": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": [Function],
                                },
                                "pageTitle": "Strategic publishing compare",
                                "path": "/journals/compare/",
                              },
                              Object {
                                "component": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": [Function],
                                },
                                "pageTitle": "Strategic publishing favourites",
                                "path": "/journals/favourites/",
                              },
                              Object {
                                "component": [Function],
                                "exact": true,
                                "pageTitle": "eSpace",
                                "path": "/",
                              },
                              Object {
                                "pageTitle": "Contact UQ eSpace",
                                "path": "/contact",
                                "render": [Function],
                              },
                              Object {
                                "component": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "WrappedComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": [Function],
                                    "type": [Function],
                                  },
                                  "compare": null,
                                  "type": [Function],
                                },
                                "exact": true,
                                "pageTitle": undefined,
                                "path": "/view/:pid(UQ:[a-z0-9]+|not-found)",
                                "regExPath": "/view/(UQ:[a-z0-9]+|not-found)",
                              },
                              Object {
                                "component": [Function],
                                "exact": true,
                                "pageTitle": "eSpace search",
                                "path": "/records/search",
                              },
                              Object {
                                "access": Array [
                                  "admin",
                                ],
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "pageTitle": "Journal details",
                                "path": "/journal/view/:id([0-9]+)",
                              },
                              Object {
                                "component": Object {
                                  "$$typeof": Symbol(react.lazy),
                                  "_init": [Function],
                                  "_payload": Object {
                                    "_result": [Function],
                                    "_status": -1,
                                  },
                                },
                                "exact": true,
                                "pageTitle": "List of Communities",
                                "path": "/communities",
                              },
                              Object {
                                "component": undefined,
                                "exact": true,
                                "pageTitle": "List of Collections",
                                "path": "/communities/:pid(UQ:[a-z0-9]+)/collections",
                              },
                              Object {
                                "component": [Function],
                                "pageTitle": "Page not found",
                              },
                            ]
                          }
                        >
                          <HelmetProvider
                            context={
                              Object {
                                "helmet": null,
                              }
                            }
                          >
                            <Helmet
                              defer={true}
                              encodeSpecialCharacters={true}
                              link={
                                Array [
                                  Object {
                                    "href": "http://purl.org/DC/elements/1.0/",
                                    "rel": "schema.DC",
                                  },
                                ]
                              }
                              prioritizeSeoTags={true}
                              title="UQ eSpace "
                            >
                              <HelmetDispatcher
                                context={
                                  Object {
                                    "helmetInstances": Object {
                                      "add": [Function],
                                      "get": [Function],
                                      "remove": [Function],
                                    },
                                    "setHelmet": [Function],
                                  }
                                }
                                defer={true}
                                encodeSpecialCharacters={true}
                                link={
                                  Array [
                                    Object {
                                      "href": "http://purl.org/DC/elements/1.0/",
                                      "rel": "schema.DC",
                                    },
                                  ]
                                }
                                prioritizeSeoTags={true}
                                title="UQ eSpace "
                              />
                            </Helmet>
                          </HelmetProvider>
                        </Meta>
                      </Connect(Meta)>
                    </withRouter(Connect(Meta))>
                    <WithStyles(ForwardRef(AppBar))
                      className="AppBar"
                      color="primary"
                      position="fixed"
                    >
                      <ForwardRef(AppBar)
                        className="AppBar"
                        classes={
                          Object {
                            "colorDefault": "MuiAppBar-colorDefault",
                            "colorInherit": "MuiAppBar-colorInherit",
                            "colorPrimary": "MuiAppBar-colorPrimary",
                            "colorSecondary": "MuiAppBar-colorSecondary",
                            "colorTransparent": "MuiAppBar-colorTransparent",
                            "positionAbsolute": "MuiAppBar-positionAbsolute",
                            "positionFixed": "MuiAppBar-positionFixed",
                            "positionRelative": "MuiAppBar-positionRelative",
                            "positionStatic": "MuiAppBar-positionStatic",
                            "positionSticky": "MuiAppBar-positionSticky",
                            "root": "MuiAppBar-root",
                          }
                        }
                        color="primary"
                        position="fixed"
                      >
                        <WithStyles(ForwardRef(Paper))
                          className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary AppBar mui-fixed"
                          component="header"
                          elevation={4}
                          square={true}
                        >
                          <ForwardRef(Paper)
                            className="MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary AppBar mui-fixed"
                            classes={
                              Object {
                                "elevation0": "MuiPaper-elevation0",
                                "elevation1": "MuiPaper-elevation1",
                                "elevation10": "MuiPaper-elevation10",
                                "elevation11": "MuiPaper-elevation11",
                                "elevation12": "MuiPaper-elevation12",
                                "elevation13": "MuiPaper-elevation13",
                                "elevation14": "MuiPaper-elevation14",
                                "elevation15": "MuiPaper-elevation15",
                                "elevation16": "MuiPaper-elevation16",
                                "elevation17": "MuiPaper-elevation17",
                                "elevation18": "MuiPaper-elevation18",
                                "elevation19": "MuiPaper-elevation19",
                                "elevation2": "MuiPaper-elevation2",
                                "elevation20": "MuiPaper-elevation20",
                                "elevation21": "MuiPaper-elevation21",
                                "elevation22": "MuiPaper-elevation22",
                                "elevation23": "MuiPaper-elevation23",
                                "elevation24": "MuiPaper-elevation24",
                                "elevation3": "MuiPaper-elevation3",
                                "elevation4": "MuiPaper-elevation4",
                                "elevation5": "MuiPaper-elevation5",
                                "elevation6": "MuiPaper-elevation6",
                                "elevation7": "MuiPaper-elevation7",
                                "elevation8": "MuiPaper-elevation8",
                                "elevation9": "MuiPaper-elevation9",
                                "outlined": "MuiPaper-outlined",
                                "root": "MuiPaper-root",
                                "rounded": "MuiPaper-rounded",
                              }
                            }
                            component="header"
                            elevation={4}
                            square={true}
                          >
                            <header
                              className="MuiPaper-root MuiAppBar-root MuiAppBar-positionFixed MuiAppBar-colorPrimary AppBar mui-fixed MuiPaper-elevation4"
                            >
                              <WithStyles(ForwardRef(Toolbar))
                                style={
                                  Object {
                                    "height": "70px",
                                  }
                                }
                              >
                                <ForwardRef(Toolbar)
                                  classes={
                                    Object {
                                      "dense": "MuiToolbar-dense",
                                      "gutters": "MuiToolbar-gutters",
                                      "regular": "MuiToolbar-regular",
                                      "root": "MuiToolbar-root",
                                    }
                                  }
                                  style={
                                    Object {
                                      "height": "70px",
                                    }
                                  }
                                >
                                  <div
                                    className="MuiToolbar-root MuiToolbar-regular MuiToolbar-gutters"
                                    style={
                                      Object {
                                        "height": "70px",
                                      }
                                    }
                                  >
                                    <WithStyles(ForwardRef(Grid))
                                      alignItems="center"
                                      container={true}
                                      direction="row"
                                      justifyContent="flex-start"
                                      spacing={1}
                                      wrap="nowrap"
                                    >
                                      <ForwardRef(Grid)
                                        alignItems="center"
                                        classes={
                                          Object {
                                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                            "container": "MuiGrid-container",
                                            "direction-xs-column": "MuiGrid-direction-xs-column",
                                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                            "grid-lg-1": "MuiGrid-grid-lg-1",
                                            "grid-lg-10": "MuiGrid-grid-lg-10",
                                            "grid-lg-11": "MuiGrid-grid-lg-11",
                                            "grid-lg-12": "MuiGrid-grid-lg-12",
                                            "grid-lg-2": "MuiGrid-grid-lg-2",
                                            "grid-lg-3": "MuiGrid-grid-lg-3",
                                            "grid-lg-4": "MuiGrid-grid-lg-4",
                                            "grid-lg-5": "MuiGrid-grid-lg-5",
                                            "grid-lg-6": "MuiGrid-grid-lg-6",
                                            "grid-lg-7": "MuiGrid-grid-lg-7",
                                            "grid-lg-8": "MuiGrid-grid-lg-8",
                                            "grid-lg-9": "MuiGrid-grid-lg-9",
                                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                            "grid-lg-true": "MuiGrid-grid-lg-true",
                                            "grid-md-1": "MuiGrid-grid-md-1",
                                            "grid-md-10": "MuiGrid-grid-md-10",
                                            "grid-md-11": "MuiGrid-grid-md-11",
                                            "grid-md-12": "MuiGrid-grid-md-12",
                                            "grid-md-2": "MuiGrid-grid-md-2",
                                            "grid-md-3": "MuiGrid-grid-md-3",
                                            "grid-md-4": "MuiGrid-grid-md-4",
                                            "grid-md-5": "MuiGrid-grid-md-5",
                                            "grid-md-6": "MuiGrid-grid-md-6",
                                            "grid-md-7": "MuiGrid-grid-md-7",
                                            "grid-md-8": "MuiGrid-grid-md-8",
                                            "grid-md-9": "MuiGrid-grid-md-9",
                                            "grid-md-auto": "MuiGrid-grid-md-auto",
                                            "grid-md-true": "MuiGrid-grid-md-true",
                                            "grid-sm-1": "MuiGrid-grid-sm-1",
                                            "grid-sm-10": "MuiGrid-grid-sm-10",
                                            "grid-sm-11": "MuiGrid-grid-sm-11",
                                            "grid-sm-12": "MuiGrid-grid-sm-12",
                                            "grid-sm-2": "MuiGrid-grid-sm-2",
                                            "grid-sm-3": "MuiGrid-grid-sm-3",
                                            "grid-sm-4": "MuiGrid-grid-sm-4",
                                            "grid-sm-5": "MuiGrid-grid-sm-5",
                                            "grid-sm-6": "MuiGrid-grid-sm-6",
                                            "grid-sm-7": "MuiGrid-grid-sm-7",
                                            "grid-sm-8": "MuiGrid-grid-sm-8",
                                            "grid-sm-9": "MuiGrid-grid-sm-9",
                                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                            "grid-sm-true": "MuiGrid-grid-sm-true",
                                            "grid-xl-1": "MuiGrid-grid-xl-1",
                                            "grid-xl-10": "MuiGrid-grid-xl-10",
                                            "grid-xl-11": "MuiGrid-grid-xl-11",
                                            "grid-xl-12": "MuiGrid-grid-xl-12",
                                            "grid-xl-2": "MuiGrid-grid-xl-2",
                                            "grid-xl-3": "MuiGrid-grid-xl-3",
                                            "grid-xl-4": "MuiGrid-grid-xl-4",
                                            "grid-xl-5": "MuiGrid-grid-xl-5",
                                            "grid-xl-6": "MuiGrid-grid-xl-6",
                                            "grid-xl-7": "MuiGrid-grid-xl-7",
                                            "grid-xl-8": "MuiGrid-grid-xl-8",
                                            "grid-xl-9": "MuiGrid-grid-xl-9",
                                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                            "grid-xl-true": "MuiGrid-grid-xl-true",
                                            "grid-xs-1": "MuiGrid-grid-xs-1",
                                            "grid-xs-10": "MuiGrid-grid-xs-10",
                                            "grid-xs-11": "MuiGrid-grid-xs-11",
                                            "grid-xs-12": "MuiGrid-grid-xs-12",
                                            "grid-xs-2": "MuiGrid-grid-xs-2",
                                            "grid-xs-3": "MuiGrid-grid-xs-3",
                                            "grid-xs-4": "MuiGrid-grid-xs-4",
                                            "grid-xs-5": "MuiGrid-grid-xs-5",
                                            "grid-xs-6": "MuiGrid-grid-xs-6",
                                            "grid-xs-7": "MuiGrid-grid-xs-7",
                                            "grid-xs-8": "MuiGrid-grid-xs-8",
                                            "grid-xs-9": "MuiGrid-grid-xs-9",
                                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                            "grid-xs-true": "MuiGrid-grid-xs-true",
                                            "item": "MuiGrid-item",
                                            "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                            "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                            "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                            "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                            "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                            "root": "MuiGrid-root",
                                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                          }
                                        }
                                        container={true}
                                        direction="row"
                                        justifyContent="flex-start"
                                        spacing={1}
                                        wrap="nowrap"
                                      >
                                        <div
                                          className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-1 MuiGrid-wrap-xs-nowrap MuiGrid-align-items-xs-center"
                                        >
                                          <WithStyles(ForwardRef(Grid))
                                            item={true}
                                          >
                                            <ForwardRef(Grid)
                                              classes={
                                                Object {
                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                  "container": "MuiGrid-container",
                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                  "item": "MuiGrid-item",
                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                  "root": "MuiGrid-root",
                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                }
                                              }
                                              item={true}
                                            >
                                              <div
                                                className="MuiGrid-root MuiGrid-item"
                                              >
                                                <WithStyles(ForwardRef(Tooltip))
                                                  TransitionComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "propTypes": Object {
                                                        "children": [Function],
                                                        "disableStrictModeCompat": [Function],
                                                        "in": [Function],
                                                        "onEnter": [Function],
                                                        "onEntered": [Function],
                                                        "onEntering": [Function],
                                                        "onExit": [Function],
                                                        "onExited": [Function],
                                                        "onExiting": [Function],
                                                        "style": [Function],
                                                        "timeout": [Function],
                                                      },
                                                      "render": [Function],
                                                    }
                                                  }
                                                  placement="bottom-end"
                                                  title="Main navigation"
                                                >
                                                  <ForwardRef(Tooltip)
                                                    TransitionComponent={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "propTypes": Object {
                                                          "children": [Function],
                                                          "disableStrictModeCompat": [Function],
                                                          "in": [Function],
                                                          "onEnter": [Function],
                                                          "onEntered": [Function],
                                                          "onEntering": [Function],
                                                          "onExit": [Function],
                                                          "onExited": [Function],
                                                          "onExiting": [Function],
                                                          "style": [Function],
                                                          "timeout": [Function],
                                                        },
                                                        "render": [Function],
                                                      }
                                                    }
                                                    classes={
                                                      Object {
                                                        "arrow": "MuiTooltip-arrow",
                                                        "popper": "MuiTooltip-popper",
                                                        "popperArrow": "MuiTooltip-popperArrow",
                                                        "popperInteractive": "MuiTooltip-popperInteractive",
                                                        "tooltip": "MuiTooltip-tooltip",
                                                        "tooltipArrow": "MuiTooltip-tooltipArrow",
                                                        "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                                        "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                                        "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                                        "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                                        "touch": "MuiTooltip-touch",
                                                      }
                                                    }
                                                    placement="bottom-end"
                                                    title="Main navigation"
                                                  >
                                                    <WithStyles(ForwardRef(IconButton))
                                                      aria-describedby={null}
                                                      aria-label="Click to open the main navigation"
                                                      className=""
                                                      id="main-menu-button"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onFocus={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseOver={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchStart={[Function]}
                                                      style={
                                                        Object {
                                                          "marginLeft": "-12px",
                                                          "marginRight": "12px",
                                                        }
                                                      }
                                                      title="Main navigation"
                                                    >
                                                      <ForwardRef(IconButton)
                                                        aria-describedby={null}
                                                        aria-label="Click to open the main navigation"
                                                        className=""
                                                        classes={
                                                          Object {
                                                            "colorInherit": "MuiIconButton-colorInherit",
                                                            "colorPrimary": "MuiIconButton-colorPrimary",
                                                            "colorSecondary": "MuiIconButton-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "edgeEnd": "MuiIconButton-edgeEnd",
                                                            "edgeStart": "MuiIconButton-edgeStart",
                                                            "label": "MuiIconButton-label",
                                                            "root": "MuiIconButton-root",
                                                            "sizeSmall": "MuiIconButton-sizeSmall",
                                                          }
                                                        }
                                                        id="main-menu-button"
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onFocus={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseOver={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchStart={[Function]}
                                                        style={
                                                          Object {
                                                            "marginLeft": "-12px",
                                                            "marginRight": "12px",
                                                          }
                                                        }
                                                        title="Main navigation"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          aria-describedby={null}
                                                          aria-label="Click to open the main navigation"
                                                          centerRipple={true}
                                                          className="MuiIconButton-root"
                                                          disabled={false}
                                                          focusRipple={true}
                                                          id="main-menu-button"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseOver={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchStart={[Function]}
                                                          style={
                                                            Object {
                                                              "marginLeft": "-12px",
                                                              "marginRight": "12px",
                                                            }
                                                          }
                                                          title="Main navigation"
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            aria-describedby={null}
                                                            aria-label="Click to open the main navigation"
                                                            centerRipple={true}
                                                            className="MuiIconButton-root"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            focusRipple={true}
                                                            id="main-menu-button"
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            onMouseLeave={[Function]}
                                                            onMouseOver={[Function]}
                                                            onTouchEnd={[Function]}
                                                            onTouchStart={[Function]}
                                                            style={
                                                              Object {
                                                                "marginLeft": "-12px",
                                                                "marginRight": "12px",
                                                              }
                                                            }
                                                            title="Main navigation"
                                                          >
                                                            <button
                                                              aria-describedby={null}
                                                              aria-label="Click to open the main navigation"
                                                              className="MuiButtonBase-root MuiIconButton-root"
                                                              disabled={false}
                                                              id="main-menu-button"
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseOver={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              style={
                                                                Object {
                                                                  "marginLeft": "-12px",
                                                                  "marginRight": "12px",
                                                                }
                                                              }
                                                              tabIndex={0}
                                                              title="Main navigation"
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiIconButton-label"
                                                              >
                                                                <ForwardRef(MenuIcon)
                                                                  style={
                                                                    Object {
                                                                      "color": "white",
                                                                    }
                                                                  }
                                                                >
                                                                  <WithStyles(ForwardRef(SvgIcon))
                                                                    style={
                                                                      Object {
                                                                        "color": "white",
                                                                      }
                                                                    }
                                                                  >
                                                                    <ForwardRef(SvgIcon)
                                                                      classes={
                                                                        Object {
                                                                          "colorAction": "MuiSvgIcon-colorAction",
                                                                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                          "colorError": "MuiSvgIcon-colorError",
                                                                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                          "root": "MuiSvgIcon-root",
                                                                        }
                                                                      }
                                                                      style={
                                                                        Object {
                                                                          "color": "white",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="MuiSvgIcon-root"
                                                                        focusable="false"
                                                                        style={
                                                                          Object {
                                                                            "color": "white",
                                                                          }
                                                                        }
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <path
                                                                          d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
                                                                        />
                                                                      </svg>
                                                                    </ForwardRef(SvgIcon)>
                                                                  </WithStyles(ForwardRef(SvgIcon))>
                                                                </ForwardRef(MenuIcon)>
                                                              </span>
                                                              <WithStyles(memo)
                                                                center={true}
                                                              >
                                                                <ForwardRef(TouchRipple)
                                                                  center={true}
                                                                  classes={
                                                                    Object {
                                                                      "child": "MuiTouchRipple-child",
                                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                                      "ripple": "MuiTouchRipple-ripple",
                                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                      "root": "MuiTouchRipple-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    className="MuiTouchRipple-root"
                                                                  >
                                                                    <TransitionGroup
                                                                      childFactory={[Function]}
                                                                      component={null}
                                                                      exit={true}
                                                                    />
                                                                  </span>
                                                                </ForwardRef(TouchRipple)>
                                                              </WithStyles(memo)>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(IconButton)>
                                                    </WithStyles(ForwardRef(IconButton))>
                                                    <ForwardRef(Popper)
                                                      anchorEl={
                                                        <button
                                                          aria-label="Click to open the main navigation"
                                                          class="MuiButtonBase-root MuiIconButton-root"
                                                          id="main-menu-button"
                                                          style="margin-left: -12px; margin-right: 12px;"
                                                          tabindex="0"
                                                          title="Main navigation"
                                                          type="button"
                                                        >
                                                          <span
                                                            class="MuiIconButton-label"
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              class="MuiSvgIcon-root"
                                                              focusable="false"
                                                              style="color: white;"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <path
                                                                d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
                                                              />
                                                            </svg>
                                                          </span>
                                                          <span
                                                            class="MuiTouchRipple-root"
                                                          />
                                                        </button>
                                                      }
                                                      className="MuiTooltip-popper"
                                                      id={null}
                                                      open={false}
                                                      placement="bottom-end"
                                                      popperOptions={
                                                        Object {
                                                          "modifiers": Object {
                                                            "arrow": Object {
                                                              "element": null,
                                                              "enabled": false,
                                                            },
                                                          },
                                                        }
                                                      }
                                                      transition={true}
                                                    />
                                                  </ForwardRef(Tooltip)>
                                                </WithStyles(ForwardRef(Tooltip))>
                                              </div>
                                            </ForwardRef(Grid)>
                                          </WithStyles(ForwardRef(Grid))>
                                          <WithStyles(ForwardRef(Grid))
                                            className="AppClass-nowrap-5"
                                            item={true}
                                            style={
                                              Object {
                                                "paddingLeft": 0,
                                              }
                                            }
                                            xs={true}
                                          >
                                            <ForwardRef(Grid)
                                              className="AppClass-nowrap-5"
                                              classes={
                                                Object {
                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                  "container": "MuiGrid-container",
                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                  "item": "MuiGrid-item",
                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                  "root": "MuiGrid-root",
                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                }
                                              }
                                              item={true}
                                              style={
                                                Object {
                                                  "paddingLeft": 0,
                                                }
                                              }
                                              xs={true}
                                            >
                                              <div
                                                className="MuiGrid-root AppClass-nowrap-5 MuiGrid-item MuiGrid-grid-xs-true"
                                                style={
                                                  Object {
                                                    "paddingLeft": 0,
                                                  }
                                                }
                                              >
                                                <WithStyles(ForwardRef(Grid))
                                                  alignItems="center"
                                                  container={true}
                                                  justifyContent="flex-start"
                                                  spacing={2}
                                                  wrap="nowrap"
                                                >
                                                  <ForwardRef(Grid)
                                                    alignItems="center"
                                                    classes={
                                                      Object {
                                                        "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                        "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                        "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                        "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                        "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                        "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                        "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                        "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                        "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                        "container": "MuiGrid-container",
                                                        "direction-xs-column": "MuiGrid-direction-xs-column",
                                                        "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                        "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                        "grid-lg-1": "MuiGrid-grid-lg-1",
                                                        "grid-lg-10": "MuiGrid-grid-lg-10",
                                                        "grid-lg-11": "MuiGrid-grid-lg-11",
                                                        "grid-lg-12": "MuiGrid-grid-lg-12",
                                                        "grid-lg-2": "MuiGrid-grid-lg-2",
                                                        "grid-lg-3": "MuiGrid-grid-lg-3",
                                                        "grid-lg-4": "MuiGrid-grid-lg-4",
                                                        "grid-lg-5": "MuiGrid-grid-lg-5",
                                                        "grid-lg-6": "MuiGrid-grid-lg-6",
                                                        "grid-lg-7": "MuiGrid-grid-lg-7",
                                                        "grid-lg-8": "MuiGrid-grid-lg-8",
                                                        "grid-lg-9": "MuiGrid-grid-lg-9",
                                                        "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                        "grid-lg-true": "MuiGrid-grid-lg-true",
                                                        "grid-md-1": "MuiGrid-grid-md-1",
                                                        "grid-md-10": "MuiGrid-grid-md-10",
                                                        "grid-md-11": "MuiGrid-grid-md-11",
                                                        "grid-md-12": "MuiGrid-grid-md-12",
                                                        "grid-md-2": "MuiGrid-grid-md-2",
                                                        "grid-md-3": "MuiGrid-grid-md-3",
                                                        "grid-md-4": "MuiGrid-grid-md-4",
                                                        "grid-md-5": "MuiGrid-grid-md-5",
                                                        "grid-md-6": "MuiGrid-grid-md-6",
                                                        "grid-md-7": "MuiGrid-grid-md-7",
                                                        "grid-md-8": "MuiGrid-grid-md-8",
                                                        "grid-md-9": "MuiGrid-grid-md-9",
                                                        "grid-md-auto": "MuiGrid-grid-md-auto",
                                                        "grid-md-true": "MuiGrid-grid-md-true",
                                                        "grid-sm-1": "MuiGrid-grid-sm-1",
                                                        "grid-sm-10": "MuiGrid-grid-sm-10",
                                                        "grid-sm-11": "MuiGrid-grid-sm-11",
                                                        "grid-sm-12": "MuiGrid-grid-sm-12",
                                                        "grid-sm-2": "MuiGrid-grid-sm-2",
                                                        "grid-sm-3": "MuiGrid-grid-sm-3",
                                                        "grid-sm-4": "MuiGrid-grid-sm-4",
                                                        "grid-sm-5": "MuiGrid-grid-sm-5",
                                                        "grid-sm-6": "MuiGrid-grid-sm-6",
                                                        "grid-sm-7": "MuiGrid-grid-sm-7",
                                                        "grid-sm-8": "MuiGrid-grid-sm-8",
                                                        "grid-sm-9": "MuiGrid-grid-sm-9",
                                                        "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                        "grid-sm-true": "MuiGrid-grid-sm-true",
                                                        "grid-xl-1": "MuiGrid-grid-xl-1",
                                                        "grid-xl-10": "MuiGrid-grid-xl-10",
                                                        "grid-xl-11": "MuiGrid-grid-xl-11",
                                                        "grid-xl-12": "MuiGrid-grid-xl-12",
                                                        "grid-xl-2": "MuiGrid-grid-xl-2",
                                                        "grid-xl-3": "MuiGrid-grid-xl-3",
                                                        "grid-xl-4": "MuiGrid-grid-xl-4",
                                                        "grid-xl-5": "MuiGrid-grid-xl-5",
                                                        "grid-xl-6": "MuiGrid-grid-xl-6",
                                                        "grid-xl-7": "MuiGrid-grid-xl-7",
                                                        "grid-xl-8": "MuiGrid-grid-xl-8",
                                                        "grid-xl-9": "MuiGrid-grid-xl-9",
                                                        "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                        "grid-xl-true": "MuiGrid-grid-xl-true",
                                                        "grid-xs-1": "MuiGrid-grid-xs-1",
                                                        "grid-xs-10": "MuiGrid-grid-xs-10",
                                                        "grid-xs-11": "MuiGrid-grid-xs-11",
                                                        "grid-xs-12": "MuiGrid-grid-xs-12",
                                                        "grid-xs-2": "MuiGrid-grid-xs-2",
                                                        "grid-xs-3": "MuiGrid-grid-xs-3",
                                                        "grid-xs-4": "MuiGrid-grid-xs-4",
                                                        "grid-xs-5": "MuiGrid-grid-xs-5",
                                                        "grid-xs-6": "MuiGrid-grid-xs-6",
                                                        "grid-xs-7": "MuiGrid-grid-xs-7",
                                                        "grid-xs-8": "MuiGrid-grid-xs-8",
                                                        "grid-xs-9": "MuiGrid-grid-xs-9",
                                                        "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                        "grid-xs-true": "MuiGrid-grid-xs-true",
                                                        "item": "MuiGrid-item",
                                                        "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                        "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                        "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                        "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                        "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                        "root": "MuiGrid-root",
                                                        "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                        "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                        "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                        "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                        "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                        "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                        "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                        "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                        "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                        "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                        "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                        "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                        "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                      }
                                                    }
                                                    container={true}
                                                    justifyContent="flex-start"
                                                    spacing={2}
                                                    wrap="nowrap"
                                                  >
                                                    <div
                                                      className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-2 MuiGrid-wrap-xs-nowrap MuiGrid-align-items-xs-center"
                                                    >
                                                      <Hidden
                                                        xsDown={true}
                                                      >
                                                        <WithWidth(HiddenJs)
                                                          lgDown={false}
                                                          lgUp={false}
                                                          mdDown={false}
                                                          mdUp={false}
                                                          smDown={false}
                                                          smUp={false}
                                                          xlDown={false}
                                                          xlUp={false}
                                                          xsDown={true}
                                                          xsUp={false}
                                                        />
                                                      </Hidden>
                                                      <WithStyles(ForwardRef(Grid))
                                                        item={true}
                                                        style={
                                                          Object {
                                                            "overflow": "hidden",
                                                            "textOverflow": "ellipsis",
                                                          }
                                                        }
                                                        xs="auto"
                                                      >
                                                        <ForwardRef(Grid)
                                                          classes={
                                                            Object {
                                                              "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                              "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                              "container": "MuiGrid-container",
                                                              "direction-xs-column": "MuiGrid-direction-xs-column",
                                                              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                              "grid-lg-1": "MuiGrid-grid-lg-1",
                                                              "grid-lg-10": "MuiGrid-grid-lg-10",
                                                              "grid-lg-11": "MuiGrid-grid-lg-11",
                                                              "grid-lg-12": "MuiGrid-grid-lg-12",
                                                              "grid-lg-2": "MuiGrid-grid-lg-2",
                                                              "grid-lg-3": "MuiGrid-grid-lg-3",
                                                              "grid-lg-4": "MuiGrid-grid-lg-4",
                                                              "grid-lg-5": "MuiGrid-grid-lg-5",
                                                              "grid-lg-6": "MuiGrid-grid-lg-6",
                                                              "grid-lg-7": "MuiGrid-grid-lg-7",
                                                              "grid-lg-8": "MuiGrid-grid-lg-8",
                                                              "grid-lg-9": "MuiGrid-grid-lg-9",
                                                              "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                              "grid-lg-true": "MuiGrid-grid-lg-true",
                                                              "grid-md-1": "MuiGrid-grid-md-1",
                                                              "grid-md-10": "MuiGrid-grid-md-10",
                                                              "grid-md-11": "MuiGrid-grid-md-11",
                                                              "grid-md-12": "MuiGrid-grid-md-12",
                                                              "grid-md-2": "MuiGrid-grid-md-2",
                                                              "grid-md-3": "MuiGrid-grid-md-3",
                                                              "grid-md-4": "MuiGrid-grid-md-4",
                                                              "grid-md-5": "MuiGrid-grid-md-5",
                                                              "grid-md-6": "MuiGrid-grid-md-6",
                                                              "grid-md-7": "MuiGrid-grid-md-7",
                                                              "grid-md-8": "MuiGrid-grid-md-8",
                                                              "grid-md-9": "MuiGrid-grid-md-9",
                                                              "grid-md-auto": "MuiGrid-grid-md-auto",
                                                              "grid-md-true": "MuiGrid-grid-md-true",
                                                              "grid-sm-1": "MuiGrid-grid-sm-1",
                                                              "grid-sm-10": "MuiGrid-grid-sm-10",
                                                              "grid-sm-11": "MuiGrid-grid-sm-11",
                                                              "grid-sm-12": "MuiGrid-grid-sm-12",
                                                              "grid-sm-2": "MuiGrid-grid-sm-2",
                                                              "grid-sm-3": "MuiGrid-grid-sm-3",
                                                              "grid-sm-4": "MuiGrid-grid-sm-4",
                                                              "grid-sm-5": "MuiGrid-grid-sm-5",
                                                              "grid-sm-6": "MuiGrid-grid-sm-6",
                                                              "grid-sm-7": "MuiGrid-grid-sm-7",
                                                              "grid-sm-8": "MuiGrid-grid-sm-8",
                                                              "grid-sm-9": "MuiGrid-grid-sm-9",
                                                              "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                              "grid-sm-true": "MuiGrid-grid-sm-true",
                                                              "grid-xl-1": "MuiGrid-grid-xl-1",
                                                              "grid-xl-10": "MuiGrid-grid-xl-10",
                                                              "grid-xl-11": "MuiGrid-grid-xl-11",
                                                              "grid-xl-12": "MuiGrid-grid-xl-12",
                                                              "grid-xl-2": "MuiGrid-grid-xl-2",
                                                              "grid-xl-3": "MuiGrid-grid-xl-3",
                                                              "grid-xl-4": "MuiGrid-grid-xl-4",
                                                              "grid-xl-5": "MuiGrid-grid-xl-5",
                                                              "grid-xl-6": "MuiGrid-grid-xl-6",
                                                              "grid-xl-7": "MuiGrid-grid-xl-7",
                                                              "grid-xl-8": "MuiGrid-grid-xl-8",
                                                              "grid-xl-9": "MuiGrid-grid-xl-9",
                                                              "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                              "grid-xl-true": "MuiGrid-grid-xl-true",
                                                              "grid-xs-1": "MuiGrid-grid-xs-1",
                                                              "grid-xs-10": "MuiGrid-grid-xs-10",
                                                              "grid-xs-11": "MuiGrid-grid-xs-11",
                                                              "grid-xs-12": "MuiGrid-grid-xs-12",
                                                              "grid-xs-2": "MuiGrid-grid-xs-2",
                                                              "grid-xs-3": "MuiGrid-grid-xs-3",
                                                              "grid-xs-4": "MuiGrid-grid-xs-4",
                                                              "grid-xs-5": "MuiGrid-grid-xs-5",
                                                              "grid-xs-6": "MuiGrid-grid-xs-6",
                                                              "grid-xs-7": "MuiGrid-grid-xs-7",
                                                              "grid-xs-8": "MuiGrid-grid-xs-8",
                                                              "grid-xs-9": "MuiGrid-grid-xs-9",
                                                              "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                              "grid-xs-true": "MuiGrid-grid-xs-true",
                                                              "item": "MuiGrid-item",
                                                              "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                              "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                              "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                              "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                              "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                              "root": "MuiGrid-root",
                                                              "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                              "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                              "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                              "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                              "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                              "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                              "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                              "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                              "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                              "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                              "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                            }
                                                          }
                                                          item={true}
                                                          style={
                                                            Object {
                                                              "overflow": "hidden",
                                                              "textOverflow": "ellipsis",
                                                            }
                                                          }
                                                          xs="auto"
                                                        >
                                                          <div
                                                            className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-auto"
                                                            style={
                                                              Object {
                                                                "overflow": "hidden",
                                                                "textOverflow": "ellipsis",
                                                              }
                                                            }
                                                          >
                                                            <WithStyles(ForwardRef(Typography))
                                                              className="AppClass-titleLink-4"
                                                              component="h1"
                                                              noWrap={true}
                                                              variant="h5"
                                                            >
                                                              <ForwardRef(Typography)
                                                                className="AppClass-titleLink-4"
                                                                classes={
                                                                  Object {
                                                                    "alignCenter": "MuiTypography-alignCenter",
                                                                    "alignJustify": "MuiTypography-alignJustify",
                                                                    "alignLeft": "MuiTypography-alignLeft",
                                                                    "alignRight": "MuiTypography-alignRight",
                                                                    "body1": "MuiTypography-body1",
                                                                    "body2": "MuiTypography-body2",
                                                                    "button": "MuiTypography-button",
                                                                    "caption": "MuiTypography-caption",
                                                                    "colorError": "MuiTypography-colorError",
                                                                    "colorInherit": "MuiTypography-colorInherit",
                                                                    "colorPrimary": "MuiTypography-colorPrimary",
                                                                    "colorSecondary": "MuiTypography-colorSecondary",
                                                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                                    "displayBlock": "MuiTypography-displayBlock",
                                                                    "displayInline": "MuiTypography-displayInline",
                                                                    "gutterBottom": "MuiTypography-gutterBottom",
                                                                    "h1": "MuiTypography-h1",
                                                                    "h2": "MuiTypography-h2",
                                                                    "h3": "MuiTypography-h3",
                                                                    "h4": "MuiTypography-h4",
                                                                    "h5": "MuiTypography-h5",
                                                                    "h6": "MuiTypography-h6",
                                                                    "noWrap": "MuiTypography-noWrap",
                                                                    "overline": "MuiTypography-overline",
                                                                    "paragraph": "MuiTypography-paragraph",
                                                                    "root": "MuiTypography-root",
                                                                    "srOnly": "MuiTypography-srOnly",
                                                                    "subtitle1": "MuiTypography-subtitle1",
                                                                    "subtitle2": "MuiTypography-subtitle2",
                                                                  }
                                                                }
                                                                component="h1"
                                                                noWrap={true}
                                                                variant="h5"
                                                              >
                                                                <h1
                                                                  className="MuiTypography-root AppClass-titleLink-4 MuiTypography-h5 MuiTypography-noWrap"
                                                                >
                                                                  <a
                                                                    className="appTitle"
                                                                    href="/"
                                                                    style={
                                                                      Object {
                                                                        "color": "#FFFFFF",
                                                                      }
                                                                    }
                                                                    title="Click to return to the eSpace home page"
                                                                  >
                                                                    UQ eSpace 
                                                                  </a>
                                                                </h1>
                                                              </ForwardRef(Typography)>
                                                            </WithStyles(ForwardRef(Typography))>
                                                          </div>
                                                        </ForwardRef(Grid)>
                                                      </WithStyles(ForwardRef(Grid))>
                                                    </div>
                                                  </ForwardRef(Grid)>
                                                </WithStyles(ForwardRef(Grid))>
                                              </div>
                                            </ForwardRef(Grid)>
                                          </WithStyles(ForwardRef(Grid))>
                                          <WithStyles(ForwardRef(Grid))
                                            item={true}
                                            sm={4}
                                            xs={2}
                                          >
                                            <ForwardRef(Grid)
                                              classes={
                                                Object {
                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                  "container": "MuiGrid-container",
                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                  "item": "MuiGrid-item",
                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                  "root": "MuiGrid-root",
                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                }
                                              }
                                              item={true}
                                              sm={4}
                                              xs={2}
                                            >
                                              <div
                                                className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-2 MuiGrid-grid-sm-4"
                                              >
                                                <withRouter(Connect(SearchComponent))
                                                  autoFocus={true}
                                                  isInHeader={true}
                                                  showMobileSearchButton={true}
                                                  showPrefixIcon={true}
                                                >
                                                  <Connect(SearchComponent)
                                                    autoFocus={true}
                                                    history={
                                                      Object {
                                                        "action": "POP",
                                                        "block": [Function],
                                                        "canGo": [Function],
                                                        "createHref": [Function],
                                                        "entries": Array [
                                                          Object {
                                                            "hash": "",
                                                            "key": "testKey",
                                                            "pathname": "/",
                                                            "search": "",
                                                          },
                                                        ],
                                                        "go": [Function],
                                                        "goBack": [Function],
                                                        "goForward": [Function],
                                                        "index": 0,
                                                        "length": 1,
                                                        "listen": [Function],
                                                        "location": Object {
                                                          "hash": "",
                                                          "key": "testKey",
                                                          "pathname": "/",
                                                          "search": "",
                                                        },
                                                        "push": [Function],
                                                        "replace": [Function],
                                                      }
                                                    }
                                                    isInHeader={true}
                                                    location={
                                                      Object {
                                                        "hash": "",
                                                        "key": "testKey",
                                                        "pathname": "/",
                                                        "search": "",
                                                      }
                                                    }
                                                    match={
                                                      Object {
                                                        "isExact": true,
                                                        "params": Object {},
                                                        "path": "/",
                                                        "url": "/",
                                                      }
                                                    }
                                                    showMobileSearchButton={true}
                                                    showPrefixIcon={true}
                                                  >
                                                    <SearchComponent
                                                      actions={
                                                        Object {
                                                          "addAuthor": [Function],
                                                          "addFavouriteSearch": [Function],
                                                          "addMyEditorialAppointments": [Function],
                                                          "addToFavourites": [Function],
                                                          "addUser": [Function],
                                                          "adminCreate": [Function],
                                                          "adminReset": [Function],
                                                          "adminUpdate": [Function],
                                                          "bulkDeleteAuthorListItems": [Function],
                                                          "bulkDeleteUserListItems": [Function],
                                                          "changeAuthorId": [Function],
                                                          "changeDisplayType": [Function],
                                                          "changeSearchKeyValue": [Function],
                                                          "checkForExistingAuthor": [Function],
                                                          "checkForExistingFavouriteSearchAlias": [Function],
                                                          "checkForExistingUser": [Function],
                                                          "checkSession": [Function],
                                                          "claimPublication": [Function],
                                                          "clearAuthorsSuggestions": [Function],
                                                          "clearCCCollectionsList": [Function],
                                                          "clearClaimPublication": [Function],
                                                          "clearDeleteRecord": [Function],
                                                          "clearFixRecord": [Function],
                                                          "clearJournalSearchKeywords": [Function],
                                                          "clearMyEditorialAppointmentsAddStatus": [Function],
                                                          "clearNewRecord": [Function],
                                                          "clearRecordToView": [Function],
                                                          "clearRedirectPath": [Function],
                                                          "clearSearchQuery": [Function],
                                                          "clearSessionExpiredFlag": [Function],
                                                          "clearThirdPartyLookup": [Function],
                                                          "collectionsList": [Function],
                                                          "communitiesList": [Function],
                                                          "copyToOrRemoveFromCollection": [Function],
                                                          "countPossiblyYourPublications": [Function],
                                                          "createBatchImport": [Function],
                                                          "createCollection": [Function],
                                                          "createCommunity": [Function],
                                                          "createNewRecord": [Function],
                                                          "createOrUpdateDoi": [Function],
                                                          "createSearchPromise": [Function],
                                                          "deleteAttachedFile": [Function],
                                                          "deleteAuthorListItem": [Function],
                                                          "deleteFavouriteSearchListItem": [Function],
                                                          "deleteMyEditorialAppointmentsListItem": [Function],
                                                          "deleteRecord": [Function],
                                                          "deleteUserListItem": [Function],
                                                          "dismissAppAlert": [Function],
                                                          "exportAuthorPublications": [Function],
                                                          "exportEspacePublications": [Function],
                                                          "exportJournals": [Function],
                                                          "exportPublications": [Function],
                                                          "fixRecord": [Function],
                                                          "getBatchImportDirectories": [Function],
                                                          "getCollectionsListAPI": [Function],
                                                          "getFavouriteSearchAlias": [Function],
                                                          "getPreCheckError": [Function],
                                                          "getSearchLookupApi": [Function],
                                                          "getSherpaFromIssn": [Function],
                                                          "getThirdPartyLookupApiUrl": [Function],
                                                          "getUlrichsFromIssn": [Function],
                                                          "hidePossiblyYourPublicationsLure": [Function],
                                                          "hideRecord": [Function],
                                                          "hideRecordErrorReset": [Function],
                                                          "ingestFromScopus": [Function],
                                                          "linkAuthorOrcidId": [Function],
                                                          "loadAuthorList": [Function],
                                                          "loadAuthorPublicationsStats": [Function],
                                                          "loadBulkUpdatesList": [Function],
                                                          "loadCCCollectionsList": [Function],
                                                          "loadCollectionsList": [Function],
                                                          "loadCommunitiesList": [Function],
                                                          "loadCurrentAccount": [Function],
                                                          "loadDetailedHistory": [Function],
                                                          "loadFavouriteSearchList": [Function],
                                                          "loadFullRecordToClaim": [Function],
                                                          "loadJournal": [Function],
                                                          "loadJournalLookup": [Function],
                                                          "loadJournalSearchKeywords": [Function],
                                                          "loadMyEditorialAppointmentsList": [Function],
                                                          "loadNewsFeed": [Function],
                                                          "loadOrcidSyncStatus": [Function],
                                                          "loadPublicationList": [Function],
                                                          "loadRecordToDelete": [Function],
                                                          "loadRecordToFix": [Function],
                                                          "loadRecordToView": [Function],
                                                          "loadRecordVersionToView": [Function],
                                                          "loadSearchKeyList": [Function],
                                                          "loadThirdPartyResults": [Function],
                                                          "loadUserList": [Function],
                                                          "loadVocabulariesList": [Function],
                                                          "logout": [Function],
                                                          "mergeAvailableAuthoringData": [Function],
                                                          "removeFromFavourites": [Function],
                                                          "removeShadowSuffixFromTableNames": [Function],
                                                          "requestMJLIngest": [Function],
                                                          "requestOrcidSync": [Function],
                                                          "resetDoi": [Function],
                                                          "resetExportPublicationsStatus": [Function],
                                                          "resetSavingAuthorState": [Function],
                                                          "retrieveFavouriteJournals": [Function],
                                                          "sanitiseData": [Function],
                                                          "searchAuthorPublications": [Function],
                                                          "searchAuthors": [Function],
                                                          "searchEspacePublications": [Function],
                                                          "searchJournals": [Function],
                                                          "searchLatestPublications": [Function],
                                                          "searchPossiblyYourPublications": [Function],
                                                          "searchPublications": [Function],
                                                          "searchTopCitedPublications": [Function],
                                                          "searchTrendingPublications": [Function],
                                                          "setClaimPublication": [Function],
                                                          "setCollectionsArray": [Function],
                                                          "setDeleteRecord": [Function],
                                                          "setFixRecord": [Function],
                                                          "setHideCulturalSensitivityStatement": [Function],
                                                          "setRedirectPath": [Function],
                                                          "showAppAlert": [Function],
                                                          "submitThesis": [Function],
                                                          "unclaimRecord": [Function],
                                                          "unlockRecord": [Function],
                                                          "unlockRecordToView": [Function],
                                                          "updateAuthorListItem": [Function],
                                                          "updateCollection": [Function],
                                                          "updateCommunity": [Function],
                                                          "updateCurrentAuthor": [Function],
                                                          "updateDoi": [Function],
                                                          "updateFavouriteSearchListItem": [Function],
                                                          "updateIncompleteRecord": [Function],
                                                          "updateMatchedRecordAuthoringData": [Function],
                                                          "updateMyEditorialAppointmentsListItem": [Function],
                                                          "updateUserListItem": [Function],
                                                        }
                                                      }
                                                      autoFocus={true}
                                                      history={
                                                        Object {
                                                          "action": "POP",
                                                          "block": [Function],
                                                          "canGo": [Function],
                                                          "createHref": [Function],
                                                          "entries": Array [
                                                            Object {
                                                              "hash": "",
                                                              "key": "testKey",
                                                              "pathname": "/",
                                                              "search": "",
                                                            },
                                                          ],
                                                          "go": [Function],
                                                          "goBack": [Function],
                                                          "goForward": [Function],
                                                          "index": 0,
                                                          "length": 1,
                                                          "listen": [Function],
                                                          "location": Object {
                                                            "hash": "",
                                                            "key": "testKey",
                                                            "pathname": "/",
                                                            "search": "",
                                                          },
                                                          "push": [Function],
                                                          "replace": [Function],
                                                        }
                                                      }
                                                      isAdmin={false}
                                                      isAdvancedSearch={false}
                                                      isAdvancedSearchMinimised={false}
                                                      isInHeader={true}
                                                      isOpenAccessInAdvancedMode={false}
                                                      isUnpublishedBufferPage={false}
                                                      location={
                                                        Object {
                                                          "hash": "",
                                                          "key": "testKey",
                                                          "pathname": "/",
                                                          "search": "",
                                                        }
                                                      }
                                                      match={
                                                        Object {
                                                          "isExact": true,
                                                          "params": Object {},
                                                          "path": "/",
                                                          "url": "/",
                                                        }
                                                      }
                                                      searchQueryParams={Object {}}
                                                      showAdvancedSearchButton={false}
                                                      showMobileSearchButton={true}
                                                      showPrefixIcon={true}
                                                      showSearchButton={false}
                                                      updateFacetExcludesFromSearchFields={[Function]}
                                                    >
                                                      <WithStyles(SimpleSearchComponent)
                                                        autoFocus={true}
                                                        isInHeader={true}
                                                        onInvalidSearch={[Function]}
                                                        onSearch={[Function]}
                                                        onSearchTextChange={[Function]}
                                                        onToggleSearchMode={[Function]}
                                                        searchText=""
                                                        showAdvancedSearchButton={false}
                                                        showMobileSearchButton={true}
                                                        showPrefixIcon={true}
                                                        showSearchButton={false}
                                                      >
                                                        <SimpleSearchComponent
                                                          autoFocus={true}
                                                          classes={
                                                            Object {
                                                              "inHeader": "SimpleSearchComponent-inHeader-7",
                                                              "mobileCloseButton": "SimpleSearchComponent-mobileCloseButton-9",
                                                              "mobileHeader": "SimpleSearchComponent-mobileHeader-10",
                                                              "mobileSearchInput": "SimpleSearchComponent-mobileSearchInput-11",
                                                              "searchIconMobile": "SimpleSearchComponent-searchIconMobile-8",
                                                              "searchIconPrefix": "SimpleSearchComponent-searchIconPrefix-6",
                                                            }
                                                          }
                                                          isInHeader={true}
                                                          onInvalidSearch={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchTextChange={[Function]}
                                                          onToggleSearchMode={[Function]}
                                                          searchText=""
                                                          showAdvancedSearchButton={false}
                                                          showMobileSearchButton={true}
                                                          showPrefixIcon={true}
                                                          showSearchButton={false}
                                                          theme={
                                                            Object {
                                                              "breakpoints": Object {
                                                                "between": [Function],
                                                                "down": [Function],
                                                                "keys": Array [
                                                                  "xs",
                                                                  "sm",
                                                                  "md",
                                                                  "lg",
                                                                  "xl",
                                                                ],
                                                                "only": [Function],
                                                                "up": [Function],
                                                                "values": Object {
                                                                  "lg": 1280,
                                                                  "md": 960,
                                                                  "sm": 600,
                                                                  "xl": 1920,
                                                                  "xs": 0,
                                                                },
                                                                "width": [Function],
                                                              },
                                                              "direction": "ltr",
                                                              "graphs": Object {
                                                                "color1": "#d72865",
                                                                "color2": "#1e7d94",
                                                                "color3": "#49075E",
                                                                "color4": "#468fcc",
                                                                "color5": "#f28620",
                                                                "color6": "#333333",
                                                                "color7": "#595959",
                                                              },
                                                              "hexToRGBA": [Function],
                                                              "mixins": Object {
                                                                "gutters": [Function],
                                                                "toolbar": Object {
                                                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                                                    "minHeight": 48,
                                                                  },
                                                                  "@media (min-width:600px)": Object {
                                                                    "minHeight": 64,
                                                                  },
                                                                  "minHeight": 56,
                                                                },
                                                              },
                                                              "overrides": Object {
                                                                "MUIDataTable": Object {
                                                                  "paper": Object {
                                                                    "boxShadow": "none",
                                                                    "margin": 0,
                                                                    "padding": 0,
                                                                  },
                                                                },
                                                                "MuiFormLabel": Object {
                                                                  "root": Object {
                                                                    "lineHeight": "normal",
                                                                    "overflow": "hidden",
                                                                    "textOverflow": "ellipsis",
                                                                    "whiteSpace": "nowrap",
                                                                    "width": "100%",
                                                                  },
                                                                },
                                                                "MuiIconButton": Object {
                                                                  "colorInherit": Object {
                                                                    "color": "none",
                                                                  },
                                                                },
                                                                "MuiInput": Object {
                                                                  "formControl": Object {
                                                                    "label + &": Object {
                                                                      "marginTop": 17,
                                                                    },
                                                                  },
                                                                },
                                                                "MuiMenuItem": Object {
                                                                  "root": Object {
                                                                    "&$selected": Object {
                                                                      "backgroundColor": "#4085C6 !important",
                                                                      "color": "#FFFFFF",
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                              "palette": Object {
                                                                "accent": Object {
                                                                  "dark": "#2a557d",
                                                                  "light": "#54acff",
                                                                  "main": "#316799",
                                                                },
                                                                "action": Object {
                                                                  "activatedOpacity": 0.12,
                                                                  "active": "rgba(0, 0, 0, 0.54)",
                                                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                                  "disabledOpacity": 0.38,
                                                                  "focus": "rgba(0, 0, 0, 0.12)",
                                                                  "focusOpacity": 0.12,
                                                                  "hover": "rgba(0, 0, 0, 0.04)",
                                                                  "hoverOpacity": 0.04,
                                                                  "selected": "rgba(0, 0, 0, 0.08)",
                                                                  "selectedOpacity": 0.08,
                                                                },
                                                                "augmentColor": [Function],
                                                                "background": Object {
                                                                  "default": "#fafafa",
                                                                  "paper": "#fff",
                                                                },
                                                                "common": Object {
                                                                  "black": "#000",
                                                                  "white": "#fff",
                                                                },
                                                                "contrastThreshold": 3,
                                                                "divider": "rgba(0, 0, 0, 0.12)",
                                                                "error": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#790000",
                                                                  "light": "#ff0000",
                                                                  "main": "#c80000",
                                                                },
                                                                "getContrastText": [Function],
                                                                "grey": Object {
                                                                  "100": "#f5f5f5",
                                                                  "200": "#eeeeee",
                                                                  "300": "#e0e0e0",
                                                                  "400": "#bdbdbd",
                                                                  "50": "#fafafa",
                                                                  "500": "#9e9e9e",
                                                                  "600": "#757575",
                                                                  "700": "#616161",
                                                                  "800": "#424242",
                                                                  "900": "#212121",
                                                                  "A100": "#d5d5d5",
                                                                  "A200": "#aaaaaa",
                                                                  "A400": "#303030",
                                                                  "A700": "#616161",
                                                                },
                                                                "info": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#1976d2",
                                                                  "light": "#64b5f6",
                                                                  "main": "#2196f3",
                                                                },
                                                                "primary": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#3b1a59",
                                                                  "gradient": Object {
                                                                    "diagonal": Object {
                                                                      "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                      "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                    },
                                                                    "horizontal": Object {
                                                                      "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                      "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                    },
                                                                  },
                                                                  "light": "#962A8B",
                                                                  "main": "#51247A",
                                                                },
                                                                "secondary": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#333333",
                                                                  "light": "#f2f2f2",
                                                                  "main": "#595959",
                                                                },
                                                                "success": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#005000",
                                                                  "light": "#00a700",
                                                                  "main": "#007200",
                                                                },
                                                                "text": Object {
                                                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                                                  "hint": "rgba(0, 0, 0, 0.38)",
                                                                  "primary": "rgba(0, 0, 0, 0.87)",
                                                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                                                },
                                                                "tonalOffset": 0.2,
                                                                "type": "light",
                                                                "warning": Object {
                                                                  "contrastText": "#fff",
                                                                  "dark": "#542400",
                                                                  "light": "#ff9a57",
                                                                  "main": "#bf5000",
                                                                },
                                                                "white": Object {
                                                                  "main": "#FFFFFF",
                                                                },
                                                              },
                                                              "props": Object {},
                                                              "shadows": Array [
                                                                "none",
                                                                "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                                                "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                                                "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                                              ],
                                                              "shape": Object {
                                                                "borderRadius": 4,
                                                              },
                                                              "spacing": [Function],
                                                              "status": Object {
                                                                "danger": "#f44336",
                                                                "warning": "#ff9800",
                                                              },
                                                              "transitions": Object {
                                                                "create": [Function],
                                                                "duration": Object {
                                                                  "complex": 375,
                                                                  "enteringScreen": 225,
                                                                  "leavingScreen": 195,
                                                                  "short": 250,
                                                                  "shorter": 200,
                                                                  "shortest": 150,
                                                                  "standard": 300,
                                                                },
                                                                "easing": Object {
                                                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                                },
                                                                "getAutoHeightDuration": [Function],
                                                              },
                                                              "typography": Object {
                                                                "body1": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "1rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.00938em",
                                                                  "lineHeight": 1.5,
                                                                },
                                                                "body2": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "0.875rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.01071em",
                                                                  "lineHeight": 1.43,
                                                                },
                                                                "button": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "0.875rem",
                                                                  "fontWeight": 400,
                                                                  "letterSpacing": "0.02857em",
                                                                  "lineHeight": 1.75,
                                                                  "textTransform": "uppercase",
                                                                },
                                                                "caption": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "0.75rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.03333em",
                                                                  "lineHeight": 1.66,
                                                                },
                                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                "fontSize": 14,
                                                                "fontWeightBold": 700,
                                                                "fontWeightLight": 200,
                                                                "fontWeightMedium": 400,
                                                                "fontWeightRegular": 300,
                                                                "h1": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "6rem",
                                                                  "fontWeight": 200,
                                                                  "letterSpacing": "-0.01562em",
                                                                  "lineHeight": 1.167,
                                                                },
                                                                "h2": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "3.75rem",
                                                                  "fontWeight": 200,
                                                                  "letterSpacing": "-0.00833em",
                                                                  "lineHeight": 1.2,
                                                                },
                                                                "h3": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "3rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0em",
                                                                  "lineHeight": 1.167,
                                                                },
                                                                "h4": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "2.125rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.00735em",
                                                                  "lineHeight": 1.235,
                                                                },
                                                                "h5": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "1.5rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0em",
                                                                  "lineHeight": 1.334,
                                                                },
                                                                "h6": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "1.25rem",
                                                                  "fontWeight": 400,
                                                                  "letterSpacing": "0.0075em",
                                                                  "lineHeight": 1.6,
                                                                },
                                                                "htmlFontSize": 16,
                                                                "overline": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "0.75rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.08333em",
                                                                  "lineHeight": 2.66,
                                                                  "textTransform": "uppercase",
                                                                },
                                                                "pxToRem": [Function],
                                                                "round": [Function],
                                                                "subtitle1": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "1rem",
                                                                  "fontWeight": 300,
                                                                  "letterSpacing": "0.00938em",
                                                                  "lineHeight": 1.75,
                                                                },
                                                                "subtitle2": Object {
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": "0.875rem",
                                                                  "fontWeight": 400,
                                                                  "letterSpacing": "0.00714em",
                                                                  "lineHeight": 1.57,
                                                                },
                                                                "suppressDeprecationWarnings": true,
                                                                "useNextVariants": true,
                                                              },
                                                              "zIndex": Object {
                                                                "appBar": 1100,
                                                                "drawer": 1200,
                                                                "mobileStepper": 1000,
                                                                "modal": 1300,
                                                                "snackbar": 1400,
                                                                "speedDial": 1050,
                                                                "tooltip": 1500,
                                                              },
                                                              Symbol(mui.nested): false,
                                                            }
                                                          }
                                                        >
                                                          <form
                                                            onSubmit={[Function]}
                                                            style={
                                                              Object {
                                                                "margin": 8,
                                                              }
                                                            }
                                                          >
                                                            <Hidden
                                                              xsDown={true}
                                                            >
                                                              <WithWidth(HiddenJs)
                                                                lgDown={false}
                                                                lgUp={false}
                                                                mdDown={false}
                                                                mdUp={false}
                                                                smDown={false}
                                                                smUp={false}
                                                                xlDown={false}
                                                                xlUp={false}
                                                                xsDown={true}
                                                                xsUp={false}
                                                              />
                                                            </Hidden>
                                                            <Hidden
                                                              smUp={true}
                                                            >
                                                              <WithWidth(HiddenJs)
                                                                lgDown={false}
                                                                lgUp={false}
                                                                mdDown={false}
                                                                mdUp={false}
                                                                smDown={false}
                                                                smUp={true}
                                                                xlDown={false}
                                                                xlUp={false}
                                                                xsDown={false}
                                                                xsUp={false}
                                                              />
                                                            </Hidden>
                                                          </form>
                                                        </SimpleSearchComponent>
                                                      </WithStyles(SimpleSearchComponent)>
                                                      <WithStyles(ForwardRef(Snackbar))
                                                        anchorOrigin={
                                                          Object {
                                                            "horizontal": "left",
                                                            "vertical": "bottom",
                                                          }
                                                        }
                                                        autoHideDuration={5000}
                                                        message=""
                                                        open={false}
                                                      >
                                                        <ForwardRef(Snackbar)
                                                          anchorOrigin={
                                                            Object {
                                                              "horizontal": "left",
                                                              "vertical": "bottom",
                                                            }
                                                          }
                                                          autoHideDuration={5000}
                                                          classes={
                                                            Object {
                                                              "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
                                                              "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
                                                              "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
                                                              "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
                                                              "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
                                                              "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
                                                              "root": "MuiSnackbar-root",
                                                            }
                                                          }
                                                          message=""
                                                          open={false}
                                                        />
                                                      </WithStyles(ForwardRef(Snackbar))>
                                                    </SearchComponent>
                                                  </Connect(SearchComponent)>
                                                </withRouter(Connect(SearchComponent))>
                                              </div>
                                            </ForwardRef(Grid)>
                                          </WithStyles(ForwardRef(Grid))>
                                          <WithStyles(ForwardRef(Grid))
                                            item={true}
                                          >
                                            <ForwardRef(Grid)
                                              classes={
                                                Object {
                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                  "container": "MuiGrid-container",
                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                  "item": "MuiGrid-item",
                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                  "root": "MuiGrid-root",
                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                }
                                              }
                                              item={true}
                                            >
                                              <div
                                                className="MuiGrid-root MuiGrid-item"
                                              >
                                                <AuthButton
                                                  ariaLabel="Click to log out of eSpace"
                                                  isAuthorizedUser={true}
                                                  onClick={[Function]}
                                                  signInTooltipText="Log in"
                                                  signOutTooltipText="Log out - Ky"
                                                >
                                                  <div
                                                    className="auth-button-wrapper"
                                                  >
                                                    <WithStyles(ForwardRef(Tooltip))
                                                      TransitionComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "propTypes": Object {
                                                            "children": [Function],
                                                            "disableStrictModeCompat": [Function],
                                                            "in": [Function],
                                                            "onEnter": [Function],
                                                            "onEntered": [Function],
                                                            "onEntering": [Function],
                                                            "onExit": [Function],
                                                            "onExited": [Function],
                                                            "onExiting": [Function],
                                                            "style": [Function],
                                                            "timeout": [Function],
                                                          },
                                                          "render": [Function],
                                                        }
                                                      }
                                                      TransitionProps={
                                                        Object {
                                                          "timeout": 300,
                                                        }
                                                      }
                                                      id="auth-button"
                                                      placement="bottom-start"
                                                      title="Log out - Ky"
                                                    >
                                                      <ForwardRef(Tooltip)
                                                        TransitionComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "propTypes": Object {
                                                              "children": [Function],
                                                              "disableStrictModeCompat": [Function],
                                                              "in": [Function],
                                                              "onEnter": [Function],
                                                              "onEntered": [Function],
                                                              "onEntering": [Function],
                                                              "onExit": [Function],
                                                              "onExited": [Function],
                                                              "onExiting": [Function],
                                                              "style": [Function],
                                                              "timeout": [Function],
                                                            },
                                                            "render": [Function],
                                                          }
                                                        }
                                                        TransitionProps={
                                                          Object {
                                                            "timeout": 300,
                                                          }
                                                        }
                                                        classes={
                                                          Object {
                                                            "arrow": "MuiTooltip-arrow",
                                                            "popper": "MuiTooltip-popper",
                                                            "popperArrow": "MuiTooltip-popperArrow",
                                                            "popperInteractive": "MuiTooltip-popperInteractive",
                                                            "tooltip": "MuiTooltip-tooltip",
                                                            "tooltipArrow": "MuiTooltip-tooltipArrow",
                                                            "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                                            "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                                            "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                                            "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                                            "touch": "MuiTooltip-touch",
                                                          }
                                                        }
                                                        id="auth-button"
                                                        placement="bottom-start"
                                                        title="Log out - Ky"
                                                      >
                                                        <WithStyles(ForwardRef(IconButton))
                                                          aria-describedby={null}
                                                          aria-label="Click to log out of eSpace"
                                                          className="log-out-button"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseLeave={[Function]}
                                                          onMouseOver={[Function]}
                                                          onTouchEnd={[Function]}
                                                          onTouchStart={[Function]}
                                                          title="Log out - Ky"
                                                        >
                                                          <ForwardRef(IconButton)
                                                            aria-describedby={null}
                                                            aria-label="Click to log out of eSpace"
                                                            className="log-out-button"
                                                            classes={
                                                              Object {
                                                                "colorInherit": "MuiIconButton-colorInherit",
                                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                                "disabled": "Mui-disabled",
                                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                                "edgeStart": "MuiIconButton-edgeStart",
                                                                "label": "MuiIconButton-label",
                                                                "root": "MuiIconButton-root",
                                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onFocus={[Function]}
                                                            onMouseLeave={[Function]}
                                                            onMouseOver={[Function]}
                                                            onTouchEnd={[Function]}
                                                            onTouchStart={[Function]}
                                                            title="Log out - Ky"
                                                          >
                                                            <WithStyles(ForwardRef(ButtonBase))
                                                              aria-describedby={null}
                                                              aria-label="Click to log out of eSpace"
                                                              centerRipple={true}
                                                              className="MuiIconButton-root log-out-button"
                                                              disabled={false}
                                                              focusRipple={true}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onFocus={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseOver={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchStart={[Function]}
                                                              title="Log out - Ky"
                                                            >
                                                              <ForwardRef(ButtonBase)
                                                                aria-describedby={null}
                                                                aria-label="Click to log out of eSpace"
                                                                centerRipple={true}
                                                                className="MuiIconButton-root log-out-button"
                                                                classes={
                                                                  Object {
                                                                    "disabled": "Mui-disabled",
                                                                    "focusVisible": "Mui-focusVisible",
                                                                    "root": "MuiButtonBase-root",
                                                                  }
                                                                }
                                                                disabled={false}
                                                                focusRipple={true}
                                                                onBlur={[Function]}
                                                                onClick={[Function]}
                                                                onFocus={[Function]}
                                                                onMouseLeave={[Function]}
                                                                onMouseOver={[Function]}
                                                                onTouchEnd={[Function]}
                                                                onTouchStart={[Function]}
                                                                title="Log out - Ky"
                                                              >
                                                                <button
                                                                  aria-describedby={null}
                                                                  aria-label="Click to log out of eSpace"
                                                                  className="MuiButtonBase-root MuiIconButton-root log-out-button"
                                                                  disabled={false}
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onDragLeave={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                  onMouseOver={[Function]}
                                                                  onMouseUp={[Function]}
                                                                  onTouchEnd={[Function]}
                                                                  onTouchMove={[Function]}
                                                                  onTouchStart={[Function]}
                                                                  tabIndex={0}
                                                                  title="Log out - Ky"
                                                                  type="button"
                                                                >
                                                                  <span
                                                                    className="MuiIconButton-label"
                                                                  >
                                                                    <ForwardRef(PersonIcon)
                                                                      className="makeStyles-iconButton-12"
                                                                      id="logged-in-icon"
                                                                    >
                                                                      <WithStyles(ForwardRef(SvgIcon))
                                                                        className="makeStyles-iconButton-12"
                                                                        id="logged-in-icon"
                                                                      >
                                                                        <ForwardRef(SvgIcon)
                                                                          className="makeStyles-iconButton-12"
                                                                          classes={
                                                                            Object {
                                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                              "colorError": "MuiSvgIcon-colorError",
                                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                              "root": "MuiSvgIcon-root",
                                                                            }
                                                                          }
                                                                          id="logged-in-icon"
                                                                        >
                                                                          <svg
                                                                            aria-hidden={true}
                                                                            className="MuiSvgIcon-root makeStyles-iconButton-12"
                                                                            focusable="false"
                                                                            id="logged-in-icon"
                                                                            viewBox="0 0 24 24"
                                                                          >
                                                                            <path
                                                                              d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                                                            />
                                                                          </svg>
                                                                        </ForwardRef(SvgIcon)>
                                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                                    </ForwardRef(PersonIcon)>
                                                                  </span>
                                                                  <WithStyles(memo)
                                                                    center={true}
                                                                  >
                                                                    <ForwardRef(TouchRipple)
                                                                      center={true}
                                                                      classes={
                                                                        Object {
                                                                          "child": "MuiTouchRipple-child",
                                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                                          "ripple": "MuiTouchRipple-ripple",
                                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                          "root": "MuiTouchRipple-root",
                                                                        }
                                                                      }
                                                                    >
                                                                      <span
                                                                        className="MuiTouchRipple-root"
                                                                      >
                                                                        <TransitionGroup
                                                                          childFactory={[Function]}
                                                                          component={null}
                                                                          exit={true}
                                                                        />
                                                                      </span>
                                                                    </ForwardRef(TouchRipple)>
                                                                  </WithStyles(memo)>
                                                                </button>
                                                              </ForwardRef(ButtonBase)>
                                                            </WithStyles(ForwardRef(ButtonBase))>
                                                          </ForwardRef(IconButton)>
                                                        </WithStyles(ForwardRef(IconButton))>
                                                        <ForwardRef(Popper)
                                                          anchorEl={
                                                            <button
                                                              aria-label="Click to log out of eSpace"
                                                              class="MuiButtonBase-root MuiIconButton-root log-out-button"
                                                              tabindex="0"
                                                              title="Log out - Ky"
                                                              type="button"
                                                            >
                                                              <span
                                                                class="MuiIconButton-label"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  class="MuiSvgIcon-root makeStyles-iconButton-12"
                                                                  focusable="false"
                                                                  id="logged-in-icon"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                                                  />
                                                                </svg>
                                                              </span>
                                                              <span
                                                                class="MuiTouchRipple-root"
                                                              />
                                                            </button>
                                                          }
                                                          className="MuiTooltip-popper"
                                                          id={null}
                                                          open={false}
                                                          placement="bottom-start"
                                                          popperOptions={
                                                            Object {
                                                              "modifiers": Object {
                                                                "arrow": Object {
                                                                  "element": null,
                                                                  "enabled": false,
                                                                },
                                                              },
                                                            }
                                                          }
                                                          transition={true}
                                                        />
                                                      </ForwardRef(Tooltip)>
                                                    </WithStyles(ForwardRef(Tooltip))>
                                                  </div>
                                                </AuthButton>
                                              </div>
                                            </ForwardRef(Grid)>
                                          </WithStyles(ForwardRef(Grid))>
                                        </div>
                                      </ForwardRef(Grid)>
                                    </WithStyles(ForwardRef(Grid))>
                                  </div>
                                </ForwardRef(Toolbar)>
                              </WithStyles(ForwardRef(Toolbar))>
                            </header>
                          </ForwardRef(Paper)>
                        </WithStyles(ForwardRef(Paper))>
                      </ForwardRef(AppBar)>
                    </WithStyles(ForwardRef(AppBar))>
                    <WithStyles(MenuDrawer)
                      docked={false}
                      drawerOpen={false}
                      hasIncompleteWorks={false}
                      history={
                        Object {
                          "go": [MockFunction],
                          "location": Object {
                            "pathname": "/",
                          },
                          "push": [MockFunction],
                        }
                      }
                      isMobile={false}
                      locale={
                        Object {
                          "closeMenuLabel": "Close menu",
                          "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
                          "skipNavTitle": "Skip Navigation",
                        }
                      }
                      logoImage="largeLogo"
                      logoLink="http://www.uq.edu.au"
                      logoText="The University of Queensland"
                      menuItems={
                        Array [
                          Object {
                            "linkTo": "/",
                            "primaryText": "Home",
                            "public": true,
                          },
                          Object {
                            "linkTo": "/journals/search/",
                            "primaryText": "Journal search",
                          },
                          Object {
                            "linkTo": "/records/search",
                            "primaryText": "Search eSpace",
                            "public": true,
                            "secondaryText": "",
                          },
                          Object {
                            "linkTo": "/communities",
                            "primaryText": "Browse",
                            "public": true,
                          },
                          Object {
                            "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
                            "primaryText": "Help",
                            "public": true,
                          },
                          Object {
                            "linkTo": "/contact",
                            "primaryText": "Contact",
                            "public": true,
                            "secondaryText": "",
                          },
                        ]
                      }
                      onToggleDrawer={[Function]}
                    >
                      <MenuDrawer
                        classes={
                          Object {
                            "ListItemTextPrimary": "MenuDrawer-ListItemTextPrimary-19",
                            "ListItemTextSecondary": "MenuDrawer-ListItemTextSecondary-20",
                            "docked": "MenuDrawer-docked-14",
                            "header": "MenuDrawer-header-16",
                            "iconButton": "MenuDrawer-iconButton-22",
                            "mainMenu": "MenuDrawer-mainMenu-18",
                            "mainMenuFooter": "MenuDrawer-mainMenuFooter-21",
                            "paper": "MenuDrawer-paper-13",
                            "paperAnchorDockedLeft": "MenuDrawer-paperAnchorDockedLeft-15",
                            "skipNav": "MenuDrawer-skipNav-17",
                          }
                        }
                        docked={false}
                        drawerOpen={false}
                        hasIncompleteWorks={false}
                        history={
                          Object {
                            "go": [MockFunction],
                            "location": Object {
                              "pathname": "/",
                            },
                            "push": [MockFunction],
                          }
                        }
                        isMobile={false}
                        locale={
                          Object {
                            "closeMenuLabel": "Close menu",
                            "skipNavAriaLabel": "Click to skip, or tab to progress to the navigation",
                            "skipNavTitle": "Skip Navigation",
                          }
                        }
                        logoImage="largeLogo"
                        logoLink="http://www.uq.edu.au"
                        logoText="The University of Queensland"
                        menuItems={
                          Array [
                            Object {
                              "linkTo": "/",
                              "primaryText": "Home",
                              "public": true,
                            },
                            Object {
                              "linkTo": "/journals/search/",
                              "primaryText": "Journal search",
                            },
                            Object {
                              "linkTo": "/records/search",
                              "primaryText": "Search eSpace",
                              "public": true,
                              "secondaryText": "",
                            },
                            Object {
                              "linkTo": "/communities",
                              "primaryText": "Browse",
                              "public": true,
                            },
                            Object {
                              "linkTo": "https://guides.library.uq.edu.au/for-researchers/research-publications-guide",
                              "primaryText": "Help",
                              "public": true,
                            },
                            Object {
                              "linkTo": "/contact",
                              "primaryText": "Contact",
                              "public": true,
                              "secondaryText": "",
                            },
                          ]
                        }
                        onToggleDrawer={[Function]}
                        theme={
                          Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "graphs": Object {
                              "color1": "#d72865",
                              "color2": "#1e7d94",
                              "color3": "#49075E",
                              "color4": "#468fcc",
                              "color5": "#f28620",
                              "color6": "#333333",
                              "color7": "#595959",
                            },
                            "hexToRGBA": [Function],
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {
                              "MUIDataTable": Object {
                                "paper": Object {
                                  "boxShadow": "none",
                                  "margin": 0,
                                  "padding": 0,
                                },
                              },
                              "MuiFormLabel": Object {
                                "root": Object {
                                  "lineHeight": "normal",
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                  "width": "100%",
                                },
                              },
                              "MuiIconButton": Object {
                                "colorInherit": Object {
                                  "color": "none",
                                },
                              },
                              "MuiInput": Object {
                                "formControl": Object {
                                  "label + &": Object {
                                    "marginTop": 17,
                                  },
                                },
                              },
                              "MuiMenuItem": Object {
                                "root": Object {
                                  "&$selected": Object {
                                    "backgroundColor": "#4085C6 !important",
                                    "color": "#FFFFFF",
                                  },
                                },
                              },
                            },
                            "palette": Object {
                              "accent": Object {
                                "dark": "#2a557d",
                                "light": "#54acff",
                                "main": "#316799",
                              },
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#790000",
                                "light": "#ff0000",
                                "main": "#c80000",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#3b1a59",
                                "gradient": Object {
                                  "diagonal": Object {
                                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                  },
                                  "horizontal": Object {
                                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                  },
                                },
                                "light": "#962A8B",
                                "main": "#51247A",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#333333",
                                "light": "#f2f2f2",
                                "main": "#595959",
                              },
                              "success": Object {
                                "contrastText": "#fff",
                                "dark": "#005000",
                                "light": "#00a700",
                                "main": "#007200",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "#fff",
                                "dark": "#542400",
                                "light": "#ff9a57",
                                "main": "#bf5000",
                              },
                              "white": Object {
                                "main": "#FFFFFF",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "status": Object {
                              "danger": "#f44336",
                              "warning": "#ff9800",
                            },
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 200,
                              "fontWeightMedium": 400,
                              "fontWeightRegular": 300,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 200,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 200,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 300,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 300,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                              "suppressDeprecationWarnings": true,
                              "useNextVariants": true,
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                            Symbol(mui.nested): false,
                          }
                        }
                      >
                        <WithStyles(ForwardRef(Drawer))
                          anchor="left"
                          classes={
                            Object {
                              "docked": "MenuDrawer-docked-14",
                              "paper": "MenuDrawer-paper-13",
                              "paperAnchorDockedLeft": "MenuDrawer-paperAnchorDockedLeft-15",
                            }
                          }
                          id="menudrawer"
                          onClose={[Function]}
                          open={false}
                          variant="temporary"
                        >
                          <ForwardRef(Drawer)
                            anchor="left"
                            classes={
                              Object {
                                "docked": "MuiDrawer-docked MenuDrawer-docked-14",
                                "modal": "MuiDrawer-modal",
                                "paper": "MuiDrawer-paper MenuDrawer-paper-13",
                                "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
                                "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
                                "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft MenuDrawer-paperAnchorDockedLeft-15",
                                "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
                                "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
                                "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
                                "paperAnchorRight": "MuiDrawer-paperAnchorRight",
                                "paperAnchorTop": "MuiDrawer-paperAnchorTop",
                                "root": "MuiDrawer-root",
                              }
                            }
                            id="menudrawer"
                            onClose={[Function]}
                            open={false}
                            variant="temporary"
                          >
                            <ForwardRef(Modal)
                              BackdropComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "Naked": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "className": [Function],
                                      "classes": [Function],
                                      "invisible": [Function],
                                      "open": [Function],
                                      "transitionDuration": [Function],
                                    },
                                    "render": [Function],
                                  },
                                  "options": Object {
                                    "defaultTheme": Object {
                                      "breakpoints": Object {
                                        "between": [Function],
                                        "down": [Function],
                                        "keys": Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ],
                                        "only": [Function],
                                        "up": [Function],
                                        "values": Object {
                                          "lg": 1280,
                                          "md": 960,
                                          "sm": 600,
                                          "xl": 1920,
                                          "xs": 0,
                                        },
                                        "width": [Function],
                                      },
                                      "direction": "ltr",
                                      "mixins": Object {
                                        "gutters": [Function],
                                        "toolbar": Object {
                                          "@media (min-width:0px) and (orientation: landscape)": Object {
                                            "minHeight": 48,
                                          },
                                          "@media (min-width:600px)": Object {
                                            "minHeight": 64,
                                          },
                                          "minHeight": 56,
                                        },
                                      },
                                      "overrides": Object {},
                                      "palette": Object {
                                        "action": Object {
                                          "activatedOpacity": 0.12,
                                          "active": "rgba(0, 0, 0, 0.54)",
                                          "disabled": "rgba(0, 0, 0, 0.26)",
                                          "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                          "disabledOpacity": 0.38,
                                          "focus": "rgba(0, 0, 0, 0.12)",
                                          "focusOpacity": 0.12,
                                          "hover": "rgba(0, 0, 0, 0.04)",
                                          "hoverOpacity": 0.04,
                                          "selected": "rgba(0, 0, 0, 0.08)",
                                          "selectedOpacity": 0.08,
                                        },
                                        "augmentColor": [Function],
                                        "background": Object {
                                          "default": "#fafafa",
                                          "paper": "#fff",
                                        },
                                        "common": Object {
                                          "black": "#000",
                                          "white": "#fff",
                                        },
                                        "contrastThreshold": 3,
                                        "divider": "rgba(0, 0, 0, 0.12)",
                                        "error": Object {
                                          "contrastText": "#fff",
                                          "dark": "#d32f2f",
                                          "light": "#e57373",
                                          "main": "#f44336",
                                        },
                                        "getContrastText": [Function],
                                        "grey": Object {
                                          "100": "#f5f5f5",
                                          "200": "#eeeeee",
                                          "300": "#e0e0e0",
                                          "400": "#bdbdbd",
                                          "50": "#fafafa",
                                          "500": "#9e9e9e",
                                          "600": "#757575",
                                          "700": "#616161",
                                          "800": "#424242",
                                          "900": "#212121",
                                          "A100": "#d5d5d5",
                                          "A200": "#aaaaaa",
                                          "A400": "#303030",
                                          "A700": "#616161",
                                        },
                                        "info": Object {
                                          "contrastText": "#fff",
                                          "dark": "#1976d2",
                                          "light": "#64b5f6",
                                          "main": "#2196f3",
                                        },
                                        "primary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#303f9f",
                                          "light": "#7986cb",
                                          "main": "#3f51b5",
                                        },
                                        "secondary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#c51162",
                                          "light": "#ff4081",
                                          "main": "#f50057",
                                        },
                                        "success": Object {
                                          "contrastText": "rgba(0, 0, 0, 0.87)",
                                          "dark": "#388e3c",
                                          "light": "#81c784",
                                          "main": "#4caf50",
                                        },
                                        "text": Object {
                                          "disabled": "rgba(0, 0, 0, 0.38)",
                                          "hint": "rgba(0, 0, 0, 0.38)",
                                          "primary": "rgba(0, 0, 0, 0.87)",
                                          "secondary": "rgba(0, 0, 0, 0.54)",
                                        },
                                        "tonalOffset": 0.2,
                                        "type": "light",
                                        "warning": Object {
                                          "contrastText": "rgba(0, 0, 0, 0.87)",
                                          "dark": "#f57c00",
                                          "light": "#ffb74d",
                                          "main": "#ff9800",
                                        },
                                      },
                                      "props": Object {},
                                      "shadows": Array [
                                        "none",
                                        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                      ],
                                      "shape": Object {
                                        "borderRadius": 4,
                                      },
                                      "spacing": [Function],
                                      "transitions": Object {
                                        "create": [Function],
                                        "duration": Object {
                                          "complex": 375,
                                          "enteringScreen": 225,
                                          "leavingScreen": 195,
                                          "short": 250,
                                          "shorter": 200,
                                          "shortest": 150,
                                          "standard": 300,
                                        },
                                        "easing": Object {
                                          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                        },
                                        "getAutoHeightDuration": [Function],
                                      },
                                      "typography": Object {
                                        "body1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.5,
                                        },
                                        "body2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.01071em",
                                          "lineHeight": 1.43,
                                        },
                                        "button": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.02857em",
                                          "lineHeight": 1.75,
                                          "textTransform": "uppercase",
                                        },
                                        "caption": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.03333em",
                                          "lineHeight": 1.66,
                                        },
                                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                        "fontSize": 14,
                                        "fontWeightBold": 700,
                                        "fontWeightLight": 300,
                                        "fontWeightMedium": 500,
                                        "fontWeightRegular": 400,
                                        "h1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "6rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.01562em",
                                          "lineHeight": 1.167,
                                        },
                                        "h2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3.75rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "-0.00833em",
                                          "lineHeight": 1.2,
                                        },
                                        "h3": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.167,
                                        },
                                        "h4": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.125rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00735em",
                                          "lineHeight": 1.235,
                                        },
                                        "h5": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.5rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.334,
                                        },
                                        "h6": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.25rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.0075em",
                                          "lineHeight": 1.6,
                                        },
                                        "htmlFontSize": 16,
                                        "overline": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.08333em",
                                          "lineHeight": 2.66,
                                          "textTransform": "uppercase",
                                        },
                                        "pxToRem": [Function],
                                        "round": [Function],
                                        "subtitle1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.75,
                                        },
                                        "subtitle2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 500,
                                          "letterSpacing": "0.00714em",
                                          "lineHeight": 1.57,
                                        },
                                      },
                                      "zIndex": Object {
                                        "appBar": 1100,
                                        "drawer": 1200,
                                        "mobileStepper": 1000,
                                        "modal": 1300,
                                        "snackbar": 1400,
                                        "speedDial": 1050,
                                        "tooltip": 1500,
                                      },
                                    },
                                    "name": "MuiBackdrop",
                                  },
                                  "propTypes": Object {
                                    "classes": [Function],
                                    "innerRef": [Function],
                                  },
                                  "render": [Function],
                                  "useStyles": [Function],
                                }
                              }
                              BackdropProps={
                                Object {
                                  "transitionDuration": Object {
                                    "enter": 225,
                                    "exit": 195,
                                  },
                                }
                              }
                              className="MuiDrawer-root MuiDrawer-modal"
                              id="menudrawer"
                              onClose={[Function]}
                              open={false}
                            />
                          </ForwardRef(Drawer)>
                        </WithStyles(ForwardRef(Drawer))>
                      </MenuDrawer>
                    </WithStyles(MenuDrawer)>
                    <div
                      className="content-container"
                      id="content-container"
                      style={Object {}}
                    >
                      <Hidden
                        smDown={true}
                      >
                        <WithWidth(HiddenJs)
                          lgDown={false}
                          lgUp={false}
                          mdDown={false}
                          mdUp={false}
                          smDown={true}
                          smUp={false}
                          xlDown={false}
                          xlUp={false}
                          xsDown={false}
                          xsUp={false}
                        />
                      </Hidden>
                      <div
                        aria-label="eSpace alerts"
                        role="region"
                        style={
                          Object {
                            "paddingBottom": 24,
                          }
                        }
                      >
                        <alert-list
                          system="espace"
                        />
                      </div>
                      <WithStyles(ConfirmDialogBox)
                        hideCancelButton={true}
                        locale={
                          Object {
                            "cancelButtonLabel": "Cancel",
                            "confirmButtonLabel": "Redirect to login",
                            "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
                            "confirmationTitle": "Session Expired",
                          }
                        }
                        onAction={[MockFunction]}
                        onRef={[Function]}
                      >
                        <ConfirmDialogBox
                          classes={
                            Object {
                              "alternateActionButtonClass": "ConfirmDialogBox-alternateActionButtonClass-23",
                            }
                          }
                          confirmDialogBoxId="dialog-box"
                          hideCancelButton={true}
                          locale={
                            Object {
                              "cancelButtonLabel": "Cancel",
                              "confirmButtonLabel": "Redirect to login",
                              "confirmationMessage": "Your session has expired. Follow the login prompt to return to your submission form. You must upload your files again to successfully deposit your thesis, even if you have already uploaded your files.",
                              "confirmationTitle": "Session Expired",
                            }
                          }
                          onAction={[MockFunction]}
                          onRef={[Function]}
                          showAlternateActionButton={false}
                        >
                          <WithStyles(ForwardRef(Dialog))
                            open={false}
                            style={
                              Object {
                                "padding": 6,
                              }
                            }
                          >
                            <ForwardRef(Dialog)
                              classes={
                                Object {
                                  "container": "MuiDialog-container",
                                  "paper": "MuiDialog-paper",
                                  "paperFullScreen": "MuiDialog-paperFullScreen",
                                  "paperFullWidth": "MuiDialog-paperFullWidth",
                                  "paperScrollBody": "MuiDialog-paperScrollBody",
                                  "paperScrollPaper": "MuiDialog-paperScrollPaper",
                                  "paperWidthFalse": "MuiDialog-paperWidthFalse",
                                  "paperWidthLg": "MuiDialog-paperWidthLg",
                                  "paperWidthMd": "MuiDialog-paperWidthMd",
                                  "paperWidthSm": "MuiDialog-paperWidthSm",
                                  "paperWidthXl": "MuiDialog-paperWidthXl",
                                  "paperWidthXs": "MuiDialog-paperWidthXs",
                                  "root": "MuiDialog-root",
                                  "scrollBody": "MuiDialog-scrollBody",
                                  "scrollPaper": "MuiDialog-scrollPaper",
                                }
                              }
                              open={false}
                              style={
                                Object {
                                  "padding": 6,
                                }
                              }
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDialog-root"
                                closeAfterTransition={true}
                                disableEscapeKeyDown={false}
                                open={false}
                                style={
                                  Object {
                                    "padding": 6,
                                  }
                                }
                              />
                            </ForwardRef(Dialog)>
                          </WithStyles(ForwardRef(Dialog))>
                        </ConfirmDialogBox>
                      </WithStyles(ConfirmDialogBox)>
                      <AppAlert />
                      <Suspense
                        fallback={
                          <ContentLoader
                            message="Loading content"
                          />
                        }
                      >
                        <Switch>
                          <Route
                            component={[Function]}
                            computedMatch={
                              Object {
                                "isExact": true,
                                "params": Object {},
                                "path": "/",
                                "url": "/",
                              }
                            }
                            exact={true}
                            key="route_2"
                            location={
                              Object {
                                "hash": "",
                                "key": "testKey",
                                "pathname": "/",
                                "search": "",
                              }
                            }
                            pageTitle="eSpace"
                            path="/"
                          >
                            <Index
                              history={
                                Object {
                                  "action": "POP",
                                  "block": [Function],
                                  "canGo": [Function],
                                  "createHref": [Function],
                                  "entries": Array [
                                    Object {
                                      "hash": "",
                                      "key": "testKey",
                                      "pathname": "/",
                                      "search": "",
                                    },
                                  ],
                                  "go": [Function],
                                  "goBack": [Function],
                                  "goForward": [Function],
                                  "index": 0,
                                  "length": 1,
                                  "listen": [Function],
                                  "location": Object {
                                    "hash": "",
                                    "key": "testKey",
                                    "pathname": "/",
                                    "search": "",
                                  },
                                  "push": [Function],
                                  "replace": [Function],
                                }
                              }
                              location={
                                Object {
                                  "hash": "",
                                  "key": "testKey",
                                  "pathname": "/",
                                  "search": "",
                                }
                              }
                              match={
                                Object {
                                  "isExact": true,
                                  "params": Object {},
                                  "path": "/",
                                  "url": "/",
                                }
                              }
                            >
                              <WithStyles(IndexComponent)
                                history={
                                  Object {
                                    "action": "POP",
                                    "block": [Function],
                                    "canGo": [Function],
                                    "createHref": [Function],
                                    "entries": Array [
                                      Object {
                                        "hash": "",
                                        "key": "testKey",
                                        "pathname": "/",
                                        "search": "",
                                      },
                                    ],
                                    "go": [Function],
                                    "goBack": [Function],
                                    "goForward": [Function],
                                    "index": 0,
                                    "length": 1,
                                    "listen": [Function],
                                    "location": Object {
                                      "hash": "",
                                      "key": "testKey",
                                      "pathname": "/",
                                      "search": "",
                                    },
                                    "push": [Function],
                                    "replace": [Function],
                                  }
                                }
                                location={
                                  Object {
                                    "hash": "",
                                    "key": "testKey",
                                    "pathname": "/",
                                    "search": "",
                                  }
                                }
                                match={
                                  Object {
                                    "isExact": true,
                                    "params": Object {},
                                    "path": "/",
                                    "url": "/",
                                  }
                                }
                              >
                                <IndexComponent
                                  classes={Object {}}
                                  history={
                                    Object {
                                      "action": "POP",
                                      "block": [Function],
                                      "canGo": [Function],
                                      "createHref": [Function],
                                      "entries": Array [
                                        Object {
                                          "hash": "",
                                          "key": "testKey",
                                          "pathname": "/",
                                          "search": "",
                                        },
                                      ],
                                      "go": [Function],
                                      "goBack": [Function],
                                      "goForward": [Function],
                                      "index": 0,
                                      "length": 1,
                                      "listen": [Function],
                                      "location": Object {
                                        "hash": "",
                                        "key": "testKey",
                                        "pathname": "/",
                                        "search": "",
                                      },
                                      "push": [Function],
                                      "replace": [Function],
                                    }
                                  }
                                  location={
                                    Object {
                                      "hash": "",
                                      "key": "testKey",
                                      "pathname": "/",
                                      "search": "",
                                    }
                                  }
                                  match={
                                    Object {
                                      "isExact": true,
                                      "params": Object {},
                                      "path": "/",
                                      "url": "/",
                                    }
                                  }
                                  theme={
                                    Object {
                                      "breakpoints": Object {
                                        "between": [Function],
                                        "down": [Function],
                                        "keys": Array [
                                          "xs",
                                          "sm",
                                          "md",
                                          "lg",
                                          "xl",
                                        ],
                                        "only": [Function],
                                        "up": [Function],
                                        "values": Object {
                                          "lg": 1280,
                                          "md": 960,
                                          "sm": 600,
                                          "xl": 1920,
                                          "xs": 0,
                                        },
                                        "width": [Function],
                                      },
                                      "direction": "ltr",
                                      "graphs": Object {
                                        "color1": "#d72865",
                                        "color2": "#1e7d94",
                                        "color3": "#49075E",
                                        "color4": "#468fcc",
                                        "color5": "#f28620",
                                        "color6": "#333333",
                                        "color7": "#595959",
                                      },
                                      "hexToRGBA": [Function],
                                      "mixins": Object {
                                        "gutters": [Function],
                                        "toolbar": Object {
                                          "@media (min-width:0px) and (orientation: landscape)": Object {
                                            "minHeight": 48,
                                          },
                                          "@media (min-width:600px)": Object {
                                            "minHeight": 64,
                                          },
                                          "minHeight": 56,
                                        },
                                      },
                                      "overrides": Object {
                                        "MUIDataTable": Object {
                                          "paper": Object {
                                            "boxShadow": "none",
                                            "margin": 0,
                                            "padding": 0,
                                          },
                                        },
                                        "MuiFormLabel": Object {
                                          "root": Object {
                                            "lineHeight": "normal",
                                            "overflow": "hidden",
                                            "textOverflow": "ellipsis",
                                            "whiteSpace": "nowrap",
                                            "width": "100%",
                                          },
                                        },
                                        "MuiIconButton": Object {
                                          "colorInherit": Object {
                                            "color": "none",
                                          },
                                        },
                                        "MuiInput": Object {
                                          "formControl": Object {
                                            "label + &": Object {
                                              "marginTop": 17,
                                            },
                                          },
                                        },
                                        "MuiMenuItem": Object {
                                          "root": Object {
                                            "&$selected": Object {
                                              "backgroundColor": "#4085C6 !important",
                                              "color": "#FFFFFF",
                                            },
                                          },
                                        },
                                      },
                                      "palette": Object {
                                        "accent": Object {
                                          "dark": "#2a557d",
                                          "light": "#54acff",
                                          "main": "#316799",
                                        },
                                        "action": Object {
                                          "activatedOpacity": 0.12,
                                          "active": "rgba(0, 0, 0, 0.54)",
                                          "disabled": "rgba(0, 0, 0, 0.26)",
                                          "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                          "disabledOpacity": 0.38,
                                          "focus": "rgba(0, 0, 0, 0.12)",
                                          "focusOpacity": 0.12,
                                          "hover": "rgba(0, 0, 0, 0.04)",
                                          "hoverOpacity": 0.04,
                                          "selected": "rgba(0, 0, 0, 0.08)",
                                          "selectedOpacity": 0.08,
                                        },
                                        "augmentColor": [Function],
                                        "background": Object {
                                          "default": "#fafafa",
                                          "paper": "#fff",
                                        },
                                        "common": Object {
                                          "black": "#000",
                                          "white": "#fff",
                                        },
                                        "contrastThreshold": 3,
                                        "divider": "rgba(0, 0, 0, 0.12)",
                                        "error": Object {
                                          "contrastText": "#fff",
                                          "dark": "#790000",
                                          "light": "#ff0000",
                                          "main": "#c80000",
                                        },
                                        "getContrastText": [Function],
                                        "grey": Object {
                                          "100": "#f5f5f5",
                                          "200": "#eeeeee",
                                          "300": "#e0e0e0",
                                          "400": "#bdbdbd",
                                          "50": "#fafafa",
                                          "500": "#9e9e9e",
                                          "600": "#757575",
                                          "700": "#616161",
                                          "800": "#424242",
                                          "900": "#212121",
                                          "A100": "#d5d5d5",
                                          "A200": "#aaaaaa",
                                          "A400": "#303030",
                                          "A700": "#616161",
                                        },
                                        "info": Object {
                                          "contrastText": "#fff",
                                          "dark": "#1976d2",
                                          "light": "#64b5f6",
                                          "main": "#2196f3",
                                        },
                                        "primary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#3b1a59",
                                          "gradient": Object {
                                            "diagonal": Object {
                                              "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                              "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                            },
                                            "horizontal": Object {
                                              "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                              "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                            },
                                          },
                                          "light": "#962A8B",
                                          "main": "#51247A",
                                        },
                                        "secondary": Object {
                                          "contrastText": "#fff",
                                          "dark": "#333333",
                                          "light": "#f2f2f2",
                                          "main": "#595959",
                                        },
                                        "success": Object {
                                          "contrastText": "#fff",
                                          "dark": "#005000",
                                          "light": "#00a700",
                                          "main": "#007200",
                                        },
                                        "text": Object {
                                          "disabled": "rgba(0, 0, 0, 0.38)",
                                          "hint": "rgba(0, 0, 0, 0.38)",
                                          "primary": "rgba(0, 0, 0, 0.87)",
                                          "secondary": "rgba(0, 0, 0, 0.54)",
                                        },
                                        "tonalOffset": 0.2,
                                        "type": "light",
                                        "warning": Object {
                                          "contrastText": "#fff",
                                          "dark": "#542400",
                                          "light": "#ff9a57",
                                          "main": "#bf5000",
                                        },
                                        "white": Object {
                                          "main": "#FFFFFF",
                                        },
                                      },
                                      "props": Object {},
                                      "shadows": Array [
                                        "none",
                                        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                      ],
                                      "shape": Object {
                                        "borderRadius": 4,
                                      },
                                      "spacing": [Function],
                                      "status": Object {
                                        "danger": "#f44336",
                                        "warning": "#ff9800",
                                      },
                                      "transitions": Object {
                                        "create": [Function],
                                        "duration": Object {
                                          "complex": 375,
                                          "enteringScreen": 225,
                                          "leavingScreen": 195,
                                          "short": 250,
                                          "shorter": 200,
                                          "shortest": 150,
                                          "standard": 300,
                                        },
                                        "easing": Object {
                                          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                        },
                                        "getAutoHeightDuration": [Function],
                                      },
                                      "typography": Object {
                                        "body1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.5,
                                        },
                                        "body2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.01071em",
                                          "lineHeight": 1.43,
                                        },
                                        "button": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.02857em",
                                          "lineHeight": 1.75,
                                          "textTransform": "uppercase",
                                        },
                                        "caption": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.03333em",
                                          "lineHeight": 1.66,
                                        },
                                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                        "fontSize": 14,
                                        "fontWeightBold": 700,
                                        "fontWeightLight": 200,
                                        "fontWeightMedium": 400,
                                        "fontWeightRegular": 300,
                                        "h1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "6rem",
                                          "fontWeight": 200,
                                          "letterSpacing": "-0.01562em",
                                          "lineHeight": 1.167,
                                        },
                                        "h2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3.75rem",
                                          "fontWeight": 200,
                                          "letterSpacing": "-0.00833em",
                                          "lineHeight": 1.2,
                                        },
                                        "h3": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "3rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.167,
                                        },
                                        "h4": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "2.125rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.00735em",
                                          "lineHeight": 1.235,
                                        },
                                        "h5": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.5rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0em",
                                          "lineHeight": 1.334,
                                        },
                                        "h6": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1.25rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.0075em",
                                          "lineHeight": 1.6,
                                        },
                                        "htmlFontSize": 16,
                                        "overline": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.75rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.08333em",
                                          "lineHeight": 2.66,
                                          "textTransform": "uppercase",
                                        },
                                        "pxToRem": [Function],
                                        "round": [Function],
                                        "subtitle1": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "1rem",
                                          "fontWeight": 300,
                                          "letterSpacing": "0.00938em",
                                          "lineHeight": 1.75,
                                        },
                                        "subtitle2": Object {
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": "0.875rem",
                                          "fontWeight": 400,
                                          "letterSpacing": "0.00714em",
                                          "lineHeight": 1.57,
                                        },
                                        "suppressDeprecationWarnings": true,
                                        "useNextVariants": true,
                                      },
                                      "zIndex": Object {
                                        "appBar": 1100,
                                        "drawer": 1200,
                                        "mobileStepper": 1000,
                                        "modal": 1300,
                                        "snackbar": 1400,
                                        "speedDial": 1050,
                                        "tooltip": 1500,
                                      },
                                      Symbol(mui.nested): false,
                                    }
                                  }
                                >
                                  <StandardPage>
                                    <WithStyles(Page)>
                                      <Page
                                        classes={
                                          Object {
                                            "helpIcon": "Page-helpIcon-26",
                                            "layoutCard": "Page-layoutCard-24",
                                            "layoutTitle": "Page-layoutTitle-25",
                                          }
                                        }
                                        theme={
                                          Object {
                                            "breakpoints": Object {
                                              "between": [Function],
                                              "down": [Function],
                                              "keys": Array [
                                                "xs",
                                                "sm",
                                                "md",
                                                "lg",
                                                "xl",
                                              ],
                                              "only": [Function],
                                              "up": [Function],
                                              "values": Object {
                                                "lg": 1280,
                                                "md": 960,
                                                "sm": 600,
                                                "xl": 1920,
                                                "xs": 0,
                                              },
                                              "width": [Function],
                                            },
                                            "direction": "ltr",
                                            "graphs": Object {
                                              "color1": "#d72865",
                                              "color2": "#1e7d94",
                                              "color3": "#49075E",
                                              "color4": "#468fcc",
                                              "color5": "#f28620",
                                              "color6": "#333333",
                                              "color7": "#595959",
                                            },
                                            "hexToRGBA": [Function],
                                            "mixins": Object {
                                              "gutters": [Function],
                                              "toolbar": Object {
                                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                                  "minHeight": 48,
                                                },
                                                "@media (min-width:600px)": Object {
                                                  "minHeight": 64,
                                                },
                                                "minHeight": 56,
                                              },
                                            },
                                            "overrides": Object {
                                              "MUIDataTable": Object {
                                                "paper": Object {
                                                  "boxShadow": "none",
                                                  "margin": 0,
                                                  "padding": 0,
                                                },
                                              },
                                              "MuiFormLabel": Object {
                                                "root": Object {
                                                  "lineHeight": "normal",
                                                  "overflow": "hidden",
                                                  "textOverflow": "ellipsis",
                                                  "whiteSpace": "nowrap",
                                                  "width": "100%",
                                                },
                                              },
                                              "MuiIconButton": Object {
                                                "colorInherit": Object {
                                                  "color": "none",
                                                },
                                              },
                                              "MuiInput": Object {
                                                "formControl": Object {
                                                  "label + &": Object {
                                                    "marginTop": 17,
                                                  },
                                                },
                                              },
                                              "MuiMenuItem": Object {
                                                "root": Object {
                                                  "&$selected": Object {
                                                    "backgroundColor": "#4085C6 !important",
                                                    "color": "#FFFFFF",
                                                  },
                                                },
                                              },
                                            },
                                            "palette": Object {
                                              "accent": Object {
                                                "dark": "#2a557d",
                                                "light": "#54acff",
                                                "main": "#316799",
                                              },
                                              "action": Object {
                                                "activatedOpacity": 0.12,
                                                "active": "rgba(0, 0, 0, 0.54)",
                                                "disabled": "rgba(0, 0, 0, 0.26)",
                                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                "disabledOpacity": 0.38,
                                                "focus": "rgba(0, 0, 0, 0.12)",
                                                "focusOpacity": 0.12,
                                                "hover": "rgba(0, 0, 0, 0.04)",
                                                "hoverOpacity": 0.04,
                                                "selected": "rgba(0, 0, 0, 0.08)",
                                                "selectedOpacity": 0.08,
                                              },
                                              "augmentColor": [Function],
                                              "background": Object {
                                                "default": "#fafafa",
                                                "paper": "#fff",
                                              },
                                              "common": Object {
                                                "black": "#000",
                                                "white": "#fff",
                                              },
                                              "contrastThreshold": 3,
                                              "divider": "rgba(0, 0, 0, 0.12)",
                                              "error": Object {
                                                "contrastText": "#fff",
                                                "dark": "#790000",
                                                "light": "#ff0000",
                                                "main": "#c80000",
                                              },
                                              "getContrastText": [Function],
                                              "grey": Object {
                                                "100": "#f5f5f5",
                                                "200": "#eeeeee",
                                                "300": "#e0e0e0",
                                                "400": "#bdbdbd",
                                                "50": "#fafafa",
                                                "500": "#9e9e9e",
                                                "600": "#757575",
                                                "700": "#616161",
                                                "800": "#424242",
                                                "900": "#212121",
                                                "A100": "#d5d5d5",
                                                "A200": "#aaaaaa",
                                                "A400": "#303030",
                                                "A700": "#616161",
                                              },
                                              "info": Object {
                                                "contrastText": "#fff",
                                                "dark": "#1976d2",
                                                "light": "#64b5f6",
                                                "main": "#2196f3",
                                              },
                                              "primary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#3b1a59",
                                                "gradient": Object {
                                                  "diagonal": Object {
                                                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                  },
                                                  "horizontal": Object {
                                                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                  },
                                                },
                                                "light": "#962A8B",
                                                "main": "#51247A",
                                              },
                                              "secondary": Object {
                                                "contrastText": "#fff",
                                                "dark": "#333333",
                                                "light": "#f2f2f2",
                                                "main": "#595959",
                                              },
                                              "success": Object {
                                                "contrastText": "#fff",
                                                "dark": "#005000",
                                                "light": "#00a700",
                                                "main": "#007200",
                                              },
                                              "text": Object {
                                                "disabled": "rgba(0, 0, 0, 0.38)",
                                                "hint": "rgba(0, 0, 0, 0.38)",
                                                "primary": "rgba(0, 0, 0, 0.87)",
                                                "secondary": "rgba(0, 0, 0, 0.54)",
                                              },
                                              "tonalOffset": 0.2,
                                              "type": "light",
                                              "warning": Object {
                                                "contrastText": "#fff",
                                                "dark": "#542400",
                                                "light": "#ff9a57",
                                                "main": "#bf5000",
                                              },
                                              "white": Object {
                                                "main": "#FFFFFF",
                                              },
                                            },
                                            "props": Object {},
                                            "shadows": Array [
                                              "none",
                                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                            ],
                                            "shape": Object {
                                              "borderRadius": 4,
                                            },
                                            "spacing": [Function],
                                            "status": Object {
                                              "danger": "#f44336",
                                              "warning": "#ff9800",
                                            },
                                            "transitions": Object {
                                              "create": [Function],
                                              "duration": Object {
                                                "complex": 375,
                                                "enteringScreen": 225,
                                                "leavingScreen": 195,
                                                "short": 250,
                                                "shorter": 200,
                                                "shortest": 150,
                                                "standard": 300,
                                              },
                                              "easing": Object {
                                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                              },
                                              "getAutoHeightDuration": [Function],
                                            },
                                            "typography": Object {
                                              "body1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.5,
                                              },
                                              "body2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.01071em",
                                                "lineHeight": 1.43,
                                              },
                                              "button": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.02857em",
                                                "lineHeight": 1.75,
                                                "textTransform": "uppercase",
                                              },
                                              "caption": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.03333em",
                                                "lineHeight": 1.66,
                                              },
                                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                              "fontSize": 14,
                                              "fontWeightBold": 700,
                                              "fontWeightLight": 200,
                                              "fontWeightMedium": 400,
                                              "fontWeightRegular": 300,
                                              "h1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "6rem",
                                                "fontWeight": 200,
                                                "letterSpacing": "-0.01562em",
                                                "lineHeight": 1.167,
                                              },
                                              "h2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3.75rem",
                                                "fontWeight": 200,
                                                "letterSpacing": "-0.00833em",
                                                "lineHeight": 1.2,
                                              },
                                              "h3": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "3rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.167,
                                              },
                                              "h4": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "2.125rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.00735em",
                                                "lineHeight": 1.235,
                                              },
                                              "h5": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.5rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0em",
                                                "lineHeight": 1.334,
                                              },
                                              "h6": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1.25rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.0075em",
                                                "lineHeight": 1.6,
                                              },
                                              "htmlFontSize": 16,
                                              "overline": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.75rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.08333em",
                                                "lineHeight": 2.66,
                                                "textTransform": "uppercase",
                                              },
                                              "pxToRem": [Function],
                                              "round": [Function],
                                              "subtitle1": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "1rem",
                                                "fontWeight": 300,
                                                "letterSpacing": "0.00938em",
                                                "lineHeight": 1.75,
                                              },
                                              "subtitle2": Object {
                                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                "fontSize": "0.875rem",
                                                "fontWeight": 400,
                                                "letterSpacing": "0.00714em",
                                                "lineHeight": 1.57,
                                              },
                                              "suppressDeprecationWarnings": true,
                                              "useNextVariants": true,
                                            },
                                            "zIndex": Object {
                                              "appBar": 1100,
                                              "drawer": 1200,
                                              "mobileStepper": 1000,
                                              "modal": 1300,
                                              "snackbar": 1400,
                                              "speedDial": 1050,
                                              "tooltip": 1500,
                                            },
                                            Symbol(mui.nested): false,
                                          }
                                        }
                                      >
                                        <WithStyles(ForwardRef(Grid))
                                          className="StandardPage"
                                          container={true}
                                        >
                                          <ForwardRef(Grid)
                                            className="StandardPage"
                                            classes={
                                              Object {
                                                "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                "container": "MuiGrid-container",
                                                "direction-xs-column": "MuiGrid-direction-xs-column",
                                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                "grid-lg-1": "MuiGrid-grid-lg-1",
                                                "grid-lg-10": "MuiGrid-grid-lg-10",
                                                "grid-lg-11": "MuiGrid-grid-lg-11",
                                                "grid-lg-12": "MuiGrid-grid-lg-12",
                                                "grid-lg-2": "MuiGrid-grid-lg-2",
                                                "grid-lg-3": "MuiGrid-grid-lg-3",
                                                "grid-lg-4": "MuiGrid-grid-lg-4",
                                                "grid-lg-5": "MuiGrid-grid-lg-5",
                                                "grid-lg-6": "MuiGrid-grid-lg-6",
                                                "grid-lg-7": "MuiGrid-grid-lg-7",
                                                "grid-lg-8": "MuiGrid-grid-lg-8",
                                                "grid-lg-9": "MuiGrid-grid-lg-9",
                                                "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                "grid-lg-true": "MuiGrid-grid-lg-true",
                                                "grid-md-1": "MuiGrid-grid-md-1",
                                                "grid-md-10": "MuiGrid-grid-md-10",
                                                "grid-md-11": "MuiGrid-grid-md-11",
                                                "grid-md-12": "MuiGrid-grid-md-12",
                                                "grid-md-2": "MuiGrid-grid-md-2",
                                                "grid-md-3": "MuiGrid-grid-md-3",
                                                "grid-md-4": "MuiGrid-grid-md-4",
                                                "grid-md-5": "MuiGrid-grid-md-5",
                                                "grid-md-6": "MuiGrid-grid-md-6",
                                                "grid-md-7": "MuiGrid-grid-md-7",
                                                "grid-md-8": "MuiGrid-grid-md-8",
                                                "grid-md-9": "MuiGrid-grid-md-9",
                                                "grid-md-auto": "MuiGrid-grid-md-auto",
                                                "grid-md-true": "MuiGrid-grid-md-true",
                                                "grid-sm-1": "MuiGrid-grid-sm-1",
                                                "grid-sm-10": "MuiGrid-grid-sm-10",
                                                "grid-sm-11": "MuiGrid-grid-sm-11",
                                                "grid-sm-12": "MuiGrid-grid-sm-12",
                                                "grid-sm-2": "MuiGrid-grid-sm-2",
                                                "grid-sm-3": "MuiGrid-grid-sm-3",
                                                "grid-sm-4": "MuiGrid-grid-sm-4",
                                                "grid-sm-5": "MuiGrid-grid-sm-5",
                                                "grid-sm-6": "MuiGrid-grid-sm-6",
                                                "grid-sm-7": "MuiGrid-grid-sm-7",
                                                "grid-sm-8": "MuiGrid-grid-sm-8",
                                                "grid-sm-9": "MuiGrid-grid-sm-9",
                                                "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                "grid-sm-true": "MuiGrid-grid-sm-true",
                                                "grid-xl-1": "MuiGrid-grid-xl-1",
                                                "grid-xl-10": "MuiGrid-grid-xl-10",
                                                "grid-xl-11": "MuiGrid-grid-xl-11",
                                                "grid-xl-12": "MuiGrid-grid-xl-12",
                                                "grid-xl-2": "MuiGrid-grid-xl-2",
                                                "grid-xl-3": "MuiGrid-grid-xl-3",
                                                "grid-xl-4": "MuiGrid-grid-xl-4",
                                                "grid-xl-5": "MuiGrid-grid-xl-5",
                                                "grid-xl-6": "MuiGrid-grid-xl-6",
                                                "grid-xl-7": "MuiGrid-grid-xl-7",
                                                "grid-xl-8": "MuiGrid-grid-xl-8",
                                                "grid-xl-9": "MuiGrid-grid-xl-9",
                                                "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                "grid-xl-true": "MuiGrid-grid-xl-true",
                                                "grid-xs-1": "MuiGrid-grid-xs-1",
                                                "grid-xs-10": "MuiGrid-grid-xs-10",
                                                "grid-xs-11": "MuiGrid-grid-xs-11",
                                                "grid-xs-12": "MuiGrid-grid-xs-12",
                                                "grid-xs-2": "MuiGrid-grid-xs-2",
                                                "grid-xs-3": "MuiGrid-grid-xs-3",
                                                "grid-xs-4": "MuiGrid-grid-xs-4",
                                                "grid-xs-5": "MuiGrid-grid-xs-5",
                                                "grid-xs-6": "MuiGrid-grid-xs-6",
                                                "grid-xs-7": "MuiGrid-grid-xs-7",
                                                "grid-xs-8": "MuiGrid-grid-xs-8",
                                                "grid-xs-9": "MuiGrid-grid-xs-9",
                                                "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                "grid-xs-true": "MuiGrid-grid-xs-true",
                                                "item": "MuiGrid-item",
                                                "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                "root": "MuiGrid-root",
                                                "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                              }
                                            }
                                            container={true}
                                          >
                                            <div
                                              className="MuiGrid-root StandardPage MuiGrid-container"
                                            >
                                              <WithStyles(ForwardRef(Grid))
                                                item={true}
                                                xs={12}
                                              >
                                                <ForwardRef(Grid)
                                                  classes={
                                                    Object {
                                                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                      "container": "MuiGrid-container",
                                                      "direction-xs-column": "MuiGrid-direction-xs-column",
                                                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                      "grid-lg-1": "MuiGrid-grid-lg-1",
                                                      "grid-lg-10": "MuiGrid-grid-lg-10",
                                                      "grid-lg-11": "MuiGrid-grid-lg-11",
                                                      "grid-lg-12": "MuiGrid-grid-lg-12",
                                                      "grid-lg-2": "MuiGrid-grid-lg-2",
                                                      "grid-lg-3": "MuiGrid-grid-lg-3",
                                                      "grid-lg-4": "MuiGrid-grid-lg-4",
                                                      "grid-lg-5": "MuiGrid-grid-lg-5",
                                                      "grid-lg-6": "MuiGrid-grid-lg-6",
                                                      "grid-lg-7": "MuiGrid-grid-lg-7",
                                                      "grid-lg-8": "MuiGrid-grid-lg-8",
                                                      "grid-lg-9": "MuiGrid-grid-lg-9",
                                                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                      "grid-lg-true": "MuiGrid-grid-lg-true",
                                                      "grid-md-1": "MuiGrid-grid-md-1",
                                                      "grid-md-10": "MuiGrid-grid-md-10",
                                                      "grid-md-11": "MuiGrid-grid-md-11",
                                                      "grid-md-12": "MuiGrid-grid-md-12",
                                                      "grid-md-2": "MuiGrid-grid-md-2",
                                                      "grid-md-3": "MuiGrid-grid-md-3",
                                                      "grid-md-4": "MuiGrid-grid-md-4",
                                                      "grid-md-5": "MuiGrid-grid-md-5",
                                                      "grid-md-6": "MuiGrid-grid-md-6",
                                                      "grid-md-7": "MuiGrid-grid-md-7",
                                                      "grid-md-8": "MuiGrid-grid-md-8",
                                                      "grid-md-9": "MuiGrid-grid-md-9",
                                                      "grid-md-auto": "MuiGrid-grid-md-auto",
                                                      "grid-md-true": "MuiGrid-grid-md-true",
                                                      "grid-sm-1": "MuiGrid-grid-sm-1",
                                                      "grid-sm-10": "MuiGrid-grid-sm-10",
                                                      "grid-sm-11": "MuiGrid-grid-sm-11",
                                                      "grid-sm-12": "MuiGrid-grid-sm-12",
                                                      "grid-sm-2": "MuiGrid-grid-sm-2",
                                                      "grid-sm-3": "MuiGrid-grid-sm-3",
                                                      "grid-sm-4": "MuiGrid-grid-sm-4",
                                                      "grid-sm-5": "MuiGrid-grid-sm-5",
                                                      "grid-sm-6": "MuiGrid-grid-sm-6",
                                                      "grid-sm-7": "MuiGrid-grid-sm-7",
                                                      "grid-sm-8": "MuiGrid-grid-sm-8",
                                                      "grid-sm-9": "MuiGrid-grid-sm-9",
                                                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                      "grid-sm-true": "MuiGrid-grid-sm-true",
                                                      "grid-xl-1": "MuiGrid-grid-xl-1",
                                                      "grid-xl-10": "MuiGrid-grid-xl-10",
                                                      "grid-xl-11": "MuiGrid-grid-xl-11",
                                                      "grid-xl-12": "MuiGrid-grid-xl-12",
                                                      "grid-xl-2": "MuiGrid-grid-xl-2",
                                                      "grid-xl-3": "MuiGrid-grid-xl-3",
                                                      "grid-xl-4": "MuiGrid-grid-xl-4",
                                                      "grid-xl-5": "MuiGrid-grid-xl-5",
                                                      "grid-xl-6": "MuiGrid-grid-xl-6",
                                                      "grid-xl-7": "MuiGrid-grid-xl-7",
                                                      "grid-xl-8": "MuiGrid-grid-xl-8",
                                                      "grid-xl-9": "MuiGrid-grid-xl-9",
                                                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                      "grid-xl-true": "MuiGrid-grid-xl-true",
                                                      "grid-xs-1": "MuiGrid-grid-xs-1",
                                                      "grid-xs-10": "MuiGrid-grid-xs-10",
                                                      "grid-xs-11": "MuiGrid-grid-xs-11",
                                                      "grid-xs-12": "MuiGrid-grid-xs-12",
                                                      "grid-xs-2": "MuiGrid-grid-xs-2",
                                                      "grid-xs-3": "MuiGrid-grid-xs-3",
                                                      "grid-xs-4": "MuiGrid-grid-xs-4",
                                                      "grid-xs-5": "MuiGrid-grid-xs-5",
                                                      "grid-xs-6": "MuiGrid-grid-xs-6",
                                                      "grid-xs-7": "MuiGrid-grid-xs-7",
                                                      "grid-xs-8": "MuiGrid-grid-xs-8",
                                                      "grid-xs-9": "MuiGrid-grid-xs-9",
                                                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                      "grid-xs-true": "MuiGrid-grid-xs-true",
                                                      "item": "MuiGrid-item",
                                                      "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                      "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                      "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                      "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                      "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                      "root": "MuiGrid-root",
                                                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                    }
                                                  }
                                                  item={true}
                                                  xs={12}
                                                >
                                                  <div
                                                    className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                                                  />
                                                </ForwardRef(Grid)>
                                              </WithStyles(ForwardRef(Grid))>
                                              <WithStyles(ForwardRef(Grid))
                                                className="Page-layoutCard-24"
                                                item={true}
                                              >
                                                <ForwardRef(Grid)
                                                  className="Page-layoutCard-24"
                                                  classes={
                                                    Object {
                                                      "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                      "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                      "container": "MuiGrid-container",
                                                      "direction-xs-column": "MuiGrid-direction-xs-column",
                                                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                      "grid-lg-1": "MuiGrid-grid-lg-1",
                                                      "grid-lg-10": "MuiGrid-grid-lg-10",
                                                      "grid-lg-11": "MuiGrid-grid-lg-11",
                                                      "grid-lg-12": "MuiGrid-grid-lg-12",
                                                      "grid-lg-2": "MuiGrid-grid-lg-2",
                                                      "grid-lg-3": "MuiGrid-grid-lg-3",
                                                      "grid-lg-4": "MuiGrid-grid-lg-4",
                                                      "grid-lg-5": "MuiGrid-grid-lg-5",
                                                      "grid-lg-6": "MuiGrid-grid-lg-6",
                                                      "grid-lg-7": "MuiGrid-grid-lg-7",
                                                      "grid-lg-8": "MuiGrid-grid-lg-8",
                                                      "grid-lg-9": "MuiGrid-grid-lg-9",
                                                      "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                      "grid-lg-true": "MuiGrid-grid-lg-true",
                                                      "grid-md-1": "MuiGrid-grid-md-1",
                                                      "grid-md-10": "MuiGrid-grid-md-10",
                                                      "grid-md-11": "MuiGrid-grid-md-11",
                                                      "grid-md-12": "MuiGrid-grid-md-12",
                                                      "grid-md-2": "MuiGrid-grid-md-2",
                                                      "grid-md-3": "MuiGrid-grid-md-3",
                                                      "grid-md-4": "MuiGrid-grid-md-4",
                                                      "grid-md-5": "MuiGrid-grid-md-5",
                                                      "grid-md-6": "MuiGrid-grid-md-6",
                                                      "grid-md-7": "MuiGrid-grid-md-7",
                                                      "grid-md-8": "MuiGrid-grid-md-8",
                                                      "grid-md-9": "MuiGrid-grid-md-9",
                                                      "grid-md-auto": "MuiGrid-grid-md-auto",
                                                      "grid-md-true": "MuiGrid-grid-md-true",
                                                      "grid-sm-1": "MuiGrid-grid-sm-1",
                                                      "grid-sm-10": "MuiGrid-grid-sm-10",
                                                      "grid-sm-11": "MuiGrid-grid-sm-11",
                                                      "grid-sm-12": "MuiGrid-grid-sm-12",
                                                      "grid-sm-2": "MuiGrid-grid-sm-2",
                                                      "grid-sm-3": "MuiGrid-grid-sm-3",
                                                      "grid-sm-4": "MuiGrid-grid-sm-4",
                                                      "grid-sm-5": "MuiGrid-grid-sm-5",
                                                      "grid-sm-6": "MuiGrid-grid-sm-6",
                                                      "grid-sm-7": "MuiGrid-grid-sm-7",
                                                      "grid-sm-8": "MuiGrid-grid-sm-8",
                                                      "grid-sm-9": "MuiGrid-grid-sm-9",
                                                      "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                      "grid-sm-true": "MuiGrid-grid-sm-true",
                                                      "grid-xl-1": "MuiGrid-grid-xl-1",
                                                      "grid-xl-10": "MuiGrid-grid-xl-10",
                                                      "grid-xl-11": "MuiGrid-grid-xl-11",
                                                      "grid-xl-12": "MuiGrid-grid-xl-12",
                                                      "grid-xl-2": "MuiGrid-grid-xl-2",
                                                      "grid-xl-3": "MuiGrid-grid-xl-3",
                                                      "grid-xl-4": "MuiGrid-grid-xl-4",
                                                      "grid-xl-5": "MuiGrid-grid-xl-5",
                                                      "grid-xl-6": "MuiGrid-grid-xl-6",
                                                      "grid-xl-7": "MuiGrid-grid-xl-7",
                                                      "grid-xl-8": "MuiGrid-grid-xl-8",
                                                      "grid-xl-9": "MuiGrid-grid-xl-9",
                                                      "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                      "grid-xl-true": "MuiGrid-grid-xl-true",
                                                      "grid-xs-1": "MuiGrid-grid-xs-1",
                                                      "grid-xs-10": "MuiGrid-grid-xs-10",
                                                      "grid-xs-11": "MuiGrid-grid-xs-11",
                                                      "grid-xs-12": "MuiGrid-grid-xs-12",
                                                      "grid-xs-2": "MuiGrid-grid-xs-2",
                                                      "grid-xs-3": "MuiGrid-grid-xs-3",
                                                      "grid-xs-4": "MuiGrid-grid-xs-4",
                                                      "grid-xs-5": "MuiGrid-grid-xs-5",
                                                      "grid-xs-6": "MuiGrid-grid-xs-6",
                                                      "grid-xs-7": "MuiGrid-grid-xs-7",
                                                      "grid-xs-8": "MuiGrid-grid-xs-8",
                                                      "grid-xs-9": "MuiGrid-grid-xs-9",
                                                      "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                      "grid-xs-true": "MuiGrid-grid-xs-true",
                                                      "item": "MuiGrid-item",
                                                      "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                      "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                      "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                      "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                      "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                      "root": "MuiGrid-root",
                                                      "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                      "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                      "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                      "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                      "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                      "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                      "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                      "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                      "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                      "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                      "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                    }
                                                  }
                                                  item={true}
                                                >
                                                  <div
                                                    className="MuiGrid-root Page-layoutCard-24 MuiGrid-item"
                                                  >
                                                    <WithStyles(ForwardRef(Grid))
                                                      container={true}
                                                      spacing={3}
                                                    >
                                                      <ForwardRef(Grid)
                                                        classes={
                                                          Object {
                                                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                            "container": "MuiGrid-container",
                                                            "direction-xs-column": "MuiGrid-direction-xs-column",
                                                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                            "grid-lg-1": "MuiGrid-grid-lg-1",
                                                            "grid-lg-10": "MuiGrid-grid-lg-10",
                                                            "grid-lg-11": "MuiGrid-grid-lg-11",
                                                            "grid-lg-12": "MuiGrid-grid-lg-12",
                                                            "grid-lg-2": "MuiGrid-grid-lg-2",
                                                            "grid-lg-3": "MuiGrid-grid-lg-3",
                                                            "grid-lg-4": "MuiGrid-grid-lg-4",
                                                            "grid-lg-5": "MuiGrid-grid-lg-5",
                                                            "grid-lg-6": "MuiGrid-grid-lg-6",
                                                            "grid-lg-7": "MuiGrid-grid-lg-7",
                                                            "grid-lg-8": "MuiGrid-grid-lg-8",
                                                            "grid-lg-9": "MuiGrid-grid-lg-9",
                                                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                            "grid-lg-true": "MuiGrid-grid-lg-true",
                                                            "grid-md-1": "MuiGrid-grid-md-1",
                                                            "grid-md-10": "MuiGrid-grid-md-10",
                                                            "grid-md-11": "MuiGrid-grid-md-11",
                                                            "grid-md-12": "MuiGrid-grid-md-12",
                                                            "grid-md-2": "MuiGrid-grid-md-2",
                                                            "grid-md-3": "MuiGrid-grid-md-3",
                                                            "grid-md-4": "MuiGrid-grid-md-4",
                                                            "grid-md-5": "MuiGrid-grid-md-5",
                                                            "grid-md-6": "MuiGrid-grid-md-6",
                                                            "grid-md-7": "MuiGrid-grid-md-7",
                                                            "grid-md-8": "MuiGrid-grid-md-8",
                                                            "grid-md-9": "MuiGrid-grid-md-9",
                                                            "grid-md-auto": "MuiGrid-grid-md-auto",
                                                            "grid-md-true": "MuiGrid-grid-md-true",
                                                            "grid-sm-1": "MuiGrid-grid-sm-1",
                                                            "grid-sm-10": "MuiGrid-grid-sm-10",
                                                            "grid-sm-11": "MuiGrid-grid-sm-11",
                                                            "grid-sm-12": "MuiGrid-grid-sm-12",
                                                            "grid-sm-2": "MuiGrid-grid-sm-2",
                                                            "grid-sm-3": "MuiGrid-grid-sm-3",
                                                            "grid-sm-4": "MuiGrid-grid-sm-4",
                                                            "grid-sm-5": "MuiGrid-grid-sm-5",
                                                            "grid-sm-6": "MuiGrid-grid-sm-6",
                                                            "grid-sm-7": "MuiGrid-grid-sm-7",
                                                            "grid-sm-8": "MuiGrid-grid-sm-8",
                                                            "grid-sm-9": "MuiGrid-grid-sm-9",
                                                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                            "grid-sm-true": "MuiGrid-grid-sm-true",
                                                            "grid-xl-1": "MuiGrid-grid-xl-1",
                                                            "grid-xl-10": "MuiGrid-grid-xl-10",
                                                            "grid-xl-11": "MuiGrid-grid-xl-11",
                                                            "grid-xl-12": "MuiGrid-grid-xl-12",
                                                            "grid-xl-2": "MuiGrid-grid-xl-2",
                                                            "grid-xl-3": "MuiGrid-grid-xl-3",
                                                            "grid-xl-4": "MuiGrid-grid-xl-4",
                                                            "grid-xl-5": "MuiGrid-grid-xl-5",
                                                            "grid-xl-6": "MuiGrid-grid-xl-6",
                                                            "grid-xl-7": "MuiGrid-grid-xl-7",
                                                            "grid-xl-8": "MuiGrid-grid-xl-8",
                                                            "grid-xl-9": "MuiGrid-grid-xl-9",
                                                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                            "grid-xl-true": "MuiGrid-grid-xl-true",
                                                            "grid-xs-1": "MuiGrid-grid-xs-1",
                                                            "grid-xs-10": "MuiGrid-grid-xs-10",
                                                            "grid-xs-11": "MuiGrid-grid-xs-11",
                                                            "grid-xs-12": "MuiGrid-grid-xs-12",
                                                            "grid-xs-2": "MuiGrid-grid-xs-2",
                                                            "grid-xs-3": "MuiGrid-grid-xs-3",
                                                            "grid-xs-4": "MuiGrid-grid-xs-4",
                                                            "grid-xs-5": "MuiGrid-grid-xs-5",
                                                            "grid-xs-6": "MuiGrid-grid-xs-6",
                                                            "grid-xs-7": "MuiGrid-grid-xs-7",
                                                            "grid-xs-8": "MuiGrid-grid-xs-8",
                                                            "grid-xs-9": "MuiGrid-grid-xs-9",
                                                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                            "grid-xs-true": "MuiGrid-grid-xs-true",
                                                            "item": "MuiGrid-item",
                                                            "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                            "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                            "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                            "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                            "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                            "root": "MuiGrid-root",
                                                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                          }
                                                        }
                                                        container={true}
                                                        spacing={3}
                                                      >
                                                        <div
                                                          className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-3"
                                                        >
                                                          <WithStyles(ForwardRef(Grid))
                                                            item={true}
                                                            md={8}
                                                            xs={12}
                                                          >
                                                            <ForwardRef(Grid)
                                                              classes={
                                                                Object {
                                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                                  "container": "MuiGrid-container",
                                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                                  "item": "MuiGrid-item",
                                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                                  "root": "MuiGrid-root",
                                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                                }
                                                              }
                                                              item={true}
                                                              md={8}
                                                              xs={12}
                                                            >
                                                              <div
                                                                className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-8"
                                                              >
                                                                <withRouter(Connect(WithStyles(WithWidth(TopCitedPublicationsClass))))>
                                                                  <Connect(WithStyles(WithWidth(TopCitedPublicationsClass)))
                                                                    history={
                                                                      Object {
                                                                        "action": "POP",
                                                                        "block": [Function],
                                                                        "canGo": [Function],
                                                                        "createHref": [Function],
                                                                        "entries": Array [
                                                                          Object {
                                                                            "hash": "",
                                                                            "key": "testKey",
                                                                            "pathname": "/",
                                                                            "search": "",
                                                                          },
                                                                        ],
                                                                        "go": [Function],
                                                                        "goBack": [Function],
                                                                        "goForward": [Function],
                                                                        "index": 0,
                                                                        "length": 1,
                                                                        "listen": [Function],
                                                                        "location": Object {
                                                                          "hash": "",
                                                                          "key": "testKey",
                                                                          "pathname": "/",
                                                                          "search": "",
                                                                        },
                                                                        "push": [Function],
                                                                        "replace": [Function],
                                                                      }
                                                                    }
                                                                    location={
                                                                      Object {
                                                                        "hash": "",
                                                                        "key": "testKey",
                                                                        "pathname": "/",
                                                                        "search": "",
                                                                      }
                                                                    }
                                                                    match={
                                                                      Object {
                                                                        "isExact": true,
                                                                        "params": Object {},
                                                                        "path": "/",
                                                                        "url": "/",
                                                                      }
                                                                    }
                                                                  >
                                                                    <WithStyles(WithWidth(TopCitedPublicationsClass))
                                                                      actions={
                                                                        Object {
                                                                          "addAuthor": [Function],
                                                                          "addFavouriteSearch": [Function],
                                                                          "addMyEditorialAppointments": [Function],
                                                                          "addToFavourites": [Function],
                                                                          "addUser": [Function],
                                                                          "adminCreate": [Function],
                                                                          "adminReset": [Function],
                                                                          "adminUpdate": [Function],
                                                                          "bulkDeleteAuthorListItems": [Function],
                                                                          "bulkDeleteUserListItems": [Function],
                                                                          "changeAuthorId": [Function],
                                                                          "changeDisplayType": [Function],
                                                                          "changeSearchKeyValue": [Function],
                                                                          "checkForExistingAuthor": [Function],
                                                                          "checkForExistingFavouriteSearchAlias": [Function],
                                                                          "checkForExistingUser": [Function],
                                                                          "checkSession": [Function],
                                                                          "claimPublication": [Function],
                                                                          "clearAuthorsSuggestions": [Function],
                                                                          "clearCCCollectionsList": [Function],
                                                                          "clearClaimPublication": [Function],
                                                                          "clearDeleteRecord": [Function],
                                                                          "clearFixRecord": [Function],
                                                                          "clearJournalSearchKeywords": [Function],
                                                                          "clearMyEditorialAppointmentsAddStatus": [Function],
                                                                          "clearNewRecord": [Function],
                                                                          "clearRecordToView": [Function],
                                                                          "clearRedirectPath": [Function],
                                                                          "clearSearchQuery": [Function],
                                                                          "clearSessionExpiredFlag": [Function],
                                                                          "clearThirdPartyLookup": [Function],
                                                                          "collectionsList": [Function],
                                                                          "communitiesList": [Function],
                                                                          "copyToOrRemoveFromCollection": [Function],
                                                                          "countPossiblyYourPublications": [Function],
                                                                          "createBatchImport": [Function],
                                                                          "createCollection": [Function],
                                                                          "createCommunity": [Function],
                                                                          "createNewRecord": [Function],
                                                                          "createOrUpdateDoi": [Function],
                                                                          "createSearchPromise": [Function],
                                                                          "deleteAttachedFile": [Function],
                                                                          "deleteAuthorListItem": [Function],
                                                                          "deleteFavouriteSearchListItem": [Function],
                                                                          "deleteMyEditorialAppointmentsListItem": [Function],
                                                                          "deleteRecord": [Function],
                                                                          "deleteUserListItem": [Function],
                                                                          "dismissAppAlert": [Function],
                                                                          "exportAuthorPublications": [Function],
                                                                          "exportEspacePublications": [Function],
                                                                          "exportJournals": [Function],
                                                                          "exportPublications": [Function],
                                                                          "fixRecord": [Function],
                                                                          "getBatchImportDirectories": [Function],
                                                                          "getCollectionsListAPI": [Function],
                                                                          "getFavouriteSearchAlias": [Function],
                                                                          "getPreCheckError": [Function],
                                                                          "getSearchLookupApi": [Function],
                                                                          "getSherpaFromIssn": [Function],
                                                                          "getThirdPartyLookupApiUrl": [Function],
                                                                          "getUlrichsFromIssn": [Function],
                                                                          "hidePossiblyYourPublicationsLure": [Function],
                                                                          "hideRecord": [Function],
                                                                          "hideRecordErrorReset": [Function],
                                                                          "ingestFromScopus": [Function],
                                                                          "linkAuthorOrcidId": [Function],
                                                                          "loadAuthorList": [Function],
                                                                          "loadAuthorPublicationsStats": [Function],
                                                                          "loadBulkUpdatesList": [Function],
                                                                          "loadCCCollectionsList": [Function],
                                                                          "loadCollectionsList": [Function],
                                                                          "loadCommunitiesList": [Function],
                                                                          "loadCurrentAccount": [Function],
                                                                          "loadDetailedHistory": [Function],
                                                                          "loadFavouriteSearchList": [Function],
                                                                          "loadFullRecordToClaim": [Function],
                                                                          "loadJournal": [Function],
                                                                          "loadJournalLookup": [Function],
                                                                          "loadJournalSearchKeywords": [Function],
                                                                          "loadMyEditorialAppointmentsList": [Function],
                                                                          "loadNewsFeed": [Function],
                                                                          "loadOrcidSyncStatus": [Function],
                                                                          "loadPublicationList": [Function],
                                                                          "loadRecordToDelete": [Function],
                                                                          "loadRecordToFix": [Function],
                                                                          "loadRecordToView": [Function],
                                                                          "loadRecordVersionToView": [Function],
                                                                          "loadSearchKeyList": [Function],
                                                                          "loadThirdPartyResults": [Function],
                                                                          "loadUserList": [Function],
                                                                          "loadVocabulariesList": [Function],
                                                                          "logout": [Function],
                                                                          "mergeAvailableAuthoringData": [Function],
                                                                          "removeFromFavourites": [Function],
                                                                          "removeShadowSuffixFromTableNames": [Function],
                                                                          "requestMJLIngest": [Function],
                                                                          "requestOrcidSync": [Function],
                                                                          "resetDoi": [Function],
                                                                          "resetExportPublicationsStatus": [Function],
                                                                          "resetSavingAuthorState": [Function],
                                                                          "retrieveFavouriteJournals": [Function],
                                                                          "sanitiseData": [Function],
                                                                          "searchAuthorPublications": [Function],
                                                                          "searchAuthors": [Function],
                                                                          "searchEspacePublications": [Function],
                                                                          "searchJournals": [Function],
                                                                          "searchLatestPublications": [Function],
                                                                          "searchPossiblyYourPublications": [Function],
                                                                          "searchPublications": [Function],
                                                                          "searchTopCitedPublications": [Function],
                                                                          "searchTrendingPublications": [Function],
                                                                          "setClaimPublication": [Function],
                                                                          "setCollectionsArray": [Function],
                                                                          "setDeleteRecord": [Function],
                                                                          "setFixRecord": [Function],
                                                                          "setHideCulturalSensitivityStatement": [Function],
                                                                          "setRedirectPath": [Function],
                                                                          "showAppAlert": [Function],
                                                                          "submitThesis": [Function],
                                                                          "unclaimRecord": [Function],
                                                                          "unlockRecord": [Function],
                                                                          "unlockRecordToView": [Function],
                                                                          "updateAuthorListItem": [Function],
                                                                          "updateCollection": [Function],
                                                                          "updateCommunity": [Function],
                                                                          "updateCurrentAuthor": [Function],
                                                                          "updateDoi": [Function],
                                                                          "updateFavouriteSearchListItem": [Function],
                                                                          "updateIncompleteRecord": [Function],
                                                                          "updateMatchedRecordAuthoringData": [Function],
                                                                          "updateMyEditorialAppointmentsListItem": [Function],
                                                                          "updateUserListItem": [Function],
                                                                        }
                                                                      }
                                                                      history={
                                                                        Object {
                                                                          "action": "POP",
                                                                          "block": [Function],
                                                                          "canGo": [Function],
                                                                          "createHref": [Function],
                                                                          "entries": Array [
                                                                            Object {
                                                                              "hash": "",
                                                                              "key": "testKey",
                                                                              "pathname": "/",
                                                                              "search": "",
                                                                            },
                                                                          ],
                                                                          "go": [Function],
                                                                          "goBack": [Function],
                                                                          "goForward": [Function],
                                                                          "index": 0,
                                                                          "length": 1,
                                                                          "listen": [Function],
                                                                          "location": Object {
                                                                            "hash": "",
                                                                            "key": "testKey",
                                                                            "pathname": "/",
                                                                            "search": "",
                                                                          },
                                                                          "push": [Function],
                                                                          "replace": [Function],
                                                                        }
                                                                      }
                                                                      location={
                                                                        Object {
                                                                          "hash": "",
                                                                          "key": "testKey",
                                                                          "pathname": "/",
                                                                          "search": "",
                                                                        }
                                                                      }
                                                                      match={
                                                                        Object {
                                                                          "isExact": true,
                                                                          "params": Object {},
                                                                          "path": "/",
                                                                          "url": "/",
                                                                        }
                                                                      }
                                                                    >
                                                                      <WithWidth(TopCitedPublicationsClass)
                                                                        actions={
                                                                          Object {
                                                                            "addAuthor": [Function],
                                                                            "addFavouriteSearch": [Function],
                                                                            "addMyEditorialAppointments": [Function],
                                                                            "addToFavourites": [Function],
                                                                            "addUser": [Function],
                                                                            "adminCreate": [Function],
                                                                            "adminReset": [Function],
                                                                            "adminUpdate": [Function],
                                                                            "bulkDeleteAuthorListItems": [Function],
                                                                            "bulkDeleteUserListItems": [Function],
                                                                            "changeAuthorId": [Function],
                                                                            "changeDisplayType": [Function],
                                                                            "changeSearchKeyValue": [Function],
                                                                            "checkForExistingAuthor": [Function],
                                                                            "checkForExistingFavouriteSearchAlias": [Function],
                                                                            "checkForExistingUser": [Function],
                                                                            "checkSession": [Function],
                                                                            "claimPublication": [Function],
                                                                            "clearAuthorsSuggestions": [Function],
                                                                            "clearCCCollectionsList": [Function],
                                                                            "clearClaimPublication": [Function],
                                                                            "clearDeleteRecord": [Function],
                                                                            "clearFixRecord": [Function],
                                                                            "clearJournalSearchKeywords": [Function],
                                                                            "clearMyEditorialAppointmentsAddStatus": [Function],
                                                                            "clearNewRecord": [Function],
                                                                            "clearRecordToView": [Function],
                                                                            "clearRedirectPath": [Function],
                                                                            "clearSearchQuery": [Function],
                                                                            "clearSessionExpiredFlag": [Function],
                                                                            "clearThirdPartyLookup": [Function],
                                                                            "collectionsList": [Function],
                                                                            "communitiesList": [Function],
                                                                            "copyToOrRemoveFromCollection": [Function],
                                                                            "countPossiblyYourPublications": [Function],
                                                                            "createBatchImport": [Function],
                                                                            "createCollection": [Function],
                                                                            "createCommunity": [Function],
                                                                            "createNewRecord": [Function],
                                                                            "createOrUpdateDoi": [Function],
                                                                            "createSearchPromise": [Function],
                                                                            "deleteAttachedFile": [Function],
                                                                            "deleteAuthorListItem": [Function],
                                                                            "deleteFavouriteSearchListItem": [Function],
                                                                            "deleteMyEditorialAppointmentsListItem": [Function],
                                                                            "deleteRecord": [Function],
                                                                            "deleteUserListItem": [Function],
                                                                            "dismissAppAlert": [Function],
                                                                            "exportAuthorPublications": [Function],
                                                                            "exportEspacePublications": [Function],
                                                                            "exportJournals": [Function],
                                                                            "exportPublications": [Function],
                                                                            "fixRecord": [Function],
                                                                            "getBatchImportDirectories": [Function],
                                                                            "getCollectionsListAPI": [Function],
                                                                            "getFavouriteSearchAlias": [Function],
                                                                            "getPreCheckError": [Function],
                                                                            "getSearchLookupApi": [Function],
                                                                            "getSherpaFromIssn": [Function],
                                                                            "getThirdPartyLookupApiUrl": [Function],
                                                                            "getUlrichsFromIssn": [Function],
                                                                            "hidePossiblyYourPublicationsLure": [Function],
                                                                            "hideRecord": [Function],
                                                                            "hideRecordErrorReset": [Function],
                                                                            "ingestFromScopus": [Function],
                                                                            "linkAuthorOrcidId": [Function],
                                                                            "loadAuthorList": [Function],
                                                                            "loadAuthorPublicationsStats": [Function],
                                                                            "loadBulkUpdatesList": [Function],
                                                                            "loadCCCollectionsList": [Function],
                                                                            "loadCollectionsList": [Function],
                                                                            "loadCommunitiesList": [Function],
                                                                            "loadCurrentAccount": [Function],
                                                                            "loadDetailedHistory": [Function],
                                                                            "loadFavouriteSearchList": [Function],
                                                                            "loadFullRecordToClaim": [Function],
                                                                            "loadJournal": [Function],
                                                                            "loadJournalLookup": [Function],
                                                                            "loadJournalSearchKeywords": [Function],
                                                                            "loadMyEditorialAppointmentsList": [Function],
                                                                            "loadNewsFeed": [Function],
                                                                            "loadOrcidSyncStatus": [Function],
                                                                            "loadPublicationList": [Function],
                                                                            "loadRecordToDelete": [Function],
                                                                            "loadRecordToFix": [Function],
                                                                            "loadRecordToView": [Function],
                                                                            "loadRecordVersionToView": [Function],
                                                                            "loadSearchKeyList": [Function],
                                                                            "loadThirdPartyResults": [Function],
                                                                            "loadUserList": [Function],
                                                                            "loadVocabulariesList": [Function],
                                                                            "logout": [Function],
                                                                            "mergeAvailableAuthoringData": [Function],
                                                                            "removeFromFavourites": [Function],
                                                                            "removeShadowSuffixFromTableNames": [Function],
                                                                            "requestMJLIngest": [Function],
                                                                            "requestOrcidSync": [Function],
                                                                            "resetDoi": [Function],
                                                                            "resetExportPublicationsStatus": [Function],
                                                                            "resetSavingAuthorState": [Function],
                                                                            "retrieveFavouriteJournals": [Function],
                                                                            "sanitiseData": [Function],
                                                                            "searchAuthorPublications": [Function],
                                                                            "searchAuthors": [Function],
                                                                            "searchEspacePublications": [Function],
                                                                            "searchJournals": [Function],
                                                                            "searchLatestPublications": [Function],
                                                                            "searchPossiblyYourPublications": [Function],
                                                                            "searchPublications": [Function],
                                                                            "searchTopCitedPublications": [Function],
                                                                            "searchTrendingPublications": [Function],
                                                                            "setClaimPublication": [Function],
                                                                            "setCollectionsArray": [Function],
                                                                            "setDeleteRecord": [Function],
                                                                            "setFixRecord": [Function],
                                                                            "setHideCulturalSensitivityStatement": [Function],
                                                                            "setRedirectPath": [Function],
                                                                            "showAppAlert": [Function],
                                                                            "submitThesis": [Function],
                                                                            "unclaimRecord": [Function],
                                                                            "unlockRecord": [Function],
                                                                            "unlockRecordToView": [Function],
                                                                            "updateAuthorListItem": [Function],
                                                                            "updateCollection": [Function],
                                                                            "updateCommunity": [Function],
                                                                            "updateCurrentAuthor": [Function],
                                                                            "updateDoi": [Function],
                                                                            "updateFavouriteSearchListItem": [Function],
                                                                            "updateIncompleteRecord": [Function],
                                                                            "updateMatchedRecordAuthoringData": [Function],
                                                                            "updateMyEditorialAppointmentsListItem": [Function],
                                                                            "updateUserListItem": [Function],
                                                                          }
                                                                        }
                                                                        classes={
                                                                          Object {
                                                                            "tab": "WithWidth(TopCitedPublicationsClass)-tab-28",
                                                                            "tabIndicator": "WithWidth(TopCitedPublicationsClass)-tabIndicator-29",
                                                                            "tabs": "WithWidth(TopCitedPublicationsClass)-tabs-27",
                                                                          }
                                                                        }
                                                                        history={
                                                                          Object {
                                                                            "action": "POP",
                                                                            "block": [Function],
                                                                            "canGo": [Function],
                                                                            "createHref": [Function],
                                                                            "entries": Array [
                                                                              Object {
                                                                                "hash": "",
                                                                                "key": "testKey",
                                                                                "pathname": "/",
                                                                                "search": "",
                                                                              },
                                                                            ],
                                                                            "go": [Function],
                                                                            "goBack": [Function],
                                                                            "goForward": [Function],
                                                                            "index": 0,
                                                                            "length": 1,
                                                                            "listen": [Function],
                                                                            "location": Object {
                                                                              "hash": "",
                                                                              "key": "testKey",
                                                                              "pathname": "/",
                                                                              "search": "",
                                                                            },
                                                                            "push": [Function],
                                                                            "replace": [Function],
                                                                          }
                                                                        }
                                                                        location={
                                                                          Object {
                                                                            "hash": "",
                                                                            "key": "testKey",
                                                                            "pathname": "/",
                                                                            "search": "",
                                                                          }
                                                                        }
                                                                        match={
                                                                          Object {
                                                                            "isExact": true,
                                                                            "params": Object {},
                                                                            "path": "/",
                                                                            "url": "/",
                                                                          }
                                                                        }
                                                                      />
                                                                    </WithStyles(WithWidth(TopCitedPublicationsClass))>
                                                                  </Connect(WithStyles(WithWidth(TopCitedPublicationsClass)))>
                                                                </withRouter(Connect(WithStyles(WithWidth(TopCitedPublicationsClass))))>
                                                              </div>
                                                            </ForwardRef(Grid)>
                                                          </WithStyles(ForwardRef(Grid))>
                                                          <WithStyles(ForwardRef(Grid))
                                                            item={true}
                                                            md={4}
                                                            xs={12}
                                                          >
                                                            <ForwardRef(Grid)
                                                              classes={
                                                                Object {
                                                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                                  "container": "MuiGrid-container",
                                                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                                                  "grid-md-1": "MuiGrid-grid-md-1",
                                                                  "grid-md-10": "MuiGrid-grid-md-10",
                                                                  "grid-md-11": "MuiGrid-grid-md-11",
                                                                  "grid-md-12": "MuiGrid-grid-md-12",
                                                                  "grid-md-2": "MuiGrid-grid-md-2",
                                                                  "grid-md-3": "MuiGrid-grid-md-3",
                                                                  "grid-md-4": "MuiGrid-grid-md-4",
                                                                  "grid-md-5": "MuiGrid-grid-md-5",
                                                                  "grid-md-6": "MuiGrid-grid-md-6",
                                                                  "grid-md-7": "MuiGrid-grid-md-7",
                                                                  "grid-md-8": "MuiGrid-grid-md-8",
                                                                  "grid-md-9": "MuiGrid-grid-md-9",
                                                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                                                  "grid-md-true": "MuiGrid-grid-md-true",
                                                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                                                  "item": "MuiGrid-item",
                                                                  "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                                  "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                                  "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                                  "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                                  "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                                  "root": "MuiGrid-root",
                                                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                                }
                                                              }
                                                              item={true}
                                                              md={4}
                                                              xs={12}
                                                            >
                                                              <div
                                                                className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-md-4"
                                                              >
                                                                <WithStyles(ForwardRef(Grid))
                                                                  container={true}
                                                                  spacing={3}
                                                                >
                                                                  <ForwardRef(Grid)
                                                                    classes={
                                                                      Object {
                                                                        "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                                        "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                                        "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                                        "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                                        "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                                        "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                                        "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                                        "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                                        "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                                        "container": "MuiGrid-container",
                                                                        "direction-xs-column": "MuiGrid-direction-xs-column",
                                                                        "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                                        "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                                        "grid-lg-1": "MuiGrid-grid-lg-1",
                                                                        "grid-lg-10": "MuiGrid-grid-lg-10",
                                                                        "grid-lg-11": "MuiGrid-grid-lg-11",
                                                                        "grid-lg-12": "MuiGrid-grid-lg-12",
                                                                        "grid-lg-2": "MuiGrid-grid-lg-2",
                                                                        "grid-lg-3": "MuiGrid-grid-lg-3",
                                                                        "grid-lg-4": "MuiGrid-grid-lg-4",
                                                                        "grid-lg-5": "MuiGrid-grid-lg-5",
                                                                        "grid-lg-6": "MuiGrid-grid-lg-6",
                                                                        "grid-lg-7": "MuiGrid-grid-lg-7",
                                                                        "grid-lg-8": "MuiGrid-grid-lg-8",
                                                                        "grid-lg-9": "MuiGrid-grid-lg-9",
                                                                        "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                                        "grid-lg-true": "MuiGrid-grid-lg-true",
                                                                        "grid-md-1": "MuiGrid-grid-md-1",
                                                                        "grid-md-10": "MuiGrid-grid-md-10",
                                                                        "grid-md-11": "MuiGrid-grid-md-11",
                                                                        "grid-md-12": "MuiGrid-grid-md-12",
                                                                        "grid-md-2": "MuiGrid-grid-md-2",
                                                                        "grid-md-3": "MuiGrid-grid-md-3",
                                                                        "grid-md-4": "MuiGrid-grid-md-4",
                                                                        "grid-md-5": "MuiGrid-grid-md-5",
                                                                        "grid-md-6": "MuiGrid-grid-md-6",
                                                                        "grid-md-7": "MuiGrid-grid-md-7",
                                                                        "grid-md-8": "MuiGrid-grid-md-8",
                                                                        "grid-md-9": "MuiGrid-grid-md-9",
                                                                        "grid-md-auto": "MuiGrid-grid-md-auto",
                                                                        "grid-md-true": "MuiGrid-grid-md-true",
                                                                        "grid-sm-1": "MuiGrid-grid-sm-1",
                                                                        "grid-sm-10": "MuiGrid-grid-sm-10",
                                                                        "grid-sm-11": "MuiGrid-grid-sm-11",
                                                                        "grid-sm-12": "MuiGrid-grid-sm-12",
                                                                        "grid-sm-2": "MuiGrid-grid-sm-2",
                                                                        "grid-sm-3": "MuiGrid-grid-sm-3",
                                                                        "grid-sm-4": "MuiGrid-grid-sm-4",
                                                                        "grid-sm-5": "MuiGrid-grid-sm-5",
                                                                        "grid-sm-6": "MuiGrid-grid-sm-6",
                                                                        "grid-sm-7": "MuiGrid-grid-sm-7",
                                                                        "grid-sm-8": "MuiGrid-grid-sm-8",
                                                                        "grid-sm-9": "MuiGrid-grid-sm-9",
                                                                        "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                                        "grid-sm-true": "MuiGrid-grid-sm-true",
                                                                        "grid-xl-1": "MuiGrid-grid-xl-1",
                                                                        "grid-xl-10": "MuiGrid-grid-xl-10",
                                                                        "grid-xl-11": "MuiGrid-grid-xl-11",
                                                                        "grid-xl-12": "MuiGrid-grid-xl-12",
                                                                        "grid-xl-2": "MuiGrid-grid-xl-2",
                                                                        "grid-xl-3": "MuiGrid-grid-xl-3",
                                                                        "grid-xl-4": "MuiGrid-grid-xl-4",
                                                                        "grid-xl-5": "MuiGrid-grid-xl-5",
                                                                        "grid-xl-6": "MuiGrid-grid-xl-6",
                                                                        "grid-xl-7": "MuiGrid-grid-xl-7",
                                                                        "grid-xl-8": "MuiGrid-grid-xl-8",
                                                                        "grid-xl-9": "MuiGrid-grid-xl-9",
                                                                        "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                                        "grid-xl-true": "MuiGrid-grid-xl-true",
                                                                        "grid-xs-1": "MuiGrid-grid-xs-1",
                                                                        "grid-xs-10": "MuiGrid-grid-xs-10",
                                                                        "grid-xs-11": "MuiGrid-grid-xs-11",
                                                                        "grid-xs-12": "MuiGrid-grid-xs-12",
                                                                        "grid-xs-2": "MuiGrid-grid-xs-2",
                                                                        "grid-xs-3": "MuiGrid-grid-xs-3",
                                                                        "grid-xs-4": "MuiGrid-grid-xs-4",
                                                                        "grid-xs-5": "MuiGrid-grid-xs-5",
                                                                        "grid-xs-6": "MuiGrid-grid-xs-6",
                                                                        "grid-xs-7": "MuiGrid-grid-xs-7",
                                                                        "grid-xs-8": "MuiGrid-grid-xs-8",
                                                                        "grid-xs-9": "MuiGrid-grid-xs-9",
                                                                        "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                                        "grid-xs-true": "MuiGrid-grid-xs-true",
                                                                        "item": "MuiGrid-item",
                                                                        "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                                        "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                                        "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                                        "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                                        "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                                        "root": "MuiGrid-root",
                                                                        "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                                        "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                                        "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                                        "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                                        "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                                        "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                                        "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                                        "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                                        "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                                        "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                                        "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                                        "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                                        "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                                      }
                                                                    }
                                                                    container={true}
                                                                    spacing={3}
                                                                  >
                                                                    <div
                                                                      className="MuiGrid-root MuiGrid-container MuiGrid-spacing-xs-3"
                                                                    >
                                                                      <WithStyles(ForwardRef(Grid))
                                                                        item={true}
                                                                        xs={12}
                                                                      >
                                                                        <ForwardRef(Grid)
                                                                          classes={
                                                                            Object {
                                                                              "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                                              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                                              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                                              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                                              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                                              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                                              "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                                              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                                              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                                              "container": "MuiGrid-container",
                                                                              "direction-xs-column": "MuiGrid-direction-xs-column",
                                                                              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                                              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                                              "grid-lg-1": "MuiGrid-grid-lg-1",
                                                                              "grid-lg-10": "MuiGrid-grid-lg-10",
                                                                              "grid-lg-11": "MuiGrid-grid-lg-11",
                                                                              "grid-lg-12": "MuiGrid-grid-lg-12",
                                                                              "grid-lg-2": "MuiGrid-grid-lg-2",
                                                                              "grid-lg-3": "MuiGrid-grid-lg-3",
                                                                              "grid-lg-4": "MuiGrid-grid-lg-4",
                                                                              "grid-lg-5": "MuiGrid-grid-lg-5",
                                                                              "grid-lg-6": "MuiGrid-grid-lg-6",
                                                                              "grid-lg-7": "MuiGrid-grid-lg-7",
                                                                              "grid-lg-8": "MuiGrid-grid-lg-8",
                                                                              "grid-lg-9": "MuiGrid-grid-lg-9",
                                                                              "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                                              "grid-lg-true": "MuiGrid-grid-lg-true",
                                                                              "grid-md-1": "MuiGrid-grid-md-1",
                                                                              "grid-md-10": "MuiGrid-grid-md-10",
                                                                              "grid-md-11": "MuiGrid-grid-md-11",
                                                                              "grid-md-12": "MuiGrid-grid-md-12",
                                                                              "grid-md-2": "MuiGrid-grid-md-2",
                                                                              "grid-md-3": "MuiGrid-grid-md-3",
                                                                              "grid-md-4": "MuiGrid-grid-md-4",
                                                                              "grid-md-5": "MuiGrid-grid-md-5",
                                                                              "grid-md-6": "MuiGrid-grid-md-6",
                                                                              "grid-md-7": "MuiGrid-grid-md-7",
                                                                              "grid-md-8": "MuiGrid-grid-md-8",
                                                                              "grid-md-9": "MuiGrid-grid-md-9",
                                                                              "grid-md-auto": "MuiGrid-grid-md-auto",
                                                                              "grid-md-true": "MuiGrid-grid-md-true",
                                                                              "grid-sm-1": "MuiGrid-grid-sm-1",
                                                                              "grid-sm-10": "MuiGrid-grid-sm-10",
                                                                              "grid-sm-11": "MuiGrid-grid-sm-11",
                                                                              "grid-sm-12": "MuiGrid-grid-sm-12",
                                                                              "grid-sm-2": "MuiGrid-grid-sm-2",
                                                                              "grid-sm-3": "MuiGrid-grid-sm-3",
                                                                              "grid-sm-4": "MuiGrid-grid-sm-4",
                                                                              "grid-sm-5": "MuiGrid-grid-sm-5",
                                                                              "grid-sm-6": "MuiGrid-grid-sm-6",
                                                                              "grid-sm-7": "MuiGrid-grid-sm-7",
                                                                              "grid-sm-8": "MuiGrid-grid-sm-8",
                                                                              "grid-sm-9": "MuiGrid-grid-sm-9",
                                                                              "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                                              "grid-sm-true": "MuiGrid-grid-sm-true",
                                                                              "grid-xl-1": "MuiGrid-grid-xl-1",
                                                                              "grid-xl-10": "MuiGrid-grid-xl-10",
                                                                              "grid-xl-11": "MuiGrid-grid-xl-11",
                                                                              "grid-xl-12": "MuiGrid-grid-xl-12",
                                                                              "grid-xl-2": "MuiGrid-grid-xl-2",
                                                                              "grid-xl-3": "MuiGrid-grid-xl-3",
                                                                              "grid-xl-4": "MuiGrid-grid-xl-4",
                                                                              "grid-xl-5": "MuiGrid-grid-xl-5",
                                                                              "grid-xl-6": "MuiGrid-grid-xl-6",
                                                                              "grid-xl-7": "MuiGrid-grid-xl-7",
                                                                              "grid-xl-8": "MuiGrid-grid-xl-8",
                                                                              "grid-xl-9": "MuiGrid-grid-xl-9",
                                                                              "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                                              "grid-xl-true": "MuiGrid-grid-xl-true",
                                                                              "grid-xs-1": "MuiGrid-grid-xs-1",
                                                                              "grid-xs-10": "MuiGrid-grid-xs-10",
                                                                              "grid-xs-11": "MuiGrid-grid-xs-11",
                                                                              "grid-xs-12": "MuiGrid-grid-xs-12",
                                                                              "grid-xs-2": "MuiGrid-grid-xs-2",
                                                                              "grid-xs-3": "MuiGrid-grid-xs-3",
                                                                              "grid-xs-4": "MuiGrid-grid-xs-4",
                                                                              "grid-xs-5": "MuiGrid-grid-xs-5",
                                                                              "grid-xs-6": "MuiGrid-grid-xs-6",
                                                                              "grid-xs-7": "MuiGrid-grid-xs-7",
                                                                              "grid-xs-8": "MuiGrid-grid-xs-8",
                                                                              "grid-xs-9": "MuiGrid-grid-xs-9",
                                                                              "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                                              "grid-xs-true": "MuiGrid-grid-xs-true",
                                                                              "item": "MuiGrid-item",
                                                                              "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                                              "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                                              "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                                              "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                                              "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                                              "root": "MuiGrid-root",
                                                                              "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                                              "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                                              "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                                              "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                                              "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                                              "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                                              "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                                              "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                                              "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                                              "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                                              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                                              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                                              "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                                            }
                                                                          }
                                                                          item={true}
                                                                          xs={12}
                                                                        >
                                                                          <div
                                                                            className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                                                                          >
                                                                            <WhatIsEspace>
                                                                              <StandardCard
                                                                                primaryHeader={true}
                                                                                title="What is eSpace?"
                                                                              >
                                                                                <WithStyles(ForwardRef(Card))
                                                                                  className="makeStyles-card-30 StandardCard"
                                                                                  data-testid="standard-card-what-is-espace?"
                                                                                  id="standard-card-what-is-espace?"
                                                                                  style={Object {}}
                                                                                >
                                                                                  <ForwardRef(Card)
                                                                                    className="makeStyles-card-30 StandardCard"
                                                                                    classes={
                                                                                      Object {
                                                                                        "root": "MuiCard-root",
                                                                                      }
                                                                                    }
                                                                                    data-testid="standard-card-what-is-espace?"
                                                                                    id="standard-card-what-is-espace?"
                                                                                    style={Object {}}
                                                                                  >
                                                                                    <WithStyles(ForwardRef(Paper))
                                                                                      className="MuiCard-root makeStyles-card-30 StandardCard"
                                                                                      data-testid="standard-card-what-is-espace?"
                                                                                      elevation={1}
                                                                                      id="standard-card-what-is-espace?"
                                                                                      style={Object {}}
                                                                                    >
                                                                                      <ForwardRef(Paper)
                                                                                        className="MuiCard-root makeStyles-card-30 StandardCard"
                                                                                        classes={
                                                                                          Object {
                                                                                            "elevation0": "MuiPaper-elevation0",
                                                                                            "elevation1": "MuiPaper-elevation1",
                                                                                            "elevation10": "MuiPaper-elevation10",
                                                                                            "elevation11": "MuiPaper-elevation11",
                                                                                            "elevation12": "MuiPaper-elevation12",
                                                                                            "elevation13": "MuiPaper-elevation13",
                                                                                            "elevation14": "MuiPaper-elevation14",
                                                                                            "elevation15": "MuiPaper-elevation15",
                                                                                            "elevation16": "MuiPaper-elevation16",
                                                                                            "elevation17": "MuiPaper-elevation17",
                                                                                            "elevation18": "MuiPaper-elevation18",
                                                                                            "elevation19": "MuiPaper-elevation19",
                                                                                            "elevation2": "MuiPaper-elevation2",
                                                                                            "elevation20": "MuiPaper-elevation20",
                                                                                            "elevation21": "MuiPaper-elevation21",
                                                                                            "elevation22": "MuiPaper-elevation22",
                                                                                            "elevation23": "MuiPaper-elevation23",
                                                                                            "elevation24": "MuiPaper-elevation24",
                                                                                            "elevation3": "MuiPaper-elevation3",
                                                                                            "elevation4": "MuiPaper-elevation4",
                                                                                            "elevation5": "MuiPaper-elevation5",
                                                                                            "elevation6": "MuiPaper-elevation6",
                                                                                            "elevation7": "MuiPaper-elevation7",
                                                                                            "elevation8": "MuiPaper-elevation8",
                                                                                            "elevation9": "MuiPaper-elevation9",
                                                                                            "outlined": "MuiPaper-outlined",
                                                                                            "root": "MuiPaper-root",
                                                                                            "rounded": "MuiPaper-rounded",
                                                                                          }
                                                                                        }
                                                                                        data-testid="standard-card-what-is-espace?"
                                                                                        elevation={1}
                                                                                        id="standard-card-what-is-espace?"
                                                                                        style={Object {}}
                                                                                      >
                                                                                        <div
                                                                                          className="MuiPaper-root MuiCard-root makeStyles-card-30 StandardCard MuiPaper-elevation1 MuiPaper-rounded"
                                                                                          data-testid="standard-card-what-is-espace?"
                                                                                          id="standard-card-what-is-espace?"
                                                                                          style={Object {}}
                                                                                        >
                                                                                          <WithStyles(ForwardRef(CardHeader))
                                                                                            action={false}
                                                                                            classes={
                                                                                              Object {
                                                                                                "root": "makeStyles-cardHeaderPrimary-32",
                                                                                                "title": "makeStyles-responsiveHeader-35",
                                                                                              }
                                                                                            }
                                                                                            style={Object {}}
                                                                                            title="What is eSpace?"
                                                                                            titleTypographyProps={
                                                                                              Object {
                                                                                                "color": "inherit",
                                                                                                "component": "h3",
                                                                                                "data-testid": "standard-card-what-is-espace?-header",
                                                                                                "id": "standard-card-what-is-espace?-header",
                                                                                                "variant": "h5",
                                                                                              }
                                                                                            }
                                                                                          >
                                                                                            <ForwardRef(CardHeader)
                                                                                              action={false}
                                                                                              classes={
                                                                                                Object {
                                                                                                  "action": "MuiCardHeader-action",
                                                                                                  "avatar": "MuiCardHeader-avatar",
                                                                                                  "content": "MuiCardHeader-content",
                                                                                                  "root": "MuiCardHeader-root makeStyles-cardHeaderPrimary-32",
                                                                                                  "subheader": "MuiCardHeader-subheader",
                                                                                                  "title": "MuiCardHeader-title makeStyles-responsiveHeader-35",
                                                                                                }
                                                                                              }
                                                                                              style={Object {}}
                                                                                              title="What is eSpace?"
                                                                                              titleTypographyProps={
                                                                                                Object {
                                                                                                  "color": "inherit",
                                                                                                  "component": "h3",
                                                                                                  "data-testid": "standard-card-what-is-espace?-header",
                                                                                                  "id": "standard-card-what-is-espace?-header",
                                                                                                  "variant": "h5",
                                                                                                }
                                                                                              }
                                                                                            >
                                                                                              <div
                                                                                                className="MuiCardHeader-root makeStyles-cardHeaderPrimary-32"
                                                                                                style={Object {}}
                                                                                              >
                                                                                                <div
                                                                                                  className="MuiCardHeader-content"
                                                                                                >
                                                                                                  <WithStyles(ForwardRef(Typography))
                                                                                                    className="MuiCardHeader-title makeStyles-responsiveHeader-35"
                                                                                                    color="inherit"
                                                                                                    component="h3"
                                                                                                    data-testid="standard-card-what-is-espace?-header"
                                                                                                    display="block"
                                                                                                    id="standard-card-what-is-espace?-header"
                                                                                                    variant="h5"
                                                                                                  >
                                                                                                    <ForwardRef(Typography)
                                                                                                      className="MuiCardHeader-title makeStyles-responsiveHeader-35"
                                                                                                      classes={
                                                                                                        Object {
                                                                                                          "alignCenter": "MuiTypography-alignCenter",
                                                                                                          "alignJustify": "MuiTypography-alignJustify",
                                                                                                          "alignLeft": "MuiTypography-alignLeft",
                                                                                                          "alignRight": "MuiTypography-alignRight",
                                                                                                          "body1": "MuiTypography-body1",
                                                                                                          "body2": "MuiTypography-body2",
                                                                                                          "button": "MuiTypography-button",
                                                                                                          "caption": "MuiTypography-caption",
                                                                                                          "colorError": "MuiTypography-colorError",
                                                                                                          "colorInherit": "MuiTypography-colorInherit",
                                                                                                          "colorPrimary": "MuiTypography-colorPrimary",
                                                                                                          "colorSecondary": "MuiTypography-colorSecondary",
                                                                                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                                                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                                                                          "displayBlock": "MuiTypography-displayBlock",
                                                                                                          "displayInline": "MuiTypography-displayInline",
                                                                                                          "gutterBottom": "MuiTypography-gutterBottom",
                                                                                                          "h1": "MuiTypography-h1",
                                                                                                          "h2": "MuiTypography-h2",
                                                                                                          "h3": "MuiTypography-h3",
                                                                                                          "h4": "MuiTypography-h4",
                                                                                                          "h5": "MuiTypography-h5",
                                                                                                          "h6": "MuiTypography-h6",
                                                                                                          "noWrap": "MuiTypography-noWrap",
                                                                                                          "overline": "MuiTypography-overline",
                                                                                                          "paragraph": "MuiTypography-paragraph",
                                                                                                          "root": "MuiTypography-root",
                                                                                                          "srOnly": "MuiTypography-srOnly",
                                                                                                          "subtitle1": "MuiTypography-subtitle1",
                                                                                                          "subtitle2": "MuiTypography-subtitle2",
                                                                                                        }
                                                                                                      }
                                                                                                      color="inherit"
                                                                                                      component="h3"
                                                                                                      data-testid="standard-card-what-is-espace?-header"
                                                                                                      display="block"
                                                                                                      id="standard-card-what-is-espace?-header"
                                                                                                      variant="h5"
                                                                                                    >
                                                                                                      <h3
                                                                                                        className="MuiTypography-root MuiCardHeader-title makeStyles-responsiveHeader-35 MuiTypography-h5 MuiTypography-colorInherit MuiTypography-displayBlock"
                                                                                                        data-testid="standard-card-what-is-espace?-header"
                                                                                                        id="standard-card-what-is-espace?-header"
                                                                                                      >
                                                                                                        What is eSpace?
                                                                                                      </h3>
                                                                                                    </ForwardRef(Typography)>
                                                                                                  </WithStyles(ForwardRef(Typography))>
                                                                                                </div>
                                                                                              </div>
                                                                                            </ForwardRef(CardHeader)>
                                                                                          </WithStyles(ForwardRef(CardHeader))>
                                                                                          <WithStyles(ForwardRef(CardContent))
                                                                                            className=""
                                                                                            data-testid="standard-card-what-is-espace?-content"
                                                                                            id="standard-card-what-is-espace?-content"
                                                                                          >
                                                                                            <ForwardRef(CardContent)
                                                                                              className=""
                                                                                              classes={
                                                                                                Object {
                                                                                                  "root": "MuiCardContent-root",
                                                                                                }
                                                                                              }
                                                                                              data-testid="standard-card-what-is-espace?-content"
                                                                                              id="standard-card-what-is-espace?-content"
                                                                                            >
                                                                                              <div
                                                                                                className="MuiCardContent-root"
                                                                                                data-testid="standard-card-what-is-espace?-content"
                                                                                                id="standard-card-what-is-espace?-content"
                                                                                              >
                                                                                                <WithStyles(ForwardRef(Typography))
                                                                                                  variant="body2"
                                                                                                >
                                                                                                  <ForwardRef(Typography)
                                                                                                    classes={
                                                                                                      Object {
                                                                                                        "alignCenter": "MuiTypography-alignCenter",
                                                                                                        "alignJustify": "MuiTypography-alignJustify",
                                                                                                        "alignLeft": "MuiTypography-alignLeft",
                                                                                                        "alignRight": "MuiTypography-alignRight",
                                                                                                        "body1": "MuiTypography-body1",
                                                                                                        "body2": "MuiTypography-body2",
                                                                                                        "button": "MuiTypography-button",
                                                                                                        "caption": "MuiTypography-caption",
                                                                                                        "colorError": "MuiTypography-colorError",
                                                                                                        "colorInherit": "MuiTypography-colorInherit",
                                                                                                        "colorPrimary": "MuiTypography-colorPrimary",
                                                                                                        "colorSecondary": "MuiTypography-colorSecondary",
                                                                                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                                                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                                                                        "displayBlock": "MuiTypography-displayBlock",
                                                                                                        "displayInline": "MuiTypography-displayInline",
                                                                                                        "gutterBottom": "MuiTypography-gutterBottom",
                                                                                                        "h1": "MuiTypography-h1",
                                                                                                        "h2": "MuiTypography-h2",
                                                                                                        "h3": "MuiTypography-h3",
                                                                                                        "h4": "MuiTypography-h4",
                                                                                                        "h5": "MuiTypography-h5",
                                                                                                        "h6": "MuiTypography-h6",
                                                                                                        "noWrap": "MuiTypography-noWrap",
                                                                                                        "overline": "MuiTypography-overline",
                                                                                                        "paragraph": "MuiTypography-paragraph",
                                                                                                        "root": "MuiTypography-root",
                                                                                                        "srOnly": "MuiTypography-srOnly",
                                                                                                        "subtitle1": "MuiTypography-subtitle1",
                                                                                                        "subtitle2": "MuiTypography-subtitle2",
                                                                                                      }
                                                                                                    }
                                                                                                    variant="body2"
                                                                                                  >
                                                                                                    <p
                                                                                                      className="MuiTypography-root MuiTypography-body2"
                                                                                                    >
                                                                                                      <span>
                                                                                                        The University of Queensland's institutional repository, UQ eSpace, aims to create global visibility and accessibility of UQ’s scholarly research by enhancing discovery of UQ research via search engines such as Google and Trove...
                                                                                                      </span>
                                                                                                      <Link
                                                                                                        to="/contact"
                                                                                                      >
                                                                                                        <LinkAnchor
                                                                                                          href="/contact"
                                                                                                          navigate={[Function]}
                                                                                                        >
                                                                                                          <a
                                                                                                            href="/contact"
                                                                                                            onClick={[Function]}
                                                                                                          >
                                                                                                             read more
                                                                                                          </a>
                                                                                                        </LinkAnchor>
                                                                                                      </Link>
                                                                                                    </p>
                                                                                                  </ForwardRef(Typography)>
                                                                                                </WithStyles(ForwardRef(Typography))>
                                                                                              </div>
                                                                                            </ForwardRef(CardContent)>
                                                                                          </WithStyles(ForwardRef(CardContent))>
                                                                                        </div>
                                                                                      </ForwardRef(Paper)>
                                                                                    </WithStyles(ForwardRef(Paper))>
                                                                                  </ForwardRef(Card)>
                                                                                </WithStyles(ForwardRef(Card))>
                                                                              </StandardCard>
                                                                            </WhatIsEspace>
                                                                          </div>
                                                                        </ForwardRef(Grid)>
                                                                      </WithStyles(ForwardRef(Grid))>
                                                                      <WithStyles(ForwardRef(Grid))
                                                                        item={true}
                                                                        xs={12}
                                                                      >
                                                                        <ForwardRef(Grid)
                                                                          classes={
                                                                            Object {
                                                                              "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                                                              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                                                              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                                                              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                                                              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                                                              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                                                              "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                                                              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                                                              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                                                              "container": "MuiGrid-container",
                                                                              "direction-xs-column": "MuiGrid-direction-xs-column",
                                                                              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                                                              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                                                              "grid-lg-1": "MuiGrid-grid-lg-1",
                                                                              "grid-lg-10": "MuiGrid-grid-lg-10",
                                                                              "grid-lg-11": "MuiGrid-grid-lg-11",
                                                                              "grid-lg-12": "MuiGrid-grid-lg-12",
                                                                              "grid-lg-2": "MuiGrid-grid-lg-2",
                                                                              "grid-lg-3": "MuiGrid-grid-lg-3",
                                                                              "grid-lg-4": "MuiGrid-grid-lg-4",
                                                                              "grid-lg-5": "MuiGrid-grid-lg-5",
                                                                              "grid-lg-6": "MuiGrid-grid-lg-6",
                                                                              "grid-lg-7": "MuiGrid-grid-lg-7",
                                                                              "grid-lg-8": "MuiGrid-grid-lg-8",
                                                                              "grid-lg-9": "MuiGrid-grid-lg-9",
                                                                              "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                                                              "grid-lg-true": "MuiGrid-grid-lg-true",
                                                                              "grid-md-1": "MuiGrid-grid-md-1",
                                                                              "grid-md-10": "MuiGrid-grid-md-10",
                                                                              "grid-md-11": "MuiGrid-grid-md-11",
                                                                              "grid-md-12": "MuiGrid-grid-md-12",
                                                                              "grid-md-2": "MuiGrid-grid-md-2",
                                                                              "grid-md-3": "MuiGrid-grid-md-3",
                                                                              "grid-md-4": "MuiGrid-grid-md-4",
                                                                              "grid-md-5": "MuiGrid-grid-md-5",
                                                                              "grid-md-6": "MuiGrid-grid-md-6",
                                                                              "grid-md-7": "MuiGrid-grid-md-7",
                                                                              "grid-md-8": "MuiGrid-grid-md-8",
                                                                              "grid-md-9": "MuiGrid-grid-md-9",
                                                                              "grid-md-auto": "MuiGrid-grid-md-auto",
                                                                              "grid-md-true": "MuiGrid-grid-md-true",
                                                                              "grid-sm-1": "MuiGrid-grid-sm-1",
                                                                              "grid-sm-10": "MuiGrid-grid-sm-10",
                                                                              "grid-sm-11": "MuiGrid-grid-sm-11",
                                                                              "grid-sm-12": "MuiGrid-grid-sm-12",
                                                                              "grid-sm-2": "MuiGrid-grid-sm-2",
                                                                              "grid-sm-3": "MuiGrid-grid-sm-3",
                                                                              "grid-sm-4": "MuiGrid-grid-sm-4",
                                                                              "grid-sm-5": "MuiGrid-grid-sm-5",
                                                                              "grid-sm-6": "MuiGrid-grid-sm-6",
                                                                              "grid-sm-7": "MuiGrid-grid-sm-7",
                                                                              "grid-sm-8": "MuiGrid-grid-sm-8",
                                                                              "grid-sm-9": "MuiGrid-grid-sm-9",
                                                                              "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                                                              "grid-sm-true": "MuiGrid-grid-sm-true",
                                                                              "grid-xl-1": "MuiGrid-grid-xl-1",
                                                                              "grid-xl-10": "MuiGrid-grid-xl-10",
                                                                              "grid-xl-11": "MuiGrid-grid-xl-11",
                                                                              "grid-xl-12": "MuiGrid-grid-xl-12",
                                                                              "grid-xl-2": "MuiGrid-grid-xl-2",
                                                                              "grid-xl-3": "MuiGrid-grid-xl-3",
                                                                              "grid-xl-4": "MuiGrid-grid-xl-4",
                                                                              "grid-xl-5": "MuiGrid-grid-xl-5",
                                                                              "grid-xl-6": "MuiGrid-grid-xl-6",
                                                                              "grid-xl-7": "MuiGrid-grid-xl-7",
                                                                              "grid-xl-8": "MuiGrid-grid-xl-8",
                                                                              "grid-xl-9": "MuiGrid-grid-xl-9",
                                                                              "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                                                              "grid-xl-true": "MuiGrid-grid-xl-true",
                                                                              "grid-xs-1": "MuiGrid-grid-xs-1",
                                                                              "grid-xs-10": "MuiGrid-grid-xs-10",
                                                                              "grid-xs-11": "MuiGrid-grid-xs-11",
                                                                              "grid-xs-12": "MuiGrid-grid-xs-12",
                                                                              "grid-xs-2": "MuiGrid-grid-xs-2",
                                                                              "grid-xs-3": "MuiGrid-grid-xs-3",
                                                                              "grid-xs-4": "MuiGrid-grid-xs-4",
                                                                              "grid-xs-5": "MuiGrid-grid-xs-5",
                                                                              "grid-xs-6": "MuiGrid-grid-xs-6",
                                                                              "grid-xs-7": "MuiGrid-grid-xs-7",
                                                                              "grid-xs-8": "MuiGrid-grid-xs-8",
                                                                              "grid-xs-9": "MuiGrid-grid-xs-9",
                                                                              "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                                                              "grid-xs-true": "MuiGrid-grid-xs-true",
                                                                              "item": "MuiGrid-item",
                                                                              "justify-content-xs-center": "MuiGrid-justify-content-xs-center",
                                                                              "justify-content-xs-flex-end": "MuiGrid-justify-content-xs-flex-end",
                                                                              "justify-content-xs-space-around": "MuiGrid-justify-content-xs-space-around",
                                                                              "justify-content-xs-space-between": "MuiGrid-justify-content-xs-space-between",
                                                                              "justify-content-xs-space-evenly": "MuiGrid-justify-content-xs-space-evenly",
                                                                              "root": "MuiGrid-root",
                                                                              "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                                                              "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                                                              "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                                                              "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                                                              "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                                                              "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                                                              "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                                                              "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                                                              "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                                                              "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                                                              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                                                              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                                                              "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                                                            }
                                                                          }
                                                                          item={true}
                                                                          xs={12}
                                                                        >
                                                                          <div
                                                                            className="MuiGrid-root MuiGrid-item MuiGrid-grid-xs-12"
                                                                          >
                                                                            <Connect(WithStyles(NewsFeed))>
                                                                              <WithStyles(NewsFeed)
                                                                                actions={
                                                                                  Object {
                                                                                    "addAuthor": [Function],
                                                                                    "addFavouriteSearch": [Function],
                                                                                    "addMyEditorialAppointments": [Function],
                                                                                    "addToFavourites": [Function],
                                                                                    "addUser": [Function],
                                                                                    "adminCreate": [Function],
                                                                                    "adminReset": [Function],
                                                                                    "adminUpdate": [Function],
                                                                                    "bulkDeleteAuthorListItems": [Function],
                                                                                    "bulkDeleteUserListItems": [Function],
                                                                                    "changeAuthorId": [Function],
                                                                                    "changeDisplayType": [Function],
                                                                                    "changeSearchKeyValue": [Function],
                                                                                    "checkForExistingAuthor": [Function],
                                                                                    "checkForExistingFavouriteSearchAlias": [Function],
                                                                                    "checkForExistingUser": [Function],
                                                                                    "checkSession": [Function],
                                                                                    "claimPublication": [Function],
                                                                                    "clearAuthorsSuggestions": [Function],
                                                                                    "clearCCCollectionsList": [Function],
                                                                                    "clearClaimPublication": [Function],
                                                                                    "clearDeleteRecord": [Function],
                                                                                    "clearFixRecord": [Function],
                                                                                    "clearJournalSearchKeywords": [Function],
                                                                                    "clearMyEditorialAppointmentsAddStatus": [Function],
                                                                                    "clearNewRecord": [Function],
                                                                                    "clearRecordToView": [Function],
                                                                                    "clearRedirectPath": [Function],
                                                                                    "clearSearchQuery": [Function],
                                                                                    "clearSessionExpiredFlag": [Function],
                                                                                    "clearThirdPartyLookup": [Function],
                                                                                    "collectionsList": [Function],
                                                                                    "communitiesList": [Function],
                                                                                    "copyToOrRemoveFromCollection": [Function],
                                                                                    "countPossiblyYourPublications": [Function],
                                                                                    "createBatchImport": [Function],
                                                                                    "createCollection": [Function],
                                                                                    "createCommunity": [Function],
                                                                                    "createNewRecord": [Function],
                                                                                    "createOrUpdateDoi": [Function],
                                                                                    "createSearchPromise": [Function],
                                                                                    "deleteAttachedFile": [Function],
                                                                                    "deleteAuthorListItem": [Function],
                                                                                    "deleteFavouriteSearchListItem": [Function],
                                                                                    "deleteMyEditorialAppointmentsListItem": [Function],
                                                                                    "deleteRecord": [Function],
                                                                                    "deleteUserListItem": [Function],
                                                                                    "dismissAppAlert": [Function],
                                                                                    "exportAuthorPublications": [Function],
                                                                                    "exportEspacePublications": [Function],
                                                                                    "exportJournals": [Function],
                                                                                    "exportPublications": [Function],
                                                                                    "fixRecord": [Function],
                                                                                    "getBatchImportDirectories": [Function],
                                                                                    "getCollectionsListAPI": [Function],
                                                                                    "getFavouriteSearchAlias": [Function],
                                                                                    "getPreCheckError": [Function],
                                                                                    "getSearchLookupApi": [Function],
                                                                                    "getSherpaFromIssn": [Function],
                                                                                    "getThirdPartyLookupApiUrl": [Function],
                                                                                    "getUlrichsFromIssn": [Function],
                                                                                    "hidePossiblyYourPublicationsLure": [Function],
                                                                                    "hideRecord": [Function],
                                                                                    "hideRecordErrorReset": [Function],
                                                                                    "ingestFromScopus": [Function],
                                                                                    "linkAuthorOrcidId": [Function],
                                                                                    "loadAuthorList": [Function],
                                                                                    "loadAuthorPublicationsStats": [Function],
                                                                                    "loadBulkUpdatesList": [Function],
                                                                                    "loadCCCollectionsList": [Function],
                                                                                    "loadCollectionsList": [Function],
                                                                                    "loadCommunitiesList": [Function],
                                                                                    "loadCurrentAccount": [Function],
                                                                                    "loadDetailedHistory": [Function],
                                                                                    "loadFavouriteSearchList": [Function],
                                                                                    "loadFullRecordToClaim": [Function],
                                                                                    "loadJournal": [Function],
                                                                                    "loadJournalLookup": [Function],
                                                                                    "loadJournalSearchKeywords": [Function],
                                                                                    "loadMyEditorialAppointmentsList": [Function],
                                                                                    "loadNewsFeed": [Function],
                                                                                    "loadOrcidSyncStatus": [Function],
                                                                                    "loadPublicationList": [Function],
                                                                                    "loadRecordToDelete": [Function],
                                                                                    "loadRecordToFix": [Function],
                                                                                    "loadRecordToView": [Function],
                                                                                    "loadRecordVersionToView": [Function],
                                                                                    "loadSearchKeyList": [Function],
                                                                                    "loadThirdPartyResults": [Function],
                                                                                    "loadUserList": [Function],
                                                                                    "loadVocabulariesList": [Function],
                                                                                    "logout": [Function],
                                                                                    "mergeAvailableAuthoringData": [Function],
                                                                                    "removeFromFavourites": [Function],
                                                                                    "removeShadowSuffixFromTableNames": [Function],
                                                                                    "requestMJLIngest": [Function],
                                                                                    "requestOrcidSync": [Function],
                                                                                    "resetDoi": [Function],
                                                                                    "resetExportPublicationsStatus": [Function],
                                                                                    "resetSavingAuthorState": [Function],
                                                                                    "retrieveFavouriteJournals": [Function],
                                                                                    "sanitiseData": [Function],
                                                                                    "searchAuthorPublications": [Function],
                                                                                    "searchAuthors": [Function],
                                                                                    "searchEspacePublications": [Function],
                                                                                    "searchJournals": [Function],
                                                                                    "searchLatestPublications": [Function],
                                                                                    "searchPossiblyYourPublications": [Function],
                                                                                    "searchPublications": [Function],
                                                                                    "searchTopCitedPublications": [Function],
                                                                                    "searchTrendingPublications": [Function],
                                                                                    "setClaimPublication": [Function],
                                                                                    "setCollectionsArray": [Function],
                                                                                    "setDeleteRecord": [Function],
                                                                                    "setFixRecord": [Function],
                                                                                    "setHideCulturalSensitivityStatement": [Function],
                                                                                    "setRedirectPath": [Function],
                                                                                    "showAppAlert": [Function],
                                                                                    "submitThesis": [Function],
                                                                                    "unclaimRecord": [Function],
                                                                                    "unlockRecord": [Function],
                                                                                    "unlockRecordToView": [Function],
                                                                                    "updateAuthorListItem": [Function],
                                                                                    "updateCollection": [Function],
                                                                                    "updateCommunity": [Function],
                                                                                    "updateCurrentAuthor": [Function],
                                                                                    "updateDoi": [Function],
                                                                                    "updateFavouriteSearchListItem": [Function],
                                                                                    "updateIncompleteRecord": [Function],
                                                                                    "updateMatchedRecordAuthoringData": [Function],
                                                                                    "updateMyEditorialAppointmentsListItem": [Function],
                                                                                    "updateUserListItem": [Function],
                                                                                  }
                                                                                }
                                                                              >
                                                                                <NewsFeed
                                                                                  actions={
                                                                                    Object {
                                                                                      "addAuthor": [Function],
                                                                                      "addFavouriteSearch": [Function],
                                                                                      "addMyEditorialAppointments": [Function],
                                                                                      "addToFavourites": [Function],
                                                                                      "addUser": [Function],
                                                                                      "adminCreate": [Function],
                                                                                      "adminReset": [Function],
                                                                                      "adminUpdate": [Function],
                                                                                      "bulkDeleteAuthorListItems": [Function],
                                                                                      "bulkDeleteUserListItems": [Function],
                                                                                      "changeAuthorId": [Function],
                                                                                      "changeDisplayType": [Function],
                                                                                      "changeSearchKeyValue": [Function],
                                                                                      "checkForExistingAuthor": [Function],
                                                                                      "checkForExistingFavouriteSearchAlias": [Function],
                                                                                      "checkForExistingUser": [Function],
                                                                                      "checkSession": [Function],
                                                                                      "claimPublication": [Function],
                                                                                      "clearAuthorsSuggestions": [Function],
                                                                                      "clearCCCollectionsList": [Function],
                                                                                      "clearClaimPublication": [Function],
                                                                                      "clearDeleteRecord": [Function],
                                                                                      "clearFixRecord": [Function],
                                                                                      "clearJournalSearchKeywords": [Function],
                                                                                      "clearMyEditorialAppointmentsAddStatus": [Function],
                                                                                      "clearNewRecord": [Function],
                                                                                      "clearRecordToView": [Function],
                                                                                      "clearRedirectPath": [Function],
                                                                                      "clearSearchQuery": [Function],
                                                                                      "clearSessionExpiredFlag": [Function],
                                                                                      "clearThirdPartyLookup": [Function],
                                                                                      "collectionsList": [Function],
                                                                                      "communitiesList": [Function],
                                                                                      "copyToOrRemoveFromCollection": [Function],
                                                                                      "countPossiblyYourPublications": [Function],
                                                                                      "createBatchImport": [Function],
                                                                                      "createCollection": [Function],
                                                                                      "createCommunity": [Function],
                                                                                      "createNewRecord": [Function],
                                                                                      "createOrUpdateDoi": [Function],
                                                                                      "createSearchPromise": [Function],
                                                                                      "deleteAttachedFile": [Function],
                                                                                      "deleteAuthorListItem": [Function],
                                                                                      "deleteFavouriteSearchListItem": [Function],
                                                                                      "deleteMyEditorialAppointmentsListItem": [Function],
                                                                                      "deleteRecord": [Function],
                                                                                      "deleteUserListItem": [Function],
                                                                                      "dismissAppAlert": [Function],
                                                                                      "exportAuthorPublications": [Function],
                                                                                      "exportEspacePublications": [Function],
                                                                                      "exportJournals": [Function],
                                                                                      "exportPublications": [Function],
                                                                                      "fixRecord": [Function],
                                                                                      "getBatchImportDirectories": [Function],
                                                                                      "getCollectionsListAPI": [Function],
                                                                                      "getFavouriteSearchAlias": [Function],
                                                                                      "getPreCheckError": [Function],
                                                                                      "getSearchLookupApi": [Function],
                                                                                      "getSherpaFromIssn": [Function],
                                                                                      "getThirdPartyLookupApiUrl": [Function],
                                                                                      "getUlrichsFromIssn": [Function],
                                                                                      "hidePossiblyYourPublicationsLure": [Function],
                                                                                      "hideRecord": [Function],
                                                                                      "hideRecordErrorReset": [Function],
                                                                                      "ingestFromScopus": [Function],
                                                                                      "linkAuthorOrcidId": [Function],
                                                                                      "loadAuthorList": [Function],
                                                                                      "loadAuthorPublicationsStats": [Function],
                                                                                      "loadBulkUpdatesList": [Function],
                                                                                      "loadCCCollectionsList": [Function],
                                                                                      "loadCollectionsList": [Function],
                                                                                      "loadCommunitiesList": [Function],
                                                                                      "loadCurrentAccount": [Function],
                                                                                      "loadDetailedHistory": [Function],
                                                                                      "loadFavouriteSearchList": [Function],
                                                                                      "loadFullRecordToClaim": [Function],
                                                                                      "loadJournal": [Function],
                                                                                      "loadJournalLookup": [Function],
                                                                                      "loadJournalSearchKeywords": [Function],
                                                                                      "loadMyEditorialAppointmentsList": [Function],
                                                                                      "loadNewsFeed": [Function],
                                                                                      "loadOrcidSyncStatus": [Function],
                                                                                      "loadPublicationList": [Function],
                                                                                      "loadRecordToDelete": [Function],
                                                                                      "loadRecordToFix": [Function],
                                                                                      "loadRecordToView": [Function],
                                                                                      "loadRecordVersionToView": [Function],
                                                                                      "loadSearchKeyList": [Function],
                                                                                      "loadThirdPartyResults": [Function],
                                                                                      "loadUserList": [Function],
                                                                                      "loadVocabulariesList": [Function],
                                                                                      "logout": [Function],
                                                                                      "mergeAvailableAuthoringData": [Function],
                                                                                      "removeFromFavourites": [Function],
                                                                                      "removeShadowSuffixFromTableNames": [Function],
                                                                                      "requestMJLIngest": [Function],
                                                                                      "requestOrcidSync": [Function],
                                                                                      "resetDoi": [Function],
                                                                                      "resetExportPublicationsStatus": [Function],
                                                                                      "resetSavingAuthorState": [Function],
                                                                                      "retrieveFavouriteJournals": [Function],
                                                                                      "sanitiseData": [Function],
                                                                                      "searchAuthorPublications": [Function],
                                                                                      "searchAuthors": [Function],
                                                                                      "searchEspacePublications": [Function],
                                                                                      "searchJournals": [Function],
                                                                                      "searchLatestPublications": [Function],
                                                                                      "searchPossiblyYourPublications": [Function],
                                                                                      "searchPublications": [Function],
                                                                                      "searchTopCitedPublications": [Function],
                                                                                      "searchTrendingPublications": [Function],
                                                                                      "setClaimPublication": [Function],
                                                                                      "setCollectionsArray": [Function],
                                                                                      "setDeleteRecord": [Function],
                                                                                      "setFixRecord": [Function],
                                                                                      "setHideCulturalSensitivityStatement": [Function],
                                                                                      "setRedirectPath": [Function],
                                                                                      "showAppAlert": [Function],
                                                                                      "submitThesis": [Function],
                                                                                      "unclaimRecord": [Function],
                                                                                      "unlockRecord": [Function],
                                                                                      "unlockRecordToView": [Function],
                                                                                      "updateAuthorListItem": [Function],
                                                                                      "updateCollection": [Function],
                                                                                      "updateCommunity": [Function],
                                                                                      "updateCurrentAuthor": [Function],
                                                                                      "updateDoi": [Function],
                                                                                      "updateFavouriteSearchListItem": [Function],
                                                                                      "updateIncompleteRecord": [Function],
                                                                                      "updateMatchedRecordAuthoringData": [Function],
                                                                                      "updateMyEditorialAppointmentsListItem": [Function],
                                                                                      "updateUserListItem": [Function],
                                                                                    }
                                                                                  }
                                                                                  classes={
                                                                                    Object {
                                                                                      "newsItem": "NewsFeed-newsItem-36",
                                                                                    }
                                                                                  }
                                                                                  loadingNewsFeedList={true}
                                                                                  newsFeedList={Array []}
                                                                                  showNewsCount={3}
                                                                                  theme={
                                                                                    Object {
                                                                                      "breakpoints": Object {
                                                                                        "between": [Function],
                                                                                        "down": [Function],
                                                                                        "keys": Array [
                                                                                          "xs",
                                                                                          "sm",
                                                                                          "md",
                                                                                          "lg",
                                                                                          "xl",
                                                                                        ],
                                                                                        "only": [Function],
                                                                                        "up": [Function],
                                                                                        "values": Object {
                                                                                          "lg": 1280,
                                                                                          "md": 960,
                                                                                          "sm": 600,
                                                                                          "xl": 1920,
                                                                                          "xs": 0,
                                                                                        },
                                                                                        "width": [Function],
                                                                                      },
                                                                                      "direction": "ltr",
                                                                                      "graphs": Object {
                                                                                        "color1": "#d72865",
                                                                                        "color2": "#1e7d94",
                                                                                        "color3": "#49075E",
                                                                                        "color4": "#468fcc",
                                                                                        "color5": "#f28620",
                                                                                        "color6": "#333333",
                                                                                        "color7": "#595959",
                                                                                      },
                                                                                      "hexToRGBA": [Function],
                                                                                      "mixins": Object {
                                                                                        "gutters": [Function],
                                                                                        "toolbar": Object {
                                                                                          "@media (min-width:0px) and (orientation: landscape)": Object {
                                                                                            "minHeight": 48,
                                                                                          },
                                                                                          "@media (min-width:600px)": Object {
                                                                                            "minHeight": 64,
                                                                                          },
                                                                                          "minHeight": 56,
                                                                                        },
                                                                                      },
                                                                                      "overrides": Object {
                                                                                        "MUIDataTable": Object {
                                                                                          "paper": Object {
                                                                                            "boxShadow": "none",
                                                                                            "margin": 0,
                                                                                            "padding": 0,
                                                                                          },
                                                                                        },
                                                                                        "MuiFormLabel": Object {
                                                                                          "root": Object {
                                                                                            "lineHeight": "normal",
                                                                                            "overflow": "hidden",
                                                                                            "textOverflow": "ellipsis",
                                                                                            "whiteSpace": "nowrap",
                                                                                            "width": "100%",
                                                                                          },
                                                                                        },
                                                                                        "MuiIconButton": Object {
                                                                                          "colorInherit": Object {
                                                                                            "color": "none",
                                                                                          },
                                                                                        },
                                                                                        "MuiInput": Object {
                                                                                          "formControl": Object {
                                                                                            "label + &": Object {
                                                                                              "marginTop": 17,
                                                                                            },
                                                                                          },
                                                                                        },
                                                                                        "MuiMenuItem": Object {
                                                                                          "root": Object {
                                                                                            "&$selected": Object {
                                                                                              "backgroundColor": "#4085C6 !important",
                                                                                              "color": "#FFFFFF",
                                                                                            },
                                                                                          },
                                                                                        },
                                                                                      },
                                                                                      "palette": Object {
                                                                                        "accent": Object {
                                                                                          "dark": "#2a557d",
                                                                                          "light": "#54acff",
                                                                                          "main": "#316799",
                                                                                        },
                                                                                        "action": Object {
                                                                                          "activatedOpacity": 0.12,
                                                                                          "active": "rgba(0, 0, 0, 0.54)",
                                                                                          "disabled": "rgba(0, 0, 0, 0.26)",
                                                                                          "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                                                          "disabledOpacity": 0.38,
                                                                                          "focus": "rgba(0, 0, 0, 0.12)",
                                                                                          "focusOpacity": 0.12,
                                                                                          "hover": "rgba(0, 0, 0, 0.04)",
                                                                                          "hoverOpacity": 0.04,
                                                                                          "selected": "rgba(0, 0, 0, 0.08)",
                                                                                          "selectedOpacity": 0.08,
                                                                                        },
                                                                                        "augmentColor": [Function],
                                                                                        "background": Object {
                                                                                          "default": "#fafafa",
                                                                                          "paper": "#fff",
                                                                                        },
                                                                                        "common": Object {
                                                                                          "black": "#000",
                                                                                          "white": "#fff",
                                                                                        },
                                                                                        "contrastThreshold": 3,
                                                                                        "divider": "rgba(0, 0, 0, 0.12)",
                                                                                        "error": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#790000",
                                                                                          "light": "#ff0000",
                                                                                          "main": "#c80000",
                                                                                        },
                                                                                        "getContrastText": [Function],
                                                                                        "grey": Object {
                                                                                          "100": "#f5f5f5",
                                                                                          "200": "#eeeeee",
                                                                                          "300": "#e0e0e0",
                                                                                          "400": "#bdbdbd",
                                                                                          "50": "#fafafa",
                                                                                          "500": "#9e9e9e",
                                                                                          "600": "#757575",
                                                                                          "700": "#616161",
                                                                                          "800": "#424242",
                                                                                          "900": "#212121",
                                                                                          "A100": "#d5d5d5",
                                                                                          "A200": "#aaaaaa",
                                                                                          "A400": "#303030",
                                                                                          "A700": "#616161",
                                                                                        },
                                                                                        "info": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#1976d2",
                                                                                          "light": "#64b5f6",
                                                                                          "main": "#2196f3",
                                                                                        },
                                                                                        "primary": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#3b1a59",
                                                                                          "gradient": Object {
                                                                                            "diagonal": Object {
                                                                                              "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                                              "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                                            },
                                                                                            "horizontal": Object {
                                                                                              "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                                              "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                                            },
                                                                                          },
                                                                                          "light": "#962A8B",
                                                                                          "main": "#51247A",
                                                                                        },
                                                                                        "secondary": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#333333",
                                                                                          "light": "#f2f2f2",
                                                                                          "main": "#595959",
                                                                                        },
                                                                                        "success": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#005000",
                                                                                          "light": "#00a700",
                                                                                          "main": "#007200",
                                                                                        },
                                                                                        "text": Object {
                                                                                          "disabled": "rgba(0, 0, 0, 0.38)",
                                                                                          "hint": "rgba(0, 0, 0, 0.38)",
                                                                                          "primary": "rgba(0, 0, 0, 0.87)",
                                                                                          "secondary": "rgba(0, 0, 0, 0.54)",
                                                                                        },
                                                                                        "tonalOffset": 0.2,
                                                                                        "type": "light",
                                                                                        "warning": Object {
                                                                                          "contrastText": "#fff",
                                                                                          "dark": "#542400",
                                                                                          "light": "#ff9a57",
                                                                                          "main": "#bf5000",
                                                                                        },
                                                                                        "white": Object {
                                                                                          "main": "#FFFFFF",
                                                                                        },
                                                                                      },
                                                                                      "props": Object {},
                                                                                      "shadows": Array [
                                                                                        "none",
                                                                                        "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                                                                        "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                                                                        "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                                                                        "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                                                                        "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                                                                        "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                                                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                                                                        "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                                                                        "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                                                                        "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                                                                        "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                                                                        "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                                                                        "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                                                                        "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                                                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                                                                        "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                                                                        "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                                                                        "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                                                                        "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                                                                      ],
                                                                                      "shape": Object {
                                                                                        "borderRadius": 4,
                                                                                      },
                                                                                      "spacing": [Function],
                                                                                      "status": Object {
                                                                                        "danger": "#f44336",
                                                                                        "warning": "#ff9800",
                                                                                      },
                                                                                      "transitions": Object {
                                                                                        "create": [Function],
                                                                                        "duration": Object {
                                                                                          "complex": 375,
                                                                                          "enteringScreen": 225,
                                                                                          "leavingScreen": 195,
                                                                                          "short": 250,
                                                                                          "shorter": 200,
                                                                                          "shortest": 150,
                                                                                          "standard": 300,
                                                                                        },
                                                                                        "easing": Object {
                                                                                          "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                                                          "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                                                          "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                                                          "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                                                        },
                                                                                        "getAutoHeightDuration": [Function],
                                                                                      },
                                                                                      "typography": Object {
                                                                                        "body1": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "1rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.00938em",
                                                                                          "lineHeight": 1.5,
                                                                                        },
                                                                                        "body2": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "0.875rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.01071em",
                                                                                          "lineHeight": 1.43,
                                                                                        },
                                                                                        "button": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "0.875rem",
                                                                                          "fontWeight": 400,
                                                                                          "letterSpacing": "0.02857em",
                                                                                          "lineHeight": 1.75,
                                                                                          "textTransform": "uppercase",
                                                                                        },
                                                                                        "caption": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "0.75rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.03333em",
                                                                                          "lineHeight": 1.66,
                                                                                        },
                                                                                        "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                        "fontSize": 14,
                                                                                        "fontWeightBold": 700,
                                                                                        "fontWeightLight": 200,
                                                                                        "fontWeightMedium": 400,
                                                                                        "fontWeightRegular": 300,
                                                                                        "h1": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "6rem",
                                                                                          "fontWeight": 200,
                                                                                          "letterSpacing": "-0.01562em",
                                                                                          "lineHeight": 1.167,
                                                                                        },
                                                                                        "h2": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "3.75rem",
                                                                                          "fontWeight": 200,
                                                                                          "letterSpacing": "-0.00833em",
                                                                                          "lineHeight": 1.2,
                                                                                        },
                                                                                        "h3": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "3rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0em",
                                                                                          "lineHeight": 1.167,
                                                                                        },
                                                                                        "h4": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "2.125rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.00735em",
                                                                                          "lineHeight": 1.235,
                                                                                        },
                                                                                        "h5": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "1.5rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0em",
                                                                                          "lineHeight": 1.334,
                                                                                        },
                                                                                        "h6": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "1.25rem",
                                                                                          "fontWeight": 400,
                                                                                          "letterSpacing": "0.0075em",
                                                                                          "lineHeight": 1.6,
                                                                                        },
                                                                                        "htmlFontSize": 16,
                                                                                        "overline": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "0.75rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.08333em",
                                                                                          "lineHeight": 2.66,
                                                                                          "textTransform": "uppercase",
                                                                                        },
                                                                                        "pxToRem": [Function],
                                                                                        "round": [Function],
                                                                                        "subtitle1": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "1rem",
                                                                                          "fontWeight": 300,
                                                                                          "letterSpacing": "0.00938em",
                                                                                          "lineHeight": 1.75,
                                                                                        },
                                                                                        "subtitle2": Object {
                                                                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                                          "fontSize": "0.875rem",
                                                                                          "fontWeight": 400,
                                                                                          "letterSpacing": "0.00714em",
                                                                                          "lineHeight": 1.57,
                                                                                        },
                                                                                        "suppressDeprecationWarnings": true,
                                                                                        "useNextVariants": true,
                                                                                      },
                                                                                      "zIndex": Object {
                                                                                        "appBar": 1100,
                                                                                        "drawer": 1200,
                                                                                        "mobileStepper": 1000,
                                                                                        "modal": 1300,
                                                                                        "snackbar": 1400,
                                                                                        "speedDial": 1050,
                                                                                        "tooltip": 1500,
                                                                                      },
                                                                                      Symbol(mui.nested): false,
                                                                                    }
                                                                                  }
                                                                                />
                                                                              </WithStyles(NewsFeed)>
                                                                            </Connect(WithStyles(NewsFeed))>
                                                                          </div>
                                                                        </ForwardRef(Grid)>
                                                                      </WithStyles(ForwardRef(Grid))>
                                                                    </div>
                                                                  </ForwardRef(Grid)>
                                                                </WithStyles(ForwardRef(Grid))>
                                                              </div>
                                                            </ForwardRef(Grid)>
                                                          </WithStyles(ForwardRef(Grid))>
                                                        </div>
                                                      </ForwardRef(Grid)>
                                                    </WithStyles(ForwardRef(Grid))>
                                                  </div>
                                                </ForwardRef(Grid)>
                                              </WithStyles(ForwardRef(Grid))>
                                            </div>
                                          </ForwardRef(Grid)>
                                        </WithStyles(ForwardRef(Grid))>
                                      </Page>
                                    </WithStyles(Page)>
                                  </StandardPage>
                                </IndexComponent>
                              </WithStyles(IndexComponent)>
                            </Index>
                          </Route>
                        </Switch>
                      </Suspense>
                    </div>
                    <Connect(WithStyles(HelpDrawer))>
                      <WithStyles(HelpDrawer)
                        hide={[Function]}
                        open={false}
                        text=""
                        title=""
                      >
                        <HelpDrawer
                          buttonLabel="CLOSE"
                          classes={
                            Object {
                              "button": "HelpDrawer-button-39",
                              "paper": "HelpDrawer-paper-37",
                              "title": "HelpDrawer-title-38",
                            }
                          }
                          hide={[Function]}
                          open={false}
                          text=""
                          theme={
                            Object {
                              "breakpoints": Object {
                                "between": [Function],
                                "down": [Function],
                                "keys": Array [
                                  "xs",
                                  "sm",
                                  "md",
                                  "lg",
                                  "xl",
                                ],
                                "only": [Function],
                                "up": [Function],
                                "values": Object {
                                  "lg": 1280,
                                  "md": 960,
                                  "sm": 600,
                                  "xl": 1920,
                                  "xs": 0,
                                },
                                "width": [Function],
                              },
                              "direction": "ltr",
                              "graphs": Object {
                                "color1": "#d72865",
                                "color2": "#1e7d94",
                                "color3": "#49075E",
                                "color4": "#468fcc",
                                "color5": "#f28620",
                                "color6": "#333333",
                                "color7": "#595959",
                              },
                              "hexToRGBA": [Function],
                              "mixins": Object {
                                "gutters": [Function],
                                "toolbar": Object {
                                  "@media (min-width:0px) and (orientation: landscape)": Object {
                                    "minHeight": 48,
                                  },
                                  "@media (min-width:600px)": Object {
                                    "minHeight": 64,
                                  },
                                  "minHeight": 56,
                                },
                              },
                              "overrides": Object {
                                "MUIDataTable": Object {
                                  "paper": Object {
                                    "boxShadow": "none",
                                    "margin": 0,
                                    "padding": 0,
                                  },
                                },
                                "MuiFormLabel": Object {
                                  "root": Object {
                                    "lineHeight": "normal",
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                    "width": "100%",
                                  },
                                },
                                "MuiIconButton": Object {
                                  "colorInherit": Object {
                                    "color": "none",
                                  },
                                },
                                "MuiInput": Object {
                                  "formControl": Object {
                                    "label + &": Object {
                                      "marginTop": 17,
                                    },
                                  },
                                },
                                "MuiMenuItem": Object {
                                  "root": Object {
                                    "&$selected": Object {
                                      "backgroundColor": "#4085C6 !important",
                                      "color": "#FFFFFF",
                                    },
                                  },
                                },
                              },
                              "palette": Object {
                                "accent": Object {
                                  "dark": "#2a557d",
                                  "light": "#54acff",
                                  "main": "#316799",
                                },
                                "action": Object {
                                  "activatedOpacity": 0.12,
                                  "active": "rgba(0, 0, 0, 0.54)",
                                  "disabled": "rgba(0, 0, 0, 0.26)",
                                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                  "disabledOpacity": 0.38,
                                  "focus": "rgba(0, 0, 0, 0.12)",
                                  "focusOpacity": 0.12,
                                  "hover": "rgba(0, 0, 0, 0.04)",
                                  "hoverOpacity": 0.04,
                                  "selected": "rgba(0, 0, 0, 0.08)",
                                  "selectedOpacity": 0.08,
                                },
                                "augmentColor": [Function],
                                "background": Object {
                                  "default": "#fafafa",
                                  "paper": "#fff",
                                },
                                "common": Object {
                                  "black": "#000",
                                  "white": "#fff",
                                },
                                "contrastThreshold": 3,
                                "divider": "rgba(0, 0, 0, 0.12)",
                                "error": Object {
                                  "contrastText": "#fff",
                                  "dark": "#790000",
                                  "light": "#ff0000",
                                  "main": "#c80000",
                                },
                                "getContrastText": [Function],
                                "grey": Object {
                                  "100": "#f5f5f5",
                                  "200": "#eeeeee",
                                  "300": "#e0e0e0",
                                  "400": "#bdbdbd",
                                  "50": "#fafafa",
                                  "500": "#9e9e9e",
                                  "600": "#757575",
                                  "700": "#616161",
                                  "800": "#424242",
                                  "900": "#212121",
                                  "A100": "#d5d5d5",
                                  "A200": "#aaaaaa",
                                  "A400": "#303030",
                                  "A700": "#616161",
                                },
                                "info": Object {
                                  "contrastText": "#fff",
                                  "dark": "#1976d2",
                                  "light": "#64b5f6",
                                  "main": "#2196f3",
                                },
                                "primary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#3b1a59",
                                  "gradient": Object {
                                    "diagonal": Object {
                                      "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                      "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                    },
                                    "horizontal": Object {
                                      "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                      "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                    },
                                  },
                                  "light": "#962A8B",
                                  "main": "#51247A",
                                },
                                "secondary": Object {
                                  "contrastText": "#fff",
                                  "dark": "#333333",
                                  "light": "#f2f2f2",
                                  "main": "#595959",
                                },
                                "success": Object {
                                  "contrastText": "#fff",
                                  "dark": "#005000",
                                  "light": "#00a700",
                                  "main": "#007200",
                                },
                                "text": Object {
                                  "disabled": "rgba(0, 0, 0, 0.38)",
                                  "hint": "rgba(0, 0, 0, 0.38)",
                                  "primary": "rgba(0, 0, 0, 0.87)",
                                  "secondary": "rgba(0, 0, 0, 0.54)",
                                },
                                "tonalOffset": 0.2,
                                "type": "light",
                                "warning": Object {
                                  "contrastText": "#fff",
                                  "dark": "#542400",
                                  "light": "#ff9a57",
                                  "main": "#bf5000",
                                },
                                "white": Object {
                                  "main": "#FFFFFF",
                                },
                              },
                              "props": Object {},
                              "shadows": Array [
                                "none",
                                "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                              ],
                              "shape": Object {
                                "borderRadius": 4,
                              },
                              "spacing": [Function],
                              "status": Object {
                                "danger": "#f44336",
                                "warning": "#ff9800",
                              },
                              "transitions": Object {
                                "create": [Function],
                                "duration": Object {
                                  "complex": 375,
                                  "enteringScreen": 225,
                                  "leavingScreen": 195,
                                  "short": 250,
                                  "shorter": 200,
                                  "shortest": 150,
                                  "standard": 300,
                                },
                                "easing": Object {
                                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                },
                                "getAutoHeightDuration": [Function],
                              },
                              "typography": Object {
                                "body1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.00938em",
                                  "lineHeight": 1.5,
                                },
                                "body2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.01071em",
                                  "lineHeight": 1.43,
                                },
                                "button": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.02857em",
                                  "lineHeight": 1.75,
                                  "textTransform": "uppercase",
                                },
                                "caption": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.75rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.03333em",
                                  "lineHeight": 1.66,
                                },
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": 14,
                                "fontWeightBold": 700,
                                "fontWeightLight": 200,
                                "fontWeightMedium": 400,
                                "fontWeightRegular": 300,
                                "h1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "6rem",
                                  "fontWeight": 200,
                                  "letterSpacing": "-0.01562em",
                                  "lineHeight": 1.167,
                                },
                                "h2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "3.75rem",
                                  "fontWeight": 200,
                                  "letterSpacing": "-0.00833em",
                                  "lineHeight": 1.2,
                                },
                                "h3": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "3rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0em",
                                  "lineHeight": 1.167,
                                },
                                "h4": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "2.125rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.00735em",
                                  "lineHeight": 1.235,
                                },
                                "h5": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1.5rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0em",
                                  "lineHeight": 1.334,
                                },
                                "h6": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1.25rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.0075em",
                                  "lineHeight": 1.6,
                                },
                                "htmlFontSize": 16,
                                "overline": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.75rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.08333em",
                                  "lineHeight": 2.66,
                                  "textTransform": "uppercase",
                                },
                                "pxToRem": [Function],
                                "round": [Function],
                                "subtitle1": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "1rem",
                                  "fontWeight": 300,
                                  "letterSpacing": "0.00938em",
                                  "lineHeight": 1.75,
                                },
                                "subtitle2": Object {
                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                  "fontSize": "0.875rem",
                                  "fontWeight": 400,
                                  "letterSpacing": "0.00714em",
                                  "lineHeight": 1.57,
                                },
                                "suppressDeprecationWarnings": true,
                                "useNextVariants": true,
                              },
                              "zIndex": Object {
                                "appBar": 1100,
                                "drawer": 1200,
                                "mobileStepper": 1000,
                                "modal": 1300,
                                "snackbar": 1400,
                                "speedDial": 1050,
                                "tooltip": 1500,
                              },
                              Symbol(mui.nested): false,
                            }
                          }
                          title=""
                        >
                          <WithStyles(ForwardRef(Drawer))
                            anchor="right"
                            classes={
                              Object {
                                "paper": "HelpDrawer-paper-37",
                              }
                            }
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Drawer)
                              anchor="right"
                              classes={
                                Object {
                                  "docked": "MuiDrawer-docked",
                                  "modal": "MuiDrawer-modal",
                                  "paper": "MuiDrawer-paper HelpDrawer-paper-37",
                                  "paperAnchorBottom": "MuiDrawer-paperAnchorBottom",
                                  "paperAnchorDockedBottom": "MuiDrawer-paperAnchorDockedBottom",
                                  "paperAnchorDockedLeft": "MuiDrawer-paperAnchorDockedLeft",
                                  "paperAnchorDockedRight": "MuiDrawer-paperAnchorDockedRight",
                                  "paperAnchorDockedTop": "MuiDrawer-paperAnchorDockedTop",
                                  "paperAnchorLeft": "MuiDrawer-paperAnchorLeft",
                                  "paperAnchorRight": "MuiDrawer-paperAnchorRight",
                                  "paperAnchorTop": "MuiDrawer-paperAnchorTop",
                                  "root": "MuiDrawer-root",
                                }
                              }
                              onClose={[Function]}
                              open={false}
                            >
                              <ForwardRef(Modal)
                                BackdropComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "Naked": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "children": [Function],
                                        "className": [Function],
                                        "classes": [Function],
                                        "invisible": [Function],
                                        "open": [Function],
                                        "transitionDuration": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "options": Object {
                                      "defaultTheme": Object {
                                        "breakpoints": Object {
                                          "between": [Function],
                                          "down": [Function],
                                          "keys": Array [
                                            "xs",
                                            "sm",
                                            "md",
                                            "lg",
                                            "xl",
                                          ],
                                          "only": [Function],
                                          "up": [Function],
                                          "values": Object {
                                            "lg": 1280,
                                            "md": 960,
                                            "sm": 600,
                                            "xl": 1920,
                                            "xs": 0,
                                          },
                                          "width": [Function],
                                        },
                                        "direction": "ltr",
                                        "mixins": Object {
                                          "gutters": [Function],
                                          "toolbar": Object {
                                            "@media (min-width:0px) and (orientation: landscape)": Object {
                                              "minHeight": 48,
                                            },
                                            "@media (min-width:600px)": Object {
                                              "minHeight": 64,
                                            },
                                            "minHeight": 56,
                                          },
                                        },
                                        "overrides": Object {},
                                        "palette": Object {
                                          "action": Object {
                                            "activatedOpacity": 0.12,
                                            "active": "rgba(0, 0, 0, 0.54)",
                                            "disabled": "rgba(0, 0, 0, 0.26)",
                                            "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                            "disabledOpacity": 0.38,
                                            "focus": "rgba(0, 0, 0, 0.12)",
                                            "focusOpacity": 0.12,
                                            "hover": "rgba(0, 0, 0, 0.04)",
                                            "hoverOpacity": 0.04,
                                            "selected": "rgba(0, 0, 0, 0.08)",
                                            "selectedOpacity": 0.08,
                                          },
                                          "augmentColor": [Function],
                                          "background": Object {
                                            "default": "#fafafa",
                                            "paper": "#fff",
                                          },
                                          "common": Object {
                                            "black": "#000",
                                            "white": "#fff",
                                          },
                                          "contrastThreshold": 3,
                                          "divider": "rgba(0, 0, 0, 0.12)",
                                          "error": Object {
                                            "contrastText": "#fff",
                                            "dark": "#d32f2f",
                                            "light": "#e57373",
                                            "main": "#f44336",
                                          },
                                          "getContrastText": [Function],
                                          "grey": Object {
                                            "100": "#f5f5f5",
                                            "200": "#eeeeee",
                                            "300": "#e0e0e0",
                                            "400": "#bdbdbd",
                                            "50": "#fafafa",
                                            "500": "#9e9e9e",
                                            "600": "#757575",
                                            "700": "#616161",
                                            "800": "#424242",
                                            "900": "#212121",
                                            "A100": "#d5d5d5",
                                            "A200": "#aaaaaa",
                                            "A400": "#303030",
                                            "A700": "#616161",
                                          },
                                          "info": Object {
                                            "contrastText": "#fff",
                                            "dark": "#1976d2",
                                            "light": "#64b5f6",
                                            "main": "#2196f3",
                                          },
                                          "primary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#303f9f",
                                            "light": "#7986cb",
                                            "main": "#3f51b5",
                                          },
                                          "secondary": Object {
                                            "contrastText": "#fff",
                                            "dark": "#c51162",
                                            "light": "#ff4081",
                                            "main": "#f50057",
                                          },
                                          "success": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#388e3c",
                                            "light": "#81c784",
                                            "main": "#4caf50",
                                          },
                                          "text": Object {
                                            "disabled": "rgba(0, 0, 0, 0.38)",
                                            "hint": "rgba(0, 0, 0, 0.38)",
                                            "primary": "rgba(0, 0, 0, 0.87)",
                                            "secondary": "rgba(0, 0, 0, 0.54)",
                                          },
                                          "tonalOffset": 0.2,
                                          "type": "light",
                                          "warning": Object {
                                            "contrastText": "rgba(0, 0, 0, 0.87)",
                                            "dark": "#f57c00",
                                            "light": "#ffb74d",
                                            "main": "#ff9800",
                                          },
                                        },
                                        "props": Object {},
                                        "shadows": Array [
                                          "none",
                                          "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                                          "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                                          "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                                          "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                                          "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                                          "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                                          "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                                          "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                                          "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                                          "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                                          "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                                          "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                                          "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                                          "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                                          "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                                          "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                                        ],
                                        "shape": Object {
                                          "borderRadius": 4,
                                        },
                                        "spacing": [Function],
                                        "transitions": Object {
                                          "create": [Function],
                                          "duration": Object {
                                            "complex": 375,
                                            "enteringScreen": 225,
                                            "leavingScreen": 195,
                                            "short": 250,
                                            "shorter": 200,
                                            "shortest": 150,
                                            "standard": 300,
                                          },
                                          "easing": Object {
                                            "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                            "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                            "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                            "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                          },
                                          "getAutoHeightDuration": [Function],
                                        },
                                        "typography": Object {
                                          "body1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.5,
                                          },
                                          "body2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.01071em",
                                            "lineHeight": 1.43,
                                          },
                                          "button": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.02857em",
                                            "lineHeight": 1.75,
                                            "textTransform": "uppercase",
                                          },
                                          "caption": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.03333em",
                                            "lineHeight": 1.66,
                                          },
                                          "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                          "fontSize": 14,
                                          "fontWeightBold": 700,
                                          "fontWeightLight": 300,
                                          "fontWeightMedium": 500,
                                          "fontWeightRegular": 400,
                                          "h1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "6rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.01562em",
                                            "lineHeight": 1.167,
                                          },
                                          "h2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3.75rem",
                                            "fontWeight": 300,
                                            "letterSpacing": "-0.00833em",
                                            "lineHeight": 1.2,
                                          },
                                          "h3": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "3rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.167,
                                          },
                                          "h4": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "2.125rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00735em",
                                            "lineHeight": 1.235,
                                          },
                                          "h5": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.5rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0em",
                                            "lineHeight": 1.334,
                                          },
                                          "h6": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1.25rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.0075em",
                                            "lineHeight": 1.6,
                                          },
                                          "htmlFontSize": 16,
                                          "overline": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.75rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.08333em",
                                            "lineHeight": 2.66,
                                            "textTransform": "uppercase",
                                          },
                                          "pxToRem": [Function],
                                          "round": [Function],
                                          "subtitle1": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "1rem",
                                            "fontWeight": 400,
                                            "letterSpacing": "0.00938em",
                                            "lineHeight": 1.75,
                                          },
                                          "subtitle2": Object {
                                            "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                            "fontSize": "0.875rem",
                                            "fontWeight": 500,
                                            "letterSpacing": "0.00714em",
                                            "lineHeight": 1.57,
                                          },
                                        },
                                        "zIndex": Object {
                                          "appBar": 1100,
                                          "drawer": 1200,
                                          "mobileStepper": 1000,
                                          "modal": 1300,
                                          "snackbar": 1400,
                                          "speedDial": 1050,
                                          "tooltip": 1500,
                                        },
                                      },
                                      "name": "MuiBackdrop",
                                    },
                                    "propTypes": Object {
                                      "classes": [Function],
                                      "innerRef": [Function],
                                    },
                                    "render": [Function],
                                    "useStyles": [Function],
                                  }
                                }
                                BackdropProps={
                                  Object {
                                    "transitionDuration": Object {
                                      "enter": 225,
                                      "exit": 195,
                                    },
                                  }
                                }
                                className="MuiDrawer-root MuiDrawer-modal"
                                onClose={[Function]}
                                open={false}
                              />
                            </ForwardRef(Drawer)>
                          </WithStyles(ForwardRef(Drawer))>
                        </HelpDrawer>
                      </WithStyles(HelpDrawer)>
                    </Connect(WithStyles(HelpDrawer))>
                    <WithStyles(OfflineSnackbar)>
                      <OfflineSnackbar
                        classes={
                          Object {
                            "error": "OfflineSnackbar-error-41",
                            "success": "OfflineSnackbar-success-40",
                          }
                        }
                        theme={
                          Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "graphs": Object {
                              "color1": "#d72865",
                              "color2": "#1e7d94",
                              "color3": "#49075E",
                              "color4": "#468fcc",
                              "color5": "#f28620",
                              "color6": "#333333",
                              "color7": "#595959",
                            },
                            "hexToRGBA": [Function],
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {
                              "MUIDataTable": Object {
                                "paper": Object {
                                  "boxShadow": "none",
                                  "margin": 0,
                                  "padding": 0,
                                },
                              },
                              "MuiFormLabel": Object {
                                "root": Object {
                                  "lineHeight": "normal",
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                  "width": "100%",
                                },
                              },
                              "MuiIconButton": Object {
                                "colorInherit": Object {
                                  "color": "none",
                                },
                              },
                              "MuiInput": Object {
                                "formControl": Object {
                                  "label + &": Object {
                                    "marginTop": 17,
                                  },
                                },
                              },
                              "MuiMenuItem": Object {
                                "root": Object {
                                  "&$selected": Object {
                                    "backgroundColor": "#4085C6 !important",
                                    "color": "#FFFFFF",
                                  },
                                },
                              },
                            },
                            "palette": Object {
                              "accent": Object {
                                "dark": "#2a557d",
                                "light": "#54acff",
                                "main": "#316799",
                              },
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#790000",
                                "light": "#ff0000",
                                "main": "#c80000",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#3b1a59",
                                "gradient": Object {
                                  "diagonal": Object {
                                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                  },
                                  "horizontal": Object {
                                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                  },
                                },
                                "light": "#962A8B",
                                "main": "#51247A",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#333333",
                                "light": "#f2f2f2",
                                "main": "#595959",
                              },
                              "success": Object {
                                "contrastText": "#fff",
                                "dark": "#005000",
                                "light": "#00a700",
                                "main": "#007200",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "#fff",
                                "dark": "#542400",
                                "light": "#ff9a57",
                                "main": "#bf5000",
                              },
                              "white": Object {
                                "main": "#FFFFFF",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "status": Object {
                              "danger": "#f44336",
                              "warning": "#ff9800",
                            },
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 200,
                              "fontWeightMedium": 400,
                              "fontWeightRegular": 300,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 200,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 200,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 300,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 300,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 300,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                              "suppressDeprecationWarnings": true,
                              "useNextVariants": true,
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                            Symbol(mui.nested): false,
                          }
                        }
                      >
                        <div
                          className="offlineSnackbar"
                        >
                          <WithStyles(ForwardRef(Snackbar))
                            anchorOrigin={
                              Object {
                                "horizontal": "left",
                                "vertical": "bottom",
                              }
                            }
                            autoHideDuration={5000}
                            message={
                              <WithStyles(ForwardRef(Grid))
                                alignContent="center"
                                alignItems="center"
                                container={true}
                                justifyContent="center"
                              >
                                <WithStyles(ForwardRef(Grid))
                                  item={true}
                                  xs={true}
                                />
                                <WithStyles(ForwardRef(Grid))
                                  item={true}
                                  style={
                                    Object {
                                      "marginRight": 24,
                                    }
                                  }
                                >
                                  <Memo
                                    className="OfflineSnackbar-success-40"
                                  />
                                </WithStyles(ForwardRef(Grid))>
                                <WithStyles(ForwardRef(Grid))
                                  item={true}
                                >
                                  Your connection is back online
                                </WithStyles(ForwardRef(Grid))>
                                <WithStyles(ForwardRef(Grid))
                                  item={true}
                                  xs={true}
                                />
                              </WithStyles(ForwardRef(Grid))>
                            }
                            onClose={[Function]}
                            open={false}
                          >
                            <ForwardRef(Snackbar)
                              anchorOrigin={
                                Object {
                                  "horizontal": "left",
                                  "vertical": "bottom",
                                }
                              }
                              autoHideDuration={5000}
                              classes={
                                Object {
                                  "anchorOriginBottomCenter": "MuiSnackbar-anchorOriginBottomCenter",
                                  "anchorOriginBottomLeft": "MuiSnackbar-anchorOriginBottomLeft",
                                  "anchorOriginBottomRight": "MuiSnackbar-anchorOriginBottomRight",
                                  "anchorOriginTopCenter": "MuiSnackbar-anchorOriginTopCenter",
                                  "anchorOriginTopLeft": "MuiSnackbar-anchorOriginTopLeft",
                                  "anchorOriginTopRight": "MuiSnackbar-anchorOriginTopRight",
                                  "root": "MuiSnackbar-root",
                                }
                              }
                              message={
                                <WithStyles(ForwardRef(Grid))
                                  alignContent="center"
                                  alignItems="center"
                                  container={true}
                                  justifyContent="center"
                                >
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    xs={true}
                                  />
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    style={
                                      Object {
                                        "marginRight": 24,
                                      }
                                    }
                                  >
                                    <Memo
                                      className="OfflineSnackbar-success-40"
                                    />
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                  >
                                    Your connection is back online
                                  </WithStyles(ForwardRef(Grid))>
                                  <WithStyles(ForwardRef(Grid))
                                    item={true}
                                    xs={true}
                                  />
                                </WithStyles(ForwardRef(Grid))>
                              }
                              onClose={[Function]}
                              open={false}
                            />
                          </WithStyles(ForwardRef(Snackbar))>
                        </div>
                      </OfflineSnackbar>
                    </WithStyles(OfflineSnackbar)>
                  </div>
                </ForwardRef(Grid)>
              </WithStyles(ForwardRef(Grid))>
            </AppClass>
          </WithStyles(AppClass)>
        </MuiPickersUtilsProvider>
      </ThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;
