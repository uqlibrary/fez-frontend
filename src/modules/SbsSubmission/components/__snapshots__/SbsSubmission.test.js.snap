// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SbsSubmission test should display successfull submission screen 1`] = `
<StandardPage
  title="Professional doctorate deposit"
>
  <ForwardRef(Grid)
    container={true}
    spacing={3}
  >
    <ForwardRef(Grid)
      item={true}
      xs={12}
    >
      <StandardCard
        title="Your thesis has been deposited"
      >
        <ForwardRef(Typography)>
          You have successfully deposited your thesis to UQ eSpace. You wil receive a confirmation email soon.
        </ForwardRef(Typography)>
      </StandardCard>
    </ForwardRef(Grid)>
  </ForwardRef(Grid)>
</StandardPage>
`;

exports[`SbsSubmission test should have a helper to generate alert props 1`] = `
Object {
  "message": "Error has occurred during request and request cannot be processed. Check your internet connection and TRY AGAIN or contact UQ Graduate School administrators.",
  "title": "Error",
  "type": "error_outline",
}
`;

exports[`SbsSubmission test should render sbs thesis submission acknowledgement 1`] = `
<StandardPage
  title="Professional doctorate deposit"
>
  <ForwardRef(Grid)
    container={true}
    spacing={3}
  >
    <ForwardRef(Grid)
      item={true}
      xs={12}
    >
      <StandardCard
        title="Your thesis has been deposited"
      >
        <ForwardRef(Typography)>
          You have successfully deposited your thesis to UQ eSpace. You wil receive a confirmation email soon.
        </ForwardRef(Typography)>
      </StandardCard>
    </ForwardRef(Grid)>
  </ForwardRef(Grid)>
</StandardPage>
`;

exports[`SbsSubmission test should render sbs thesis submission form 1`] = `
<StandardPage
  title="Professional doctorate deposit"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to abandon workflow?",
            "confirmationTitle": "Abandon workflow",
          }
        }
        when={true}
      />
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "No, continue editing",
            "confirmButtonLabel": "Yes, deposit thesis",
            "confirmationMessage": "You are about to deposit your thesis with attached files. Are you sure you want to proceed?",
            "confirmationTitle": "Thesis deposit",
          }
        }
        onAction={[MockFunction]}
        onRef={[Function]}
      />
      <ForwardRef(Grid)
        container={true}
        spacing={3}
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Thesis information"
          >
            <ForwardRef(Grid)
              container={true}
              spacing={3}
            >
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  disabled={false}
                  height={50}
                  name="thesisTitle"
                  required={true}
                  richEditorId="rek-title"
                  title="Thesis title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "FormHelperTextProps": [Function],
                        "InputLabelProps": [Function],
                        "InputProps": [Function],
                        "SelectProps": [Function],
                        "autoComplete": [Function],
                        "autoFocus": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "color": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "error": [Function],
                        "fullWidth": [Function],
                        "help": [Function],
                        "helperText": [Function],
                        "id": [Function],
                        "inputProps": [Function],
                        "inputRef": [Function],
                        "label": [Function],
                        "margin": [Function],
                        "maxRows": [Function],
                        "minRows": [Function],
                        "multiline": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "placeholder": [Function],
                        "required": [Function],
                        "rows": [Function],
                        "select": [Function],
                        "size": [Function],
                        "sx": [Function],
                        "textFieldId": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Author name"
                  name="currentAuthor.0.nameAsPublished"
                  placeholder=""
                  required={true}
                  rows={1}
                  textFieldId="rek-author"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  ariaLabel="Select a thesis type"
                  component={[Function]}
                  disabled={false}
                  genericSelectFieldId="rek-genre-type"
                  id="thesis-subtype"
                  itemsList={
                    Array [
                      Object {
                        "text": "MPhil Thesis",
                        "value": "MPhil Thesis",
                      },
                      Object {
                        "text": "PhD Thesis",
                        "value": "PhD Thesis",
                      },
                      Object {
                        "text": "Professional Doctorate",
                        "value": "Professional Doctorate",
                      },
                    ]
                  }
                  label="Thesis type"
                  name="rek_genre_type"
                  required={true}
                  selectPrompt="Please select a thesis type"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Institution name"
                  hintText=""
                  name="fez_record_search_key_org_name.rek_org_name"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Enrolling unit"
                  hintText="Enrolling unit, eg. School of Business"
                  name="fez_record_search_key_org_unit_name.rek_org_unit_name"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  className="requiredHintField"
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication date"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  disabled={false}
                  name="thesisAbstract"
                  required={true}
                  richEditorId="rek-description"
                  title="Abstract"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
            </ForwardRef(Grid)>
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Supervisors"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-supervisor"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add supervisor",
                      "descriptionStep1": "",
                      "descriptionStep1NoStep2": "List your current supervisors",
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "supervisors-name-as-published-field",
                      "nameAsPublishedHint": "",
                      "nameAsPublishedLabel": "Enter each supervisor’s name on a separate line e.g. Firstname Surname",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": "",
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Supervisor's name",
                      "reorderColumn": "Reorder items",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this supervisor ([name]) to assign it as you",
                      "suffix": " listed supervisor",
                    },
                  },
                }
              }
              name="supervisors"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Field of research"
          >
            <ForwardRef(Typography)>
              Select up to 3 Field of Research (FoR) codes at the 4 digit level
            </ForwardRef(Typography)>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="rek-subject"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              maxCount={3}
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Keywords"
          >
            <ForwardRef(Typography)>
              Add up to 10 individual keywords, or a pipe separated list, that describe the content of the thesis. (eg. one|two|three)
            </ForwardRef(Typography)>
            <Field
              component={[Function]}
              disabled={false}
              listEditorId="rek-keywords"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButtonLabel": "Add",
                      "editButtonLabel": "Update",
                      "id": "keywords-input",
                      "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                      "inputFieldLabel": "Keywords",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all keywords",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all keywords?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Keyword",
                      "reorderColumn": "Reorder keywords",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this keyword",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this keyword?",
                        "confirmationTitle": "Delete keyword",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move keyword down the order",
                      "moveUpHint": "Move keyword up the order",
                    },
                  },
                }
              }
              maxCount={10}
              name="fez_record_search_key_keywords"
              searchKey={
                Object {
                  "order": "rek_keywords_order",
                  "value": "rek_keywords",
                }
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional notes"
          >
            <Field
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "FormHelperTextProps": [Function],
                    "InputLabelProps": [Function],
                    "InputProps": [Function],
                    "SelectProps": [Function],
                    "autoComplete": [Function],
                    "autoFocus": [Function],
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "color": [Function],
                    "defaultValue": [Function],
                    "disabled": [Function],
                    "error": [Function],
                    "fullWidth": [Function],
                    "help": [Function],
                    "helperText": [Function],
                    "id": [Function],
                    "inputProps": [Function],
                    "inputRef": [Function],
                    "label": [Function],
                    "margin": [Function],
                    "maxRows": [Function],
                    "minRows": [Function],
                    "multiline": [Function],
                    "name": [Function],
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "placeholder": [Function],
                    "required": [Function],
                    "rows": [Function],
                    "select": [Function],
                    "size": [Function],
                    "sx": [Function],
                    "textFieldId": [Function],
                    "type": [Function],
                    "value": [Function],
                    "variant": [Function],
                  },
                  "render": [Function],
                }
              }
              disabled={false}
              fullWidth={true}
              label="Notes (not publicly viewable)"
              multiline={true}
              name="comments"
              placeholder="Provide any additional information"
              rows={3}
              title="Additional notes"
              type="text"
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              defaultQuickTemplateId={3}
              disabled={false}
              locale={
                Object {
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the work.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files, or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Maximum file size is 5GB. 
                    <br />
                    PDF files must be saved using the following naming structure
                     
                    <b>
                      &lt;student number&gt;_&lt;degree type&gt;_&lt;document name&gt;.pdf
                    </b>
                    . Document name could be thesis, abstract, and etc. For example:
                    <ul>
                      <li>
                        s1234567_pd_abstract.pdf
                      </li>
                      <li>
                        s1234567_pd_totalthesis.pdf
                      </li>
                    </ul>
                    Supplementary audio files are to be in MP 3 format. 
                    <br />
                    Supplementary video files are to be in WMV or AVI format. 
                    <br />
                  </div>,
                  "instructions": "",
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          item={true}
          sm={true}
          xs={false}
        />
        <ForwardRef(Grid)
          item={true}
          sm="auto"
          xs={12}
        >
          <ForwardRef(Button)
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </ForwardRef(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          sm="auto"
          xs={12}
        >
          <ForwardRef(Button)
            color="primary"
            data-analyticsid="submit-thesis"
            fullWidth={true}
            id="submit-thesis"
            onClick={[Function]}
            variant="contained"
          >
            Deposit your thesis
          </ForwardRef(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;

exports[`SbsSubmission test should render sbs thesis submission form 2`] = `
<StandardPage
  title="Professional doctorate deposit"
>
  <ConfirmDiscardFormChanges
    dirty={true}
    submitSucceeded={false}
  >
    <form>
      <NavigationDialogBox
        txt={
          Object {
            "cancelButtonLabel": "No",
            "confirmButtonLabel": "Yes",
            "confirmationMessage": "Are you sure you want to abandon workflow?",
            "confirmationTitle": "Abandon workflow",
          }
        }
        when={true}
      />
      <WithStyles(ConfirmDialogBox)
        locale={
          Object {
            "cancelButtonLabel": "No, continue editing",
            "confirmButtonLabel": "Yes, deposit thesis",
            "confirmationMessage": "You are about to deposit your thesis with attached files. Are you sure you want to proceed?",
            "confirmationTitle": "Thesis deposit",
          }
        }
        onAction={[MockFunction]}
        onRef={[Function]}
      />
      <ForwardRef(Grid)
        container={true}
        spacing={3}
      >
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Thesis information"
          >
            <ForwardRef(Grid)
              container={true}
              spacing={3}
            >
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  disabled={false}
                  height={50}
                  name="thesisTitle"
                  required={true}
                  richEditorId="rek-title"
                  title="Thesis title"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "propTypes": Object {
                        "FormHelperTextProps": [Function],
                        "InputLabelProps": [Function],
                        "InputProps": [Function],
                        "SelectProps": [Function],
                        "autoComplete": [Function],
                        "autoFocus": [Function],
                        "children": [Function],
                        "className": [Function],
                        "classes": [Function],
                        "color": [Function],
                        "defaultValue": [Function],
                        "disabled": [Function],
                        "error": [Function],
                        "fullWidth": [Function],
                        "help": [Function],
                        "helperText": [Function],
                        "id": [Function],
                        "inputProps": [Function],
                        "inputRef": [Function],
                        "label": [Function],
                        "margin": [Function],
                        "maxRows": [Function],
                        "minRows": [Function],
                        "multiline": [Function],
                        "name": [Function],
                        "onBlur": [Function],
                        "onChange": [Function],
                        "onFocus": [Function],
                        "placeholder": [Function],
                        "required": [Function],
                        "rows": [Function],
                        "select": [Function],
                        "size": [Function],
                        "sx": [Function],
                        "textFieldId": [Function],
                        "type": [Function],
                        "value": [Function],
                        "variant": [Function],
                      },
                      "render": [Function],
                    }
                  }
                  disabled={false}
                  fullWidth={true}
                  label="Author name"
                  name="currentAuthor.0.nameAsPublished"
                  placeholder=""
                  required={true}
                  rows={1}
                  textFieldId="rek-author"
                  type="text"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                sm={6}
                xs={12}
              >
                <Field
                  ariaLabel="Select a thesis type"
                  component={[Function]}
                  disabled={false}
                  genericSelectFieldId="rek-genre-type"
                  id="thesis-subtype"
                  itemsList={
                    Array [
                      Object {
                        "text": "MPhil Thesis",
                        "value": "MPhil Thesis",
                      },
                      Object {
                        "text": "PhD Thesis",
                        "value": "PhD Thesis",
                      },
                      Object {
                        "text": "Professional Doctorate",
                        "value": "Professional Doctorate",
                      },
                    ]
                  }
                  label="Thesis type"
                  name="rek_genre_type"
                  required={true}
                  selectPrompt="Please select a thesis type"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Institution name"
                  hintText=""
                  name="fez_record_search_key_org_name.rek_org_name"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={
                    Object {
                      "$$typeof": Symbol(react.memo),
                      "WrappedComponent": Object {
                        "$$typeof": Symbol(react.memo),
                        "compare": null,
                        "type": [Function],
                      },
                      "compare": null,
                      "type": [Function],
                    }
                  }
                  disabled={false}
                  floatingLabelText="Enrolling unit"
                  hintText="Enrolling unit, eg. School of Business"
                  name="fez_record_search_key_org_unit_name.rek_org_unit_name"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  allowPartial={true}
                  className="requiredHintField"
                  component={[Function]}
                  disabled={false}
                  floatingTitle="Publication date"
                  floatingTitleRequired={true}
                  name="rek_date"
                  partialDateFieldId="rek-date"
                  required={true}
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
              <ForwardRef(Grid)
                item={true}
                xs={12}
              >
                <Field
                  component={[Function]}
                  disabled={false}
                  name="thesisAbstract"
                  required={true}
                  richEditorId="rek-description"
                  title="Abstract"
                  validate={
                    Array [
                      [Function],
                    ]
                  }
                />
              </ForwardRef(Grid)>
            </ForwardRef(Grid)>
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Supervisors"
          >
            <Field
              component={[Function]}
              contributorEditorId="rek-supervisor"
              disabled={false}
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButton": "Add supervisor",
                      "descriptionStep1": "",
                      "descriptionStep1NoStep2": "List your current supervisors",
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedFieldId": "supervisors-name-as-published-field",
                      "nameAsPublishedHint": "",
                      "nameAsPublishedLabel": "Enter each supervisor’s name on a separate line e.g. Firstname Surname",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "contributorAssignmentColumn": "Select your name",
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "descriptionStep2": "",
                      "identifierColumn": "UQ identifier",
                      "nameColumn": "Supervisor's name",
                      "reorderColumn": "Reorder items",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move item down the order",
                      "moveUpHint": "Move item up the order",
                      "selectHint": "Select this supervisor ([name]) to assign it as you",
                      "suffix": " listed supervisor",
                    },
                  },
                }
              }
              name="supervisors"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Field of research"
          >
            <ForwardRef(Typography)>
              Select up to 3 Field of Research (FoR) codes at the 4 digit level
            </ForwardRef(Typography)>
            <Field
              component={[Function]}
              disabled={false}
              distinctOnly={true}
              hideReorder={true}
              listEditorId="rek-subject"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "inputFieldHint": "Start typing code or field name and select from list",
                      "inputFieldLabel": "Field of research",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all items",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all items?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Field of research",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this item",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this item?",
                        "confirmationTitle": "Delete item",
                      },
                    },
                  },
                }
              }
              maxCount={3}
              name="fieldOfResearch"
              required={true}
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Keywords"
          >
            <ForwardRef(Typography)>
              Add up to 10 individual keywords, or a pipe separated list, that describe the content of the thesis. (eg. one|two|three)
            </ForwardRef(Typography)>
            <Field
              component={[Function]}
              disabled={false}
              listEditorId="rek-keywords"
              locale={
                Object {
                  "form": Object {
                    "locale": Object {
                      "addButtonLabel": "Add",
                      "editButtonLabel": "Update",
                      "id": "keywords-input",
                      "inputFieldHint": "Type keywords (Add multiple using pipes eg: one|two|three)",
                      "inputFieldLabel": "Keywords",
                    },
                  },
                  "header": Object {
                    "locale": Object {
                      "deleteAll": "Remove all keywords",
                      "deleteAllConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete all keywords?",
                        "confirmationTitle": "Delete all",
                      },
                      "nameColumn": "Keyword",
                      "reorderColumn": "Reorder keywords",
                    },
                  },
                  "row": Object {
                    "locale": Object {
                      "deleteHint": "Remove this keyword",
                      "deleteRecordConfirmation": Object {
                        "cancelButtonLabel": "No",
                        "confirmButtonLabel": "Yes",
                        "confirmationMessage": "Are you sure you want to delete this keyword?",
                        "confirmationTitle": "Delete keyword",
                      },
                      "editHint": "Edit this item",
                      "moveDownHint": "Move keyword down the order",
                      "moveUpHint": "Move keyword up the order",
                    },
                  },
                }
              }
              maxCount={10}
              name="fez_record_search_key_keywords"
              searchKey={
                Object {
                  "order": "rek_keywords_order",
                  "value": "rek_keywords",
                }
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Additional notes"
          >
            <Field
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "propTypes": Object {
                    "FormHelperTextProps": [Function],
                    "InputLabelProps": [Function],
                    "InputProps": [Function],
                    "SelectProps": [Function],
                    "autoComplete": [Function],
                    "autoFocus": [Function],
                    "children": [Function],
                    "className": [Function],
                    "classes": [Function],
                    "color": [Function],
                    "defaultValue": [Function],
                    "disabled": [Function],
                    "error": [Function],
                    "fullWidth": [Function],
                    "help": [Function],
                    "helperText": [Function],
                    "id": [Function],
                    "inputProps": [Function],
                    "inputRef": [Function],
                    "label": [Function],
                    "margin": [Function],
                    "maxRows": [Function],
                    "minRows": [Function],
                    "multiline": [Function],
                    "name": [Function],
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "placeholder": [Function],
                    "required": [Function],
                    "rows": [Function],
                    "select": [Function],
                    "size": [Function],
                    "sx": [Function],
                    "textFieldId": [Function],
                    "type": [Function],
                    "value": [Function],
                    "variant": [Function],
                  },
                  "render": [Function],
                }
              }
              disabled={false}
              fullWidth={true}
              label="Notes (not publicly viewable)"
              multiline={true}
              name="comments"
              placeholder="Provide any additional information"
              rows={3}
              title="Additional notes"
              type="text"
            />
          </StandardCard>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          xs={12}
        >
          <StandardCard
            title="Upload files"
          >
            <Field
              component={[Function]}
              defaultQuickTemplateId={3}
              disabled={false}
              locale={
                Object {
                  "delayMessage": "During peak times, there may be a delay before newly uploaded files appear on the work.",
                  "delayNotice": "Notice",
                  "errorTitle": "Upload Errors",
                  "fileUploadInstruction": <p>
                    Click here to select files, or drag files into this area to upload
                  </p>,
                  "fileUploadRestrictionHeading": "File upload restrictions",
                  "fileUploadRestrictions": <div>
                    Maximum file size is 5GB. 
                    <br />
                    PDF files must be saved using the following naming structure
                     
                    <b>
                      &lt;student number&gt;_&lt;degree type&gt;_&lt;document name&gt;.pdf
                    </b>
                    . Document name could be thesis, abstract, and etc. For example:
                    <ul>
                      <li>
                        s1234567_pd_abstract.pdf
                      </li>
                      <li>
                        s1234567_pd_totalthesis.pdf
                      </li>
                    </ul>
                    Supplementary audio files are to be in MP 3 format. 
                    <br />
                    Supplementary video files are to be in WMV or AVI format. 
                    <br />
                  </div>,
                  "instructions": "",
                  "successMessage": "Successfully added [numberOfFiles] file(s) to upload queue.",
                  "successTitle": "Success",
                  "validation": Object {
                    "duplicateFiles": "File(s) ([fileNames]) are duplicates and have been ignored",
                    "invalidFileNames": "File(s) ([fileNames]) have invalid file name",
                    "invalidMimeTypeFiles": "File(s) ([fileNames]) are not supported",
                    "notFiles": "Invalid files ([fileNames])",
                    "tooBigFiles": "File(s) ([fileNames]) exceed maximum allowed upload file size",
                    "tooManyFiles": "Maximum number of files ([maxNumberOfFiles]) has been exceeded. File(s) ([fileNames]) will not be uploaded",
                  },
                }
              }
              name="files"
              validate={
                Array [
                  [Function],
                ]
              }
            />
          </StandardCard>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
      <ForwardRef(Grid)
        container={true}
        spacing={2}
      >
        <ForwardRef(Grid)
          item={true}
          sm={true}
          xs={false}
        />
        <ForwardRef(Grid)
          item={true}
          sm="auto"
          xs={12}
        >
          <ForwardRef(Button)
            disabled={false}
            fullWidth={true}
            onClick={[Function]}
            variant="contained"
          >
            Cancel
          </ForwardRef(Button)>
        </ForwardRef(Grid)>
        <ForwardRef(Grid)
          item={true}
          sm="auto"
          xs={12}
        >
          <ForwardRef(Button)
            color="primary"
            data-analyticsid="submit-thesis"
            fullWidth={true}
            id="submit-thesis"
            onClick={[Function]}
            variant="contained"
          >
            Deposit your thesis
          </ForwardRef(Button)>
        </ForwardRef(Grid)>
      </ForwardRef(Grid)>
    </form>
  </ConfirmDiscardFormChanges>
</StandardPage>
`;

exports[`SbsSubmission test should render sbs thesis submission form 3`] = `
<StandardPage
  title="Professional doctorate deposit"
>
  <ForwardRef(Grid)
    container={true}
    spacing={3}
  >
    <ForwardRef(Grid)
      item={true}
      xs={12}
    >
      <Alert
        action={[Function]}
        actionButtonLabel="RESUBMIT YOUR THESIS"
        allowDismiss={false}
        customIcon={null}
        customType={null}
        disableAlertClick={false}
        dismissTitle="Click to dismiss this alert"
        message="There was an issue uploading your thesis files. You will need to resubmit your thesis by clicking on the 'Resubmit your thesis' button."
        showLoader={false}
        title="FILE UPLOAD ERROR"
        type="error"
        wiggle={null}
      />
    </ForwardRef(Grid)>
  </ForwardRef(Grid)>
</StandardPage>
`;
